<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<database_function_set name="SNOWFLAKE" xsi:schemaLocation="http://www.wherescape.com/xml/red ./Database%20Function%20Set.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.wherescape.com/xml/red">
	<database>Other</database>
	<meta_version>1</meta_version>
	<functional_groups>
		<functional_group name="Number">
			<functions>
				<function name="Absolute Value (ABS)">
					<description>Returns the absolute value of the number. Essentially converts all values to positive\r\nExample: ABS(load_sales.tax)</description>
					<syntax>ABS(numeric_column)</syntax>
					<model>ABS(numeric_column)</model>
					<default_column_start>4</default_column_start>
					<default_column_end>18</default_column_end>
				</function>
				<function name="Ceiling (CEIL)">
					<description>Returns the smallest integer or whole number that is greater than or equal to the value supplied\r\nExample: CEIL(load_sales.tax)</description>
					<syntax>CEIL(numeric_column)</syntax>
					<model>CEIL(numeric_column)</model>
					<default_column_start>5</default_column_start>
					<default_column_end>19</default_column_end>
				</function>
				<function name="Cosine (COS)">
					<description>Returns the trigonometric cosine for an angle expressed in radians.\r\nExample: COS(load_sales.value)</description>
					<syntax>COS(numeric_column)</syntax>
					<model>COS(numeric_column)</model>
					<default_column_start>4</default_column_start>
					<default_column_end>18</default_column_end>
				</function>
				<function name="Exponent (EXP)">
					<description>Returns e raised to the specified power. e = 2.718281828...\r\nExample: EXP(3)</description>
					<syntax>EXP(n)</syntax>
					<model>EXP(n)</model>
					<default_column_start>4</default_column_start>
					<default_column_end>5</default_column_end>
				</function>
				<function name="Floor (FLOOR)">
					<description>Returns the smallest integer or whole number that is less than or equal to the value supplied\r\nExample: FLOOR(load_sales.tax)</description>
					<syntax>FLOOR(numeric_column)</syntax>
					<model>FLOOR(numeric_column)</model>
					<default_column_start>6</default_column_start>
					<default_column_end>20</default_column_end>
				</function>
				<function name="Natural Logarithm (LN)">
					<description>Returns the natural, or base 'e' logarithm of the supplied value\r\nExample: LN(10.34)</description>
					<syntax>LN(n)</syntax>
					<model>LN(n)</model>
					<default_column_start>3</default_column_start>
					<default_column_end>4</default_column_end>
				</function>
				<function name="Base 10 Logarithm (LOG)">
					<description>Returns the base10 logarithm of the supplied value\r\nExample: LOG(10,100)</description>
					<syntax>LOG(base,number)</syntax>
					<model>LOG(base,number)</model>
					<default_column_start>9</default_column_start>
					<default_column_end>15</default_column_end>
				</function>
				<function name="Modulus (MOD)">
					<description>Returns the remainder of a value divided by a divisor.\r\nExample: MOD(load_sales.boxes,4).</description>
					<syntax>MOD(numeric_column,divisor)</syntax>
					<model>MOD(numeric_column,divisor)</model>
					<default_column_start>4</default_column_start>
					<default_column_end>18</default_column_end>
				</function>
				<function name="Raise to Exponent (POWER)">
					<description>Returns the value raise to the exponent.\r\nExample: POWER(3,3) = 27</description>
					<syntax>POWER(numeric_column,exponent)</syntax>
					<model>POWER(numeric_column,exponent)</model>
					<default_column_start>6</default_column_start>
					<default_column_end>20</default_column_end>
				</function>
				<function name="Round (ROUND)">
					<description>Returns a numeric value rounded to a given nuber of places (integer) to the right of the decimal point. \r\nIf you omit integer, then n is rounded to 0 places.\r\nExample: ROUND(12.399,1) = 12.4</description>
					<syntax>ROUND(numeric_column [, integer ])</syntax>
					<model>ROUND(numeric_column)</model>
					<default_column_start>6</default_column_start>
					<default_column_end>20</default_column_end>
				</function>
				<function name="Sign (SIGN)">
					<description>Returns either 0, 1, or -1 depending on the passed value. Zero if the passed value is zero.\r\nExample: SIGN(load_sales.value)</description>
					<syntax>SIGN(numeric_column)</syntax>
					<model>SIGN(numeric_column)</model>
					<default_column_start>5</default_column_start>
					<default_column_end>19</default_column_end>
				</function>
				<function name="Sine (SIN)">
					<description>Returns the trigonometric sine for an angle expressed in radians.\r\nExample: SIN(load_sales.value)</description>
					<syntax>SIN(numeric_column)</syntax>
					<model>SIN(numeric_column)</model>
					<default_column_start>4</default_column_start>
					<default_column_end>18</default_column_end>
				</function>
				<function name="Square Root (SQRT)">
					<description>Returns the square root of the value supplied.\r\nExample: SQRT(load_sales.value)</description>
					<syntax>SQRT(numeric_column)</syntax>
					<model>SQRT(numeric_column)</model>
					<default_column_start>5</default_column_start>
					<default_column_end>19</default_column_end>
				</function>
				<function name="Tangent (TAN)">
					<description>Returns the trigonometric tangent for an angle expressed in radians.\r\nExample: TAN(load_sales.value)</description>
					<syntax>TAN(numeric_column)</syntax>
					<model>TAN(numeric_column)</model>
					<default_column_start>4</default_column_start>
					<default_column_end>18</default_column_end>
				</function>
				<function name="Truncate (TRUNC)">
					<description>Returns numeric value truncated to a given number (integer) of decimal places. \r\nIf the number of places is omitted, then the value is truncated to 0 places.\r\nExample: TRUNC(12.399,1) = 12.3</description>
					<syntax>TRUNC(numeric_column [, integer ])</syntax>
					<model>TRUNC(numeric_column)</model>
					<default_column_start>6</default_column_start>
					<default_column_end>20</default_column_end>
				</function>
			</functions>
		</functional_group>
		<functional_group name="String">
			<functions>
				<function name="ASCII value (ASCII)">
					<description>Returns the ascii value of the first character in the string\r\nExample: ASCII(load_customer.name)</description>
					<syntax>ASCII(string_column)</syntax>
					<model>ASCII(string_column)</model>
					<default_column_start>6</default_column_start>
					<default_column_end>19</default_column_end>
				</function>
				<function name="Character (CHR)">
					<description>Returns a character whose ASCII value is the passed integer.\r\nExample: CHR(65)</description>
					<syntax>CHR(integer)</syntax>
					<model>CHR(integer)</model>
					<default_column_start>4</default_column_start>
					<default_column_end>11</default_column_end>
				</function>
				<function name="Concatenate (CONCAT)">
					<description>Returns a string that is a concatenation of the two passed strings.\r\nExample: CONCAT(load_customer.first_name,load_customer.last_name)</description>
					<syntax>CONCAT(string_column, string_column)</syntax>
					<model>CONCAT(string_column, string_column)</model>
					<default_column_start>7</default_column_start>
					<default_column_end>20</default_column_end>
				</function>
				<function name="Length (LENGTH)">
					<description>Returns an integer value containing the number of characters in the string column.\r\nExample: LENGTH(load_customer.name)</description>
					<syntax>LENGTH(string_column)</syntax>
					<model>LENGTH(string_column)</model>
					<default_column_start>7</default_column_start>
					<default_column_end>20</default_column_end>
				</function>
				<function name="Locate (POSITION)">
					<description>Returns an integer value containing the starting position of the search string, or zero if the search string is not found.\r\nExample: POSITION('smith',load_customer.name,2)</description>
					<syntax>POSITION('search string', string_column [ ,start position ] )</syntax>
					<model>POSITION('search string', string_column [ ,start position ] )</model>
					<default_column_start>26</default_column_start>
					<default_column_end>39</default_column_end>
				</function>
				<function name="Lower (LOWER)">
					<description>Returns a string where every character in the passed column data is converted to lower case.\r\nExample: LOWER(load_customer.name)</description>
					<syntax>LOWER(string_column)</syntax>
					<model>LOWER(string_column)</model>
					<default_column_start>6</default_column_start>
					<default_column_end>19</default_column_end>
				</function>
				<function name="Left Pad (LPAD)">
					<description>Returns a string which is the passed column data padded to the left with either spaces or the set of characters provided.\r\nThe pad characters are added to achieve the length specified.\r\nExample: LPAD(load_customer.name,60,'.')</description>
					<syntax>LPAD(string_column,length [, 'character'])</syntax>
					<model>LPAD(string_column,length [, 'character'])</model>
					<default_column_start>5</default_column_start>
					<default_column_end>18</default_column_end>
				</function>
				<function name="Left Trim (LTRIM)">
					<description>Returns a string which is the passed column data where all of the leading characters specified have been removed.\r\nBy default white spaces are removed.\r\nExample: LTRIM(load_customer.name,'+-=')</description>
					<syntax>LTRIM(string_column [ ,'character' ] )</syntax>
					<model>LTRIM(string_column [ ,'character' ] )</model>
					<default_column_start>6</default_column_start>
					<default_column_end>19</default_column_end>
				</function>
				<function name="Replace (REPLACE)">
					<description>Returns a string where all occurrences of the 'if' string are replaced with the 'then string.\r\nIf no 'then' string is supplied all occurrences of the 'if' string are deleted.\r\nExample: REPLACE(load_customer.name,'SMYTH','SMITH')</description>
					<syntax>REPLACE(string_column,if [ , then ] )</syntax>
					<model>REPLACE(string_column,if [ , then ] )</model>
					<default_column_start>8</default_column_start>
					<default_column_end>21</default_column_end>
				</function>
				<function name="Right Pad (RPAD)">
					<description>Returns a string which is the passed column data padded to the right with either spaces or the set of characters provided.\r\nThe pad characters are added to achieve the length specified.\r\nExample: LPAD(load_customer.name,60,'.')</description>
					<syntax>RPAD(string_column,length [ , 'character' ] )</syntax>
					<model>RPAD(string_column,length [ , 'character' ] )</model>
					<default_column_start>5</default_column_start>
					<default_column_end>18</default_column_end>
				</function>
				<function name="Right Trim (RTRIM)">
					<description>Returns a string which is the passed column data where all of the trailing characters specified have been removed.\r\nBy default white spaces are removed.\r\nExample: RTRIM(load_customer.name,'+-=')</description>
					<syntax>RTRIM(string_column [ ,'character' ] )</syntax>
					<model>RTRIM(string_column [ ,'character' ] )</model>
					<default_column_start>6</default_column_start>
					<default_column_end>19</default_column_end>
				</function>
				<function name="Sub String (SUBSTR)">
					<description>Returns a sub string of the passed column data. The start position and length of the substring are normally supplied.\r\nExample: SUBSTR(load_customer.name,INSTR(load_customer.name,' ')+1,10)</description>
					<syntax>SUBSTR(string_column, start [ ,count ] )</syntax>
					<model>SUBSTR(string_column, start [ ,count ] )</model>
					<default_column_start>7</default_column_start>
					<default_column_end>20</default_column_end>
				</function>
				<function name="Translate (TRANSLATE)">
					<description>Returns a string where characters have been replaced based on a positional matching of characters in the 'if' string\r\nwith characters in the 'then' string.\r\nExample: TRANSLATE(load_customer.name,'ABCDEFG','abcdefg')</description>
					<syntax>TRANSLATE(string_column, if, then )</syntax>
					<model>TRANSLATE(string_column, if, then )</model>
					<default_column_start>10</default_column_start>
					<default_column_end>23</default_column_end>
				</function>
				<function name="Upper (UPPER)">
					<description>Returns a string where every character in the passed column data is converted to upper case.\r\nExample: UPPER(load_customer.name)</description>
					<syntax>UPPER(string_column)</syntax>
					<model>UPPER(string_column)</model>
					<default_column_start>6</default_column_start>
					<default_column_end>19</default_column_end>
				</function>
			</functions>
		</functional_group>
		<functional_group name="Date">
			<functions>
				<function name="Add Date parts (DATEADD)">
					<description>Returns a date which has a number of date parts added to the supplied date.\r\nDate parts are Year,quarter,Month,dayofyear,Day,Week,Hour,minute,second,millisecond\r\nExample: DATEADD(DAY,23,load_customer.start_date)</description>
					<syntax>DATEADD(date_part, count, date_column)</syntax>
					<model>DATEADD(date_part, count, date_column)</model>
					<default_column_start>26</default_column_start>
					<default_column_end>37</default_column_end>
				</function>
				<function name="Add Months (ADD_MONTHS)">
					<description>Returns a date which has had the specified number of months added to it.\r\nExample: ADD_MONTHS(load_customer.start_date,36)</description>
					<syntax>ADD_MONTHS(date_column,number_of_months)</syntax>
					<model>ADD_MONTHS(date_column,number_of_months)</model>
					<default_column_start>11</default_column_start>
					<default_column_end>22</default_column_end>
				</function>
				<function name="Greatest Date (GREATEST)">
					<description>Returns the latest date from a list of dates.\r\nExample: GREATEST(load_sample.date1, load_sample.date2)</description>
					<syntax>GREATEST(date_column, date_column [,date_column]...)</syntax>
					<model>GREATEST(date_column, date_column [,date_column]...)</model>
					<default_column_start>9</default_column_start>
					<default_column_end>20</default_column_end>
				</function>
				<function name="Earliest Date (LEAST)">
					<description>Returns the earliest date from a list of dates.\r\nExample: LEAST(load_sample.date1, load_sample.date2)</description>
					<syntax>LEAST(date_column, date_column [,date_column]...)</syntax>
					<model>LEAST(date_column, date_column [,date_column]...)</model>
					<default_column_start>6</default_column_start>
					<default_column_end>17</default_column_end>
				</function>
				<function name="Last Day of Month (LAST_DAY)">
					<description>Returns the date of the last day of the month that the supplied date is in.\r\nExample: LAST_DAY(load_sample.date1)</description>
					<syntax>LAST_DAY(date_column)</syntax>
					<model>LAST_DAY(date_column)</model>
					<default_column_start>9</default_column_start>
					<default_column_end>20</default_column_end>
				</function>
				<function name="Date Part, numeric (DATE_PART)">
					<description>Returns the integer value of the date part for the date supplied.\r\nDate parts are year,quarter,month,dayofyear,day,week,weekday,hour,minute,second,millisecond.\r\nExample: DATE_PART(month,load_customer.start_date)</description>
					<syntax>DATE_PART(date_part,date_column)</syntax>
					<model>DATE_PART(date_part,date_column)</model>
					<default_column_start>20</default_column_start>
					<default_column_end>31</default_column_end>
				</function>
				<function name="Day Name, alpha (DAYNAME)">
					<description>Returns the day name of the date supplied.\r\nExample: DAYNAME(load_customer.start_date)</description>
					<syntax>DAYNAME(date_column)</syntax>
					<model>DAYNAME(date_column)</model>
					<default_column_start>8</default_column_start>
					<default_column_end>19</default_column_end>
				</function>
				<function name="System Date (CURRENT_DATE)">
					<description>Returns the current system date time.\r\nExample: CURRENT_DATE</description>
					<syntax>CURRENT_DATE</syntax>
					<model>CURRENT_DATE</model>
					<default_column_start>0</default_column_start>
					<default_column_end>0</default_column_end>
				</function>
				<function name="System Date (CURRENT_TIMESTAMP)">
					<description>Returns the current system date time.\r\nExample: CURRENT_TIMESTAMP</description>
					<syntax>CURRENT_TIMESTAMP</syntax>
					<model>CURRENT_TIMESTAMP</model>
					<default_column_start>0</default_column_start>
					<default_column_end>0</default_column_end>
				</function>
				<function name="Truncate (TRUNC)">
					<description>Returns date with the time portion of the day truncated to the unit specified by the format model fmt.\r\nIf you omit fmt, then date is truncated to the nearest day.\r\nExample: TRUNC(load_sample.date1,'YEAR')</description>
					<syntax>TRUNC(date_column, 'fmt' )</syntax>
					<model>TRUNC(date_column,'fmt')</model>
					<default_column_start>6</default_column_start>
					<default_column_end>17</default_column_end>
				</function>
			</functions>
		</functional_group>
		<functional_group name="Conversion Functions">
			<functions>
				<function name="Cast as Type (CAST)">
					<description>Returns the column converted to the specified data type and size.\r\nExample: CAST(load_inventory.size AS VARCHAR(20))</description>
					<syntax>CAST(column AS data_type)</syntax>
					<model>CAST(column AS data_type)</model>
					<default_column_start>5</default_column_start>
					<default_column_end>11</default_column_end>
				</function>
				<function name="To Character (TO_CHAR)">
					<description>Returns a string having converted from either a number or date.\r\nExample: TO_CHAR(load_inventory.date1,'YYYYMMDD')</description>
					<syntax>TO_CHAR(numeric_column or date_column, [format])</syntax>
					<model>TO_CHAR(numeric_column or date_column, [format])</model>
					<default_column_start>8</default_column_start>
					<default_column_end>22</default_column_end>
				</function>
				<function name="To Date (TO_DATE)">
					<description>Returns a date having converted from a string with the supplied format mask.\r\nExample: TO_DATE(load_inventory.date_ymd,'YYYYMMDD')</description>
					<syntax>TO_DATE(numeric_column, [format])</syntax>
					<model>TO_DATE(numeric_column, [format])</model>
					<default_column_start>8</default_column_start>
					<default_column_end>22</default_column_end>
				</function>
				<function name="To Number (TO_NUMBER)">
					<description>Returns a number having converted from a character string.\r\nExample: TO_NUMBER(load_inventory.position)</description>
					<syntax>TO_NUMBER(string_column)</syntax>
					<model>TO_NUMBER(string_column)</model>
					<default_column_start>10</default_column_start>
					<default_column_end>23</default_column_end>
				</function>
			</functions>
		</functional_group>
		<functional_group name="Logic Functions">
			<functions>
				<function name="Case Statement (CASE)">
					<description>Allows the use of IF ... THEN ... ELSE logic.\r\nExample: CASE WHEN load_sample.temp1 &gt; load_sample_temp2 THEN 'Hot' ELSE 'Cold' END</description>
					<syntax>CASE [input_expression] WHEN when_expression THEN result_expression [ ...n ] [ ELSE else_result_expression] END</syntax>
					<model>CASE input_expression WHEN when_expression THEN result_expression [ ...n ] [ ELSE else_result_expression] END</model>
					<default_column_start>5</default_column_start>
					<default_column_end>22</default_column_end>
				</function>
				<function name="Decode (DECODE)">
					<description>Returns the value that matches the specified criteria.\r\nExample: DECODE(load_sample.temp1,10,'Okay',9,'Cold',11,'Hot,'Unknown')</description>
					<syntax>DECODE(column, criteria,result [,criteria,result...] ,default)</syntax>
					<model>DECODE(column, criteria,result [,criteria,result...] ,default)</model>
					<default_column_start>7</default_column_start>
					<default_column_end>13</default_column_end>
				</function>
				<function name="If Null Value (NVL)">
					<description>Returns either the passed column or the default value if the passed column is null.\r\nExample: NVL(load_sales.boxes,0).</description>
					<syntax>NVL(column,default_value)</syntax>
					<model>NVL(column,default_value)</model>
					<default_column_start>4</default_column_start>
					<default_column_end>10</default_column_end>
				</function>
				<function name="Translate (TRANSLATE)">
					<description>Returns a string where characters have been replaced based on a positional matching of characters in the 'if' string\r\nwith characters in the 'then' string.\r\nExample: TRANSLATE(load_customer.name,'ABCDEFG','abcdefg')</description>
					<syntax>TRANSLATE(string_column, if, then )</syntax>
					<model>TRANSLATE(string_column, if, then )</model>
					<default_column_start>10</default_column_start>
					<default_column_end>23</default_column_end>
				</function>
			</functions>
		</functional_group>
		<functional_group name="Aggregate">
			<functions>
				<function name="Sum (SUM)">
					<description>Returns the summed values from the supplied column.\r\nExample: SUM(load_inventory.temp1)</description>
					<syntax>SUM( &lt;expression&gt; )</syntax>
					<model>SUM( expression )</model>
					<default_column_start>5</default_column_start>
					<default_column_end>16</default_column_end>
				</function>
				<function name="Count (COUNT)">
					<description>Returns the count of the number of non-null values for the column.\r\nExample: COUNT(load_inventory.temp1)</description>
					<syntax>COUNT(DISTINCT &lt;expression&gt; )</syntax>
					<model>COUNT(DISTINCT expression )</model>
					<default_column_start>15</default_column_start>
					<default_column_end>26</default_column_end>
				</function>
				<function name="Minimum (MIN)">
					<description>Returns the minimum value from the supplied column.\r\nExample: MIN(load_inventory.temp1)</description>
					<syntax>MIN( &lt;expression&gt; )</syntax>
					<model>MIN( expression )</model>
					<default_column_start>5</default_column_start>
					<default_column_end>16</default_column_end>
				</function>
				<function name="Maximum (MAX)">
					<description>Returns the maximum value from the supplied column.\r\nExample: MAX(load_inventory.temp1)</description>
					<syntax>MAX( &lt;expression&gt; )</syntax>
					<model>MAX( expression )</model>
					<default_column_start>5</default_column_start>
					<default_column_end>16</default_column_end>
				</function>
				<function name="Average (AVG)">
					<description>Returns the average value for the supplied column.\r\nExample: AVG(load_inventory.temp1)</description>
					<syntax>AVG( &lt;expression&gt; )</syntax>
					<model>AVG( expression )</model>
					<default_column_start>5</default_column_start>
					<default_column_end>16</default_column_end>
				</function>
				<function name="Median (MEDIAN)">
					<description>Determines the median of a set of values.</description>
					<syntax>MEDIAN( &lt;expression&gt; )</syntax>
					<model>MEDIAN( expression )</model>
					<default_column_start>8</default_column_start>
					<default_column_end>19</default_column_end>
				</function>
				<function name="Standard Deviation (STDDEV)">
					<description>Returns the standard deviation for the supplied column.\r\nExample: STDDEV(load_inventory.temp1)</description>
					<syntax>STDDEV( &lt;expression&gt; )</syntax>
					<model>STDDEV( expression )</model>
					<default_column_start>8</default_column_start>
					<default_column_end>19</default_column_end>
				</function>
				<function name="Variance (VARIANCE)">
					<description>Returns the variance for the supplied column.\r\nExample: VARIANCE(load_inventory.temp1)</description>
					<syntax>VARIANCE( &lt;expression&gt; )</syntax>
					<model>VARIANCE( expression )</model>
					<default_column_start>10</default_column_start>
					<default_column_end>21</default_column_end>
				</function>
			</functions>
		</functional_group>
		<functional_group name="Window Functions">
			<functions>
				<function name="Cumulative Distribution (CUME_DIST)">
					<description>Finds the cumulative distribution of a value with regard to other values within the same window partition</description>
					<syntax>CUME_DIST() OVER ( [ PARTITION BY &lt;expression&gt; ] [ORDER BY &lt;order_by_expression&gt; ] )</syntax>
					<model>CUME_DIST () OVER ( PARTITION BY expression ORDER BY expression )</model>
					<default_column_start>33</default_column_start>
					<default_column_end>43</default_column_end>
				</function>
				<function name="Dense Rank (DENSE_RANK)">
					<description>Finds the rank of a value within a group of values, without gaps.</description>
					<syntax>DENSE_RANK() OVER ( [ PARTITION BY &lt;expression&gt; ] [ORDER BY &lt;order_by_expression&gt; ])</syntax>
					<model>DENSE_RANK() OVER ( PARTITION BY expression ORDER BY order_by_expression )</model>
					<default_column_start>33</default_column_start>
					<default_column_end>44</default_column_end>
				</function>
				<function name="First Value (FIRST_VALUE)">
					<description>Returns the first value within an ordered group of values.</description>
					<syntax>FIRST_VALUE( &lt;expression&gt; ) OVER ( [ PARTITION BY &lt;expression&gt; ] [ORDER BY &lt;order_by_expression&gt; ])</syntax>
					<model>FIRST_VALUE( expression ) OVER ( PARTITION BY expression ORDER BY order_by_expression )</model>
					<default_column_start>46</default_column_start>
					<default_column_end>57</default_column_end>
				</function>
				<function name="Lag (LAG)">
					<description>Returns the value of expr at negative row offset offset, i.e. the value of expr at offset rows before with respect to the current input row.  If there is no such row (because the row offset would be less than or equal to 0 or greater than the number of input rows), the returned value is default.</description>
					<syntax>LAG ( &lt;expression&gt; [, &lt;offset&gt; [, &lt;default_expr&gt;]] ) OVER ( [ PARTITION BY &lt;expression&gt; ] [ORDER BY &lt;order_by_expression&gt; ])</syntax>
					<model> LAG ( expression, offset, default ) OVER ( PARTITION BY expression ORDER BY order_by_expression )</model>
					<default_column_start>7</default_column_start>
					<default_column_end>17</default_column_end>
				</function>
				<function name="Last Value (LAST_VALUE)">
					<description>Returns the last value within an ordered group of values.</description>
					<syntax>LAST_VALUE( &lt;expression&gt; ) OVER ( [ PARTITION BY &lt;expression&gt; ] [ORDER BY &lt;order_by_expression&gt; ] )</syntax>
					<model>LAST_VALUE( expression ) OVER ( PARTITION BY expression ORDER BY order_by_expression )</model>
					<default_column_start>12</default_column_start>
					<default_column_end>23</default_column_end>
				</function>
				<function name="Lead (LEAD)">
					<description>Returns the value of expr at positive row offset offset, i.e. the value of expr at offset rows after with respect to the current input row.  If there is no such row (because the row number would be less than or equal to 0 or greater than the number of input rows), the returned value is default.</description>
					<syntax>LEAD ( &lt;expression&gt; [, &lt;offset&gt; [, &lt;default_expr&gt;]] ) OVER ( [ PARTITION BY &lt;expression&gt; ] [ORDER BY &lt;order_by_expression&gt; ])</syntax>
					<model>LEAD( expression, offset, default ) OVER ( PARTITION BY expression ORDER BY order_by_expression )</model>
					<default_column_start>6</default_column_start>
					<default_column_end>16</default_column_end>
				</function>
				<function name="NTile (NTILE)">
					<description>Divides an ordered data set equally into the number of buckets specified by constant_value. Buckets are sequentially numbered 1 throughconstant_value.</description>
					<syntax>NTILE ( &lt;number_of_buckets&gt; ) OVER ( [ PARTITION BY &lt;expression&gt; ] [ORDER BY &lt;order_by_expression&gt; ])</syntax>
					<model>NTILE ( number_of_buckets ) OVER ( PARTITION BY expression ORDER BY order_by_expression )</model>
					<default_column_start>48</default_column_start>
					<default_column_end>59</default_column_end>
				</function>
				<function name="Percent Rank (PERCENT_RANK)">
					<description>Returns the relative rank of a value within a group of values.</description>
					<syntax>PERCENT_RANK() OVER ( [ PARTITION BY &lt;expression&gt; ] [ORDER BY &lt;order_by_expression&gt; ])</syntax>
					<model>PERCENT_RANK() OVER ( PARTITION BY expression ORDER BY order_by_expression )</model>
					<default_column_start>35</default_column_start>
					<default_column_end>46</default_column_end>
				</function>
				<function name="Rank (RANK)">
					<description>Returns the rank of a value within a group of values.  The rank value starts at 1 and continues up.</description>
					<syntax>RANK() OVER ( [ PARTITION BY &lt;expression&gt; ] [ORDER BY &lt;order_by_expression&gt; ])</syntax>
					<model>RANK() OVER ( PARTITION BY expression ORDER BY order_by_expression )</model>
					<default_column_start>27</default_column_start>
					<default_column_end>38</default_column_end>
				</function>
				<function name="Row Number (ROW_NUMBER)">
					<description>Returns a unique row number for each row within a window partition starting with 1 and increasing sequentially.</description>
					<syntax>ROW_NUMBER() OVER ( [ PARTITION BY &lt;expression&gt; ] [ORDER BY &lt;order_by_expression&gt; ])</syntax>
					<model>ROW_NUMBER() OVER ( PARTITION BY expression ORDER BY order_by_expression )</model>
					<default_column_start>33</default_column_start>
					<default_column_end>44</default_column_end>
				</function>
				<function name="Width Bucket (WIDTH_BUCKET)">
					<description>Constructs equi-width histograms, in which the histogram range is divided into intervals of identical size. WIDTH_BUCKET returns the bucket number into which the value of an expression falls, after it has been evaluated. The function returns an integer value or null if any input is null. Values below the range return 0, and values above the range return num_buckets + 1.</description>
					<syntax>WIDTH_BUCKET ( &lt;expression&gt;, &lt;min_value&gt;, &lt;max_value&gt;, &lt;number_of_buckets&gt; )</syntax>
					<model>WIDTH_BUCKET( expression, min_value, max_value, number_of_buckets )</model>
					<default_column_start>14</default_column_start>
					<default_column_end>24</default_column_end>
				</function>
			</functions>
		</functional_group>
		<functional_group name="Aggregate Window Functions">
			<functions>
				<function name="Sum (SUM)">
					<description>Returns the summed values from the supplied column, grouping on the partition column(s).</description>
					<syntax>SUM( &lt;expression&gt; ) OVER ( [ PARTITION BY &lt;expression&gt; ] )</syntax>
					<model>SUM( expression ) OVER ( PARTITION BY expression )</model>
					<default_column_start>5</default_column_start>
					<default_column_end>16</default_column_end>
				</function>
				<function name="Count (COUNT)">
					<description>Returns the count of the number of non-null values for the column, grouping on the partition column(s).</description>
					<syntax>COUNT( &lt;expression&gt; ) OVER ( [ PARTITION BY &lt;expression&gt; ] )</syntax>
					<model>COUNT( expression ) OVER ( PARTITION BY expression )</model>
					<default_column_start>7</default_column_start>
					<default_column_end>18</default_column_end>
				</function>
				<function name="Minimum (MIN)">
					<description>Returns the minimum value from the supplied column, grouping on the partition column(s).</description>
					<syntax>MIN( &lt;expression&gt; ) OVER ( [ PARTITION BY &lt;expression&gt; ] )</syntax>
					<model>MIN( expression ) OVER ( PARTITION BY expression )</model>
					<default_column_start>5</default_column_start>
					<default_column_end>16</default_column_end>
				</function>
				<function name="Maximum (MAX)">
					<description>Returns the maximum value from the supplied column, grouping on the partition column(s).</description>
					<syntax>MAX( &lt;expression&gt; ) OVER ( [ PARTITION BY &lt;expression&gt; ] )</syntax>
					<model>MAX( expression ) OVER ( PARTITION BY expression )</model>
					<default_column_start>5</default_column_start>
					<default_column_end>16</default_column_end>
				</function>
				<function name="Average (AVG)">
					<description>Returns the average value for the supplied column, grouping on the partition column(s).</description>
					<syntax>AVG( &lt;expression&gt; ) OVER ( [ PARTITION BY &lt;expression&gt; ] )</syntax>
					<model>AVG( expression ) OVER ( PARTITION BY expression )</model>
					<default_column_start>5</default_column_start>
					<default_column_end>16</default_column_end>
				</function>
				<function name="Median (MEDIAN)">
					<description>Determines the median of a set of values, grouping on the partition column(s).</description>
					<syntax>MEDIAN( &lt;expression&gt; ) OVER ( [ PARTITION BY &lt;expression&gt; ] )</syntax>
					<model>MEDIAN( expression ) OVER ( PARTITION BY expression )</model>
					<default_column_start>8</default_column_start>
					<default_column_end>19</default_column_end>
				</function>
				<function name="Standard Deviation (STDDEV)">
					<description>Returns the sample standard deviation (square root of sample variance) of non-NULL values, grouping on the partition column(s).  If all records inside a group are NULL, returns NULL.</description>
					<syntax>STDDEV( &lt;expression&gt; ) OVER ( [ PARTITION BY &lt;expression&gt; ] )</syntax>
					<model>STDDEV( expression ) OVER ( PARTITION BY expression )</model>
					<default_column_start>8</default_column_start>
					<default_column_end>19</default_column_end>
				</function>
				<function name="Variance (VARIANCE)">
					<description>Returns the variance for the supplied column, grouping on the partition column(s).</description>
					<syntax>VARIANCE( &lt;expression&gt; ) OVER ( [ PARTITION BY &lt;expression&gt; ] )</syntax>
					<model>VARIANCE( expression ) OVER ( PARTITION BY expression )</model>
					<default_column_start>10</default_column_start>
					<default_column_end>21</default_column_end>
				</function>
			</functions>
		</functional_group>
		<functional_group name="Cumulative Window Functions">
			<functions>
				<function name="Sum (SUM)">
					<description>Returns the summed values from the supplied column, computing rolling values over a specified group of rows.</description>
					<syntax>SUM( &lt;expression&gt; ) OVER ( [ PARTITION BY &lt;expression&gt; ] [ORDER BY &lt;order_by_expression&gt; ] [ &lt;window_frame_clause&gt; ] )</syntax>
					<model>SUM( expression ) OVER ( PARTITION BY expression ORDER BY order_by_expression ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW )</model>
					<default_column_start>5</default_column_start>
					<default_column_end>16</default_column_end>
				</function>
				<function name="Count (COUNT)">
					<description>Returns the count of the number of non-null values for the column, computing rolling values over a specified group of rows.</description>
					<syntax>COUNT( &lt;expression&gt; ) OVER ( [ PARTITION BY &lt;expression&gt; ] [ORDER BY &lt;order_by_expression&gt; ] [ &lt;window_frame_clause&gt; ] )</syntax>
					<model>COUNT( expression ) OVER ( PARTITION BY expression ORDER BY order_by_expression ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW )</model>
					<default_column_start>7</default_column_start>
					<default_column_end>18</default_column_end>
				</function>
				<function name="Minimum (MIN)">
					<description>Returns the minimum value from the supplied column, computing rolling values over a specified group of rows.</description>
					<syntax>MIN( &lt;expression&gt; ) OVER ( [ PARTITION BY &lt;expression&gt; ] [ORDER BY &lt;order_by_expression&gt; ] [ &lt;window_frame_clause&gt; ] )</syntax>
					<model>MIN( expression ) OVER ( PARTITION BY expression ORDER BY order_by_expression ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW )</model>
					<default_column_start>5</default_column_start>
					<default_column_end>16</default_column_end>
				</function>
				<function name="Maximum (MAX)">
					<description>Returns the maximum value from the supplied column, computing rolling values over a specified group of rows.</description>
					<syntax>MAX( &lt;expression&gt; ) OVER ( [ PARTITION BY &lt;expression&gt; ] [ORDER BY &lt;order_by_expression&gt; ] [ &lt;window_frame_clause&gt; ] )</syntax>
					<model>MAX( expression ) OVER ( PARTITION BY expression ORDER BY order_by_expression ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW )</model>
					<default_column_start>5</default_column_start>
					<default_column_end>16</default_column_end>
				</function>
			</functions>
		</functional_group>
		<functional_group name="Cryptographic Hash Functions">
			<functions>
				<function name="MD5 Hex (MD5)">
					<description>Returns a 32-character hex-encoded string containing the 128-bit MD5 message digest.</description>
					<syntax>MD5( &lt;expression&gt; )</syntax>
					<model>MD5( expression )</model>
					<default_column_start>5</default_column_start>
					<default_column_end>16</default_column_end>
				</function>
				<function name="MD5 Binary (MD5_BINARY)">
					<description>Returns a 16-byte binary containing the 128-bit MD5 message digest.</description>
					<syntax>MD5_BINARY( &lt;expression&gt; )</syntax>
					<model>MD5_BINARY( expression )</model>
					<default_column_start>12</default_column_start>
					<default_column_end>23</default_column_end>
				</function>
				<function name="MD5 Number(MD5_NUMBER)">
					<description>Returns the 128-bit MD5 message digest interpreted as a signed 128-bit big endian number. This representation is useful for maximally efficient storage and comparison of MD5 digests.</description>
					<syntax>MD5_NUMBER( &lt;expression&gt; )</syntax>
					<model>MD5_NUMBER( expression )</model>
					<default_column_start>12</default_column_start>
					<default_column_end>23</default_column_end>
				</function>
				<function name="SHA1 Hex (SHA1)">
					<description>Returns a 40-character hex-encoded string containing the 160-bit SHA-1 message digest.</description>
					<syntax>SHA1( &lt;expression&gt; )</syntax>
					<model>SHA1( expression )</model>
					<default_column_start>6</default_column_start>
					<default_column_end>17</default_column_end>
				</function>
				<function name="SHA1 Binary (SHA1_BINARY)">
					<description>Returns a 20-byte binary containing the 160-bit SHA-1 message digest.</description>
					<syntax>SHA1_BINARY( &lt;expression&gt; )</syntax>
					<model>SHA1_BINARY( expression )</model>
					<default_column_start>13</default_column_start>
					<default_column_end>24</default_column_end>
				</function>
				<function name="SHA2 Hex (SHA2)">
					<description>Returns a 40-character hex-encoded string containing the 160-bit SHA-1 message digest.</description>
					<syntax>SHA2( &lt;expression&gt; )</syntax>
					<model>SHA2( expression )</model>
					<default_column_start>6</default_column_start>
					<default_column_end>17</default_column_end>
				</function>
				<function name="SHA2 Binary (SHA2_BINARY)">
					<description>Returns a 20-byte binary containing the 160-bit SHA-1 message digest.</description>
					<syntax>SHA2_BINARY( &lt;expression&gt; )</syntax>
					<model>SHA2_BINARY( expression )</model>
					<default_column_start>13</default_column_start>
					<default_column_end>24</default_column_end>
				</function>
			</functions>
		</functional_group>
		<functional_group name="Operator">
			<functions>
				<function name="+">
					<description>Inserts the plus operator to allow addition of two numbers.\r\nExample: load_sales.base + load_sales.gst</description>
					<syntax>+</syntax>
					<model>+</model>
					<default_column_start>0</default_column_start>
					<default_column_end>0</default_column_end>
				</function>
				<function name="-">
					<description>Inserts the minus operator to allow subtraction of two numbers.\r\nExample: load_sales.base - load_sales.gst</description>
					<syntax>-</syntax>
					<model>-</model>
					<default_column_start>0</default_column_start>
					<default_column_end>0</default_column_end>
				</function>
				<function name="/">
					<description>Inserts the divide operator to allow division of two numbers.\r\nExample: load_sales.base / load_sales.gst</description>
					<syntax>/</syntax>
					<model>/</model>
					<default_column_start>0</default_column_start>
					<default_column_end>0</default_column_end>
				</function>
				<function name="*">
					<description>Inserts the multiply operator to allow multiplication of two numbers.\r\nExample: load_sales.base * load_sales.gst</description>
					<syntax>*</syntax>
					<model>*</model>
					<default_column_start>0</default_column_start>
					<default_column_end>0</default_column_end>
				</function>
				<function name="||">
					<description>Inserts the concatenation operator to allow adding of two strings.\r\nExample: load_customer.first_name || '  ' || load_customer.last_name</description>
					<syntax>||</syntax>
					<model>||</model>
					<default_column_start>0</default_column_start>
					<default_column_end>0</default_column_end>
				</function>
				<function name=" ">
					<description>Inserts the space character for clarity or other purposes.</description>
					<syntax>
					</syntax>
					<model>\r\n					</model>
					<default_column_start>0</default_column_start>
					<default_column_end>0</default_column_end>
				</function>
				<function name="(">
					<description>Inserts the open bracket, used for setting precedence in result evaluation.</description>
					<syntax>(</syntax>
					<model>(</model>
					<default_column_start>0</default_column_start>
					<default_column_end>0</default_column_end>
				</function>
				<function name=")">
					<description>Inserts the close bracket, used for setting precedence in result evaluation.</description>
					<syntax>)</syntax>
					<model>)</model>
					<default_column_start>0</default_column_start>
					<default_column_end>0</default_column_end>
				</function>
			</functions>
		</functional_group>
	</functional_groups>
</database_function_set>
