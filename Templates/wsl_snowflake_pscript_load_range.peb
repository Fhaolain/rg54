{# -- TemplateVersion:002 MinVersion:8010 MaxVersion:* TargetType:Snowflake ModelType:* TemplateType:Powershell32                                           -- #}
{# --                                                                                                                                                       -- #}
{# --    c Wherescape Ltd 2018. Wherescape Ltd permits you to copy this Template solely for use with the RED software, and to modify this Template          -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : Snowflake                                                                                                                        -- #}
{# -- Platform           : Windows                                                                                                                          -- #}
{# -- Product            : Migration Express                                                                                                                -- #}
{# -- Template Name      : wsl_snowflake_pscript_load_range                                                                                                 -- #}
{# -- Template Version   : 8.2.1.0                                                                                                                          -- #}
{# -- Description        : This template creates a Snowflake script specifically                                                                            -- #}
{# --                      designed for migration express SQL Server loads                                                                                  -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{#  Notes / History                                                                                                                                         -- #}
{# -- TK 20180424 Original migration express version                                                                                                        -- #}
{# -- JL 20181011 Cloned for general use                                                                                                                    -- #}
{# -- TK 20181114 Enabled configuration of extract delimiter, enclosure and escape characters                                                               -- #}
{# --                                                                                                                                                       -- #}
{%- import "wsl_snowflake_utility" -%}
{%- set PilotTable = getExtendedProperty( propertyName = "RANGE_PILOT_TABLE" ) | trim %}
{%- set crLfReplaced = getExtendedProperty( propertyName = "RANGE_CR_LF_REPLACED" ) | trim %}
#=============================================================================={%- br %}
# DBMS Name        :    SNOWFLAKE {{table.dbType.name}}{%- br %}
# Template         :    {{settings.template.name}}{%- br %}
# Template Version :    8.2.1.0{%- br %}
# Description      :    Range Driven Data Load for {{table.name}}{%- br %}
# Generated by     :    {{env.productVersion}}{%- br %}
# Generated for    :    {{env.licensedTo}}{%- br %}
# Generated on     :    {{env.currentTimestamp}}{%- br %}
# Author           :    {{env.userName}}{%- br %}
#=============================================================================={%- br %}
# Notes / History{%- br %}
#{%- br %}
Import-module -Name WslPowershellCommon -DisableNameChecking{%br%}
Hide-Window{%br%}
$TotalRows = 0{% br %}
{%br%}
function Print-Log { {%- br %}
    try {
        $logStream.Dispose(){%- br %}
        $logReader = New-Object IO.StreamReader($fileAud){%- br %}
        {%- br %}
        while( ! $logReader.EndOfStream) { {%- br %}
            [Console]::WriteLine($logReader.ReadLine()){%- br %}
        }{%- br %}
        {%- br %}
        $logReader.Dispose(){%- br %}
        if(${env:DEBUG} -ne "TRUE" ) {
            $null = Remove-Item $fileAud
        }
    }
    catch {}
    
    try {
        $errStream.Dispose(){%- br %}
        $errReader = New-Object IO.StreamReader($fileErr){%- br %}
        {%- br %}
        while( ! $errReader.EndOfStream) { {%- br %}
            $host.ui.WriteErrorLine($errReader.ReadLine()){%- br %}
        }{%- br %}
        {%- br %}
        $errReader.Dispose(){%- br %}
        if(${env:DEBUG} -ne "TRUE" ) {
            $null = Remove-Item $fileErr
        }
    }
    catch {}
}{%- br %}
{%- br %}
$jobScript = {
    param({% br %}
        {%- if PilotTable != "" %}
        $batch,{% br %}
        {%- endif %}
        $id = 0{% br %}
    ){% br %}
    $threadAud = Join-Path -Path ${env:WSL_WORKDIR} -ChildPath "${env:WSL_LOAD_TABLE}_${env:WSL_SEQUENCE}_THREAD_${id}.aud"
    $threadErr = Join-Path -Path ${env:WSL_WORKDIR} -ChildPath "${env:WSL_LOAD_TABLE}_${env:WSL_SEQUENCE}_THREAD_${id}.err"
    $audStream = New-Object System.IO.StreamWriter($threadAud,$false)
    $audStream.AutoFlush = $true{% br %}
    $errStream = New-Object System.IO.StreamWriter($threadErr,$false)
    $errStream.AutoFlush = $true{% br %}
    {%- if PilotTable != "" %}
    $sfOdbc = New-Object System.Data.Odbc.OdbcConnection{% br %}
    $sfOdbc.ConnectionString = "DSN=${env:WSL_TGT_DSN}"
    if( ! [string]::IsNullOrEmpty(${env:WSL_TGT_USER})) { $sfOdbc.ConnectionString += ";UID=${env:WSL_TGT_USER}" }
    if( ! [string]::IsNullOrEmpty(${env:WSL_TGT_PWD})) { $sfOdbc.ConnectionString += ";PWD=${env:WSL_TGT_PWD}" }{% br %}
    
    $batchStatusSql = @"
    SELECT STATUS
    FROM ${env:WSL_LOAD_SCHEMA}.${env:PILOT_TABLE}
    WHERE BATCH_NUMBER = $($batch.batch_number)
"@
    
    $sfOdbc.Open()
    $command = New-Object System.Data.Odbc.OdbcCommand($batchStatusSql,$sfOdbc)
    $adapter = New-Object System.Data.Odbc.OdbcDataAdapter($command)
    $bst = New-Object System.Data.DataTable
    $null = $adapter.fill($bst)
    $sfOdbc.Close()
    
    if($bst.status -eq "P") {
        $audStream.WriteLine("Batch $($batch.batch_number) is in a paused state. Skipping"){% br %}
        $errStream.WriteLine("Batch $($batch.batch_number) is in a paused state. Skipping"){% br %}
        $errStream.Dispose()
        $audStream.Dispose()
        Write-Output 1
        Write-Output $threadAud
        Write-Output $threadErr
        exit
    }
    
    $audStream.WriteLine("Now loading batch: $($batch.batch_number)"){% br %}
    $errStream.WriteLine("Now loading batch: $($batch.batch_number)"){% br %}
    $batchUpdateSql = @"
      UPDATE ${env:WSL_LOAD_SCHEMA}.${env:PILOT_TABLE}
      SET STATUS = 'R'
        , THREAD_NUMBER = ${id}
        , START_EXTRACT_TIMESTAMP = CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
      WHERE BATCH_NUMBER = $($batch.batch_number)
"@
    $sfOdbc.Open()
    $command = New-Object System.Data.Odbc.OdbcCommand($batchUpdateSql,$sfOdbc)
    $null = $command.ExecuteNonQuery()
    $sfOdbc.Close()
        
    {%- endif %}

    $fileDat = "wsl${env:WSL_LOAD_TABLE}${env:WSL_SEQUENCE}{%- if PilotTable != "" %}_BATCH_$($batch.batch_number){% endif %}.dat"
    $utlCtl = Join-Path -Path ${env:WSL_WORKDIR} -ChildPath "wsl${env:WSL_LOAD_TABLE}${env:WSL_SEQUENCE}{%- if PilotTable != "" %}_BATCH_$($batch.batch_number){% endif %}.ctl"
    $utlVar = Join-Path -Path ${env:WSL_WORKDIR} -ChildPath "wsl${env:WSL_LOAD_TABLE}${env:WSL_SEQUENCE}{%- if PilotTable != "" %}_BATCH_$($batch.batch_number){% endif %}.var"
    $utlAud = Join-Path -Path ${env:WSL_WORKDIR} -ChildPath "wsl${env:WSL_LOAD_TABLE}${env:WSL_SEQUENCE}{%- if PilotTable != "" %}_BATCH_$($batch.batch_number){% endif %}.utlaud"
    $utlErr = Join-Path -Path ${env:WSL_WORKDIR} -ChildPath "wsl${env:WSL_LOAD_TABLE}${env:WSL_SEQUENCE}{%- if PilotTable != "" %}_BATCH_$($batch.batch_number){% endif %}.utlerr"

    $extractSQL = @"
SELECT {%- from table.columns as column %}
                                          {%- if not loop.first %}                                      ,{% endif %}
                                          {%- if column.datatype == "varchar" or column.datatype == "char"  %}{% endif %}
                                          {%- if column.transform | trim == "" or column.transformType.code == "A" %}
                                            {%- if column.sourceTable.name is defined and column.sourceColumn.name is defined %} {{ column.sourceTable.name }}.{{ column.sourceColumn.name }}
                                            {%- elseif column.source is defined and column.transformType.code != "A" %} {{column.source}}
                                            {%- else %} ' '
                                            {%- endif %}
                                          {%- elseif column.transformType.code != "A" %} {{ column.transform }}
                                          {%- else %} ' '
                                          {%- endif %}
                                          {%- if column.datatype == "varchar" or column.datatype == "char"  %}{% endif %}{% br %}
                                        {%- endfrom %}
                                       {%- if table.loadInfo.sourceTables != "" %}
                                 FROM ${env:WSL_SRC_SCHEMA}.{{ table.loadInfo.sourceTables }}{%- br -%}
                                       {%- endif -%}
                                       {%- from table.loadInfo.whereAndGroupByClauses | trim | lines as whereLine %}                                 {{whereLine}}{% br %}{% endfrom -%}
{%- if PilotTable != "" -%}
  $(if(($batch.min_value -ne "NULL") -and ($batch.max_value -eq "NULL")) {
        "                                 {% if table.loadInfo.whereAndGroupByClauses == "" %}WHERE{% else %}AND{% endif %} ${env:BATCH_OVERRIDE} > $($batch.min_value)"{% br %}
    }
    elseif ($batch.min_value -ne "NULL") {
        "                                 {% if table.loadInfo.whereAndGroupByClauses == "" %}WHERE{% else %}AND{% endif %} ${env:BATCH_EXPRESSION} BETWEEN $($batch.min_value) AND $($batch.max_value)"
    }
    else {
        "                                 {% if table.loadInfo.whereAndGroupByClauses == "" %}WHERE{% else %}AND{% endif %} ${env:BATCH_EXPRESSION} IS NULL"
    }){%- br -%}
{%- endif %}
"@

    if(${env:DEBUG} -eq "TRUE") {
        $errStream.WriteLine("================== EXTRACT SQL STATEMENT =================="){%- br %}
        $errStream.WriteLine($extractSQL.Replace("                                 ","")){%- br %}
        $errStream.WriteLine(""){%- br %}
    }

    $OdbcDump = Get-OdbcDumpSource
    Add-Type -TypeDefinition $OdbcDump -Language CSharp -ReferencedAssemblies "System.Data"
    $wslOdbc = New-Object WhereScape.OdbcDump
    $extractSQL = $extractSQL.Replace("                                 ","")

    $unicode = $false
    $(if (![string]::isnullorwhitespace(${env:EXTRACT_CHAR_SET})) {
        if (${env:EXTRACT_CHAR_SET}.Contains("UTF")) {
            $unicode = $true
        }
    })

    $fileFull = Join-Path -path ${env:WSL_WORKDIR} -childPath $fileDat
    #GetDataToFile(string query, string dsn, string username, string password, string dataFile, string delimiter, int fileCount, int splitThreshold, bool addQuotes, bool unicode, string enclosedBy, string escapeChar) 
    $rowCount = $wslOdbc.GetDataToFile($extractSQL,${env:WSL_SRC_DSN},${env:WSL_SRC_USER},${env:WSL_SRC_PWD},$fileFull,${env:UNLOAD_DELIM}, 0, 0, $true, $unicode, ${env:UNLOAD_ENCLOSED}, ${env:UNLOAD_ESCAPE})    
 
    {%- if PilotTable != "" %}{% br %}{% br %}
    $batchUpdateSql = @"
      UPDATE ${env:WSL_LOAD_SCHEMA}.${env:PILOT_TABLE}
      SET START_PUT_TIMESTAMP = CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
        , EXTRACT_DURATION_SECONDS = TIMESTAMPDIFF('SECOND',START_EXTRACT_TIMESTAMP,CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
      WHERE BATCH_NUMBER = $($batch.batch_number)
"@
    $sfOdbc = New-Object System.Data.Odbc.OdbcConnection{% br %}
    $sfOdbc.ConnectionString = "DSN=${env:WSL_TGT_DSN}"
    if( ! [string]::IsNullOrEmpty(${env:WSL_TGT_USER})) { $sfOdbc.ConnectionString += ";UID=${env:WSL_TGT_USER}" }
    if( ! [string]::IsNullOrEmpty(${env:WSL_TGT_PWD})) { $sfOdbc.ConnectionString += ";PWD=${env:WSL_TGT_PWD}" }{% br %}
    $sfOdbc.Open()
    $udt = New-Object System.Data.DataTable
    $command = New-Object System.Data.Odbc.OdbcCommand($batchUpdateSql,$sfOdbc)
    $null = $command.ExecuteNonQuery()
    $sfOdbc.Close(){% br %}
    {%- endif %}
    
    if(${env:UNLOAD_GZIP} -eq "TRUE") {
        try {
            $input = New-Object IO.FileStream $(Join-Path -Path ${env:WSL_WORKDIR} -ChildPath $fileDat), ([IO.FileMode]::Open), ([IO.FileAccess]::Read), ([IO.FileShare]::Read){%- br %}
            $output = New-Object IO.FileStream $(Join-Path -Path ${env:WSL_WORKDIR} -ChildPath "${fileDat}.gz"), ([IO.FileMode]::Create), ([IO.FileAccess]::Write), ([IO.FileShare]::None){%- br %}
            $gzipStream = New-Object IO.Compression.GzipStream $Output, ([IO.Compression.CompressionLevel]::Fastest){%- br %}
            $input.CopyTo($gzipStream){%- br %}
            $gzipStream.Dispose(){%- br %}
            $output.Dispose(){%- br %}
            $input.Dispose(){%- br %}
        
            if(${env:DEBUG} -ne "TRUE") {
                $null = Remove-Item $(Join-Path -Path ${env:WSL_WORKDIR} -ChildPath $fileDat)
            }
            else {
                $errStream.WriteLine("=============== DATA FILE COMPRESSION ===============")
                $errStream.WriteLine("Data file gzipped to: $(Join-Path -Path ${env:WSL_WORKDIR} -ChildPath "${fileDat}.gz")")
                $errStream.WriteLine("")
            }
            
            $fileDat = $fileDat + ".gz"
        }
        catch {
            $audStream.WriteLine($_.Exception.Message)
            $errStream.WriteLine($_.Exception.Message)
            $audStream.Dispose()
            $errStream.Dispose()
            Write-Output -2
            Write-Output $threadAud
            Write-Output $threadErr
            throw $_.Exception
            exit
        }
    }
    
    
    $sfOdbc = New-Object System.Data.Odbc.OdbcConnection{% br %}
    $sfOdbc.ConnectionString = "DSN=${env:WSL_TGT_DSN}"
    if( ! [string]::IsNullOrEmpty(${env:WSL_TGT_USER})) { $sfOdbc.ConnectionString += ";UID=${env:WSL_TGT_USER}" }
    if( ! [string]::IsNullOrEmpty(${env:WSL_TGT_PWD})) { $sfOdbc.ConnectionString += ";PWD=${env:WSL_TGT_PWD}" }{% br %}
    
    $putSQL = "PUT file://$(Join-Path -Path ${env:WSL_WORKDIR} -ChildPath $fileDat)* @~;"
    $snowsqlPut = "snowsql -q ""$putsql"" -o friendly=false -o exit_on_error=true -o remove_comments=true -o output_format=csv -o timing=false"{%- br %}
    $putRes = & $([ScriptBlock]::Create($snowsqlPut)){%- br %}
    
    if(${env:DEBUG} -eq "TRUE") {
        $errStream.WriteLine("=================== FILE UPLOAD ===================")
        $errStream.WriteLine($($putRes | Select-Object -Last 4 | Out-String))
    }
    
    $currentRetry = 0
    $lastSnowSQLCode = 0
    while(($lastexitcode -ne 0) -and ($currentRetry -lt ${env:MAX_RETRIES})) {
        $currentRetry ++
        $audStream.WriteLine("Data file upload failed, retrying. Current retries: $currentRetry. Max retries: ${env:MAX_RETRIES}"){% br %}
        $errStream.WriteLine("Data file upload failed, retrying. Current retries: $currentRetry. Max retries: ${env:MAX_RETRIES}"){% br %}
        {%- if PilotTable != "" %}
        $batchUpdateSql = @"
          UPDATE ${env:WSL_LOAD_SCHEMA}.${env:PILOT_TABLE}
          SET RETRY_COUNT = $currentRetry
          WHERE BATCH_NUMBER = $($batch.batch_number)
"@

        $sfOdbc.Open()
        $command = New-Object System.Data.Odbc.OdbcCommand($batchUpdateSql,$sfOdbc)
        $null = $command.ExecuteNonQuery()
        $sfOdbc.Close(){% br %}
        {%- endif %}
        
        $putRes = & $([ScriptBlock]::Create($snowsqlPut)){%- br %}
        $lastSnowSQLCode = $lastexitcode
        if(${env:DEBUG} -eq "TRUE") {
            $errStream.WriteLine($($putRes | Out-String))
        }
    }
    
    if($lastSnowSqlCode -ne 0) {
        $audStream.WriteLine("Data file upload failed. Retry limit exhausted. Aborting thread")
        $errStream.WriteLine("Data file upload failed. Retry limit exhausted. Aborting thread")
        $errStream.WriteLine($putSQL)
        $audStream.Dispose()
        $errStream.Dispose()
        Write-Output -2
        Write-Output $threadAud
        Write-Output $threadErr
        throw "Data file upload failed. Retry limit exhausted. Aborting thread"
        exit
    }
    
    {%- if PilotTable != "" %}{% br %}{% br %}
    $batchUpdateSql = @"
      UPDATE ${env:WSL_LOAD_SCHEMA}.${env:PILOT_TABLE}
      SET START_LOAD_TIMESTAMP = CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
        , PUT_DURATION_SECONDS = TIMESTAMPDIFF('SECOND',START_PUT_TIMESTAMP,CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
      WHERE BATCH_NUMBER = $($batch.batch_number)
"@
    $sfOdbc = New-Object System.Data.Odbc.OdbcConnection{% br %}
    $sfOdbc.ConnectionString = "DSN=${env:WSL_TGT_DSN}"
    if( ! [string]::IsNullOrEmpty(${env:WSL_TGT_USER})) { $sfOdbc.ConnectionString += ";UID=${env:WSL_TGT_USER}" }
    if( ! [string]::IsNullOrEmpty(${env:WSL_TGT_PWD})) { $sfOdbc.ConnectionString += ";PWD=${env:WSL_TGT_PWD}" }{% br %}
    $sfOdbc.Open()
    $udt = New-Object System.Data.DataTable
    $command = New-Object System.Data.Odbc.OdbcCommand($batchUpdateSql,$sfOdbc)
    $null = $command.ExecuteNonQuery()
    $sfOdbc.Close(){% br %}
    {%- endif %}
    
    $PURGE = "TRUE"
    if(${env:DEBUG} -eq "TRUE") {
        $PURGE = "FALSE"
    }
    
    {%- set crLfList = crLfReplaced.split(",") %}

    $copyStmt = @"
    COPY INTO ${env:WSL_LOAD_FULLNAME}{% br %}
    FROM ({%- br %}{% set csvPos = 0 %}
      SELECT {% for col in table.columns %}
               {%- if not loop.first %}           , {% endif %}
               {%- if crLfList contains col.name %}REPLACE(REPLACE({%- endif %}
               {%- if col.transformType.code == "A" %}{{ col.source }}
               {%- else %}
                 {%- set csvPos = csvPos + 1 %}t.`${{ csvPos }}
               {%- endif %}
               {%- if crLfList contains col.name %},'~~0A~~',CHAR(10)),'~~0D~~',CHAR(13)){%- endif %}
               {%- br %}
             {%- endfor %}
      FROM @~/wsl${env:WSL_LOAD_TABLE}${env:WSL_SEQUENCE}{%- if PilotTable != "" %}_BATCH_$($batch.batch_number){% endif %}.dat t{%- br %}
    ){% br %}
    PATTERN = '.*'{%- br %}
    FILE_FORMAT = ${env:FILE_FORMAT}{% br %}
    PURGE = $PURGE{% br %}
    {%- if table.loadInfo.fileLoaderOptions != "" %}    {{ table.loadInfo.fileLoaderOptions }}{%- br %}
    {%- endif %}
"@{%- br %}

    if(${env:DEBUG} -eq "TRUE") {
        $errStream.WriteLine("=================== IMPORT SQL ===================")
        $errStream.WriteLine($copyStmt)
        $errStream.WriteLine("")
    }
    
    try {
        $sfOdbc.Open(){% br %}
        $copyCmd = New-Object System.Data.Odbc.OdbcCommand($copyStmt,$sfOdbc)
        $copyCmd.CommandTimeout = 0
        $CopyResult = New-Object Data.DataTable{%- br %}
        $null = (New-Object Data.odbc.odbcDataAdapter($copyCmd)).fill($CopyResult){%- br %}
        $sfOdbc.Close(){%- br %}
    }
    catch {
        $audStream.WriteLine($_.Exception.Message)
        $errStream.WriteLine($_.Exception.Message)
        if(${env:DEBUG} -ne "TRUE") {
            $errStream.WriteLine("=================== IMPORT SQL ===================")
            $errStream.WriteLine($copyStmt)
            $errStream.WriteLine("")
        }
        $audStream.Dispose()
        $errStream.Dispose()
        try { $sfOdbc.Dispose() } catch {}
        Write-Output -2
        Write-Output $threadAud
        Write-Output $threadErr
        throw $_.Exception
    }
    
    if(($CopyResult.errors_seen | Measure-Object -Sum).Sum -eq 0) { {%- br %}
        $RowsLoaded = ($CopyResult.rows_loaded | Measure-Object -Sum).Sum{%- br %}
        $errStream.WriteLine($(($CopyResult | Where { $_.file -ne "" } | Format-Table -Property file,status,rows_loaded -AutoSize | Out-String) -replace '(?m)^\s*\r?\n',''))
        $errStream.WriteLine("$RowsLoaded rows loaded.")
        $audStream.WriteLine("$RowsLoaded rows loaded.")
        $errStream.WriteLine("")
    }{%- br %}
    else { {%- br %}
        $errStream.WriteLine($(($CopyResult | Format-Table -Property file,status,rows_loaded -AutoSize | Out-String) -replace '(?m)^\s*\r?\n',''))
        $errStream.Dispose()
        $audStream.Dispose()
        $RowsLoaded = ($CopyResult.rows_loaded | Measure-Object -Sum).Sum{%- br %}
        Write-Output -1
        Write-Output $threadAud
        Write-Output $threadErr
        Write-Output $RowsLoaded
        exit{%- br %}
    }{%- br %}
    {%- if PilotTable != "" %}
    $batchUpdateSql = @"
      UPDATE ${env:WSL_LOAD_SCHEMA}.${env:PILOT_TABLE}
      SET STATUS = 'C'
        , END_TIMESTAMP = CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
        , LOADED_ROWS = $RowsLoaded
        , LOAD_DURATION_SECONDS = TIMESTAMPDIFF('SECOND',START_LOAD_TIMESTAMP,CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
        , TOTAL_DURATION_SECONDS = TIMESTAMPDIFF('SECOND',START_EXTRACT_TIMESTAMP,CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
        , ROWS_VALIDATED = CASE WHEN ROW_COUNTER = -1 THEN 'X' WHEN ROW_COUNTER = $RowsLoaded THEN 'Y' ELSE 'N' END
      WHERE BATCH_NUMBER = $($batch.batch_number)
"@
    $sfOdbc = New-Object System.Data.Odbc.OdbcConnection{% br %}
    $sfOdbc.ConnectionString = "DSN=${env:WSL_TGT_DSN}"
    if( ! [string]::IsNullOrEmpty(${env:WSL_TGT_USER})) { $sfOdbc.ConnectionString += ";UID=${env:WSL_TGT_USER}" }
    if( ! [string]::IsNullOrEmpty(${env:WSL_TGT_PWD})) { $sfOdbc.ConnectionString += ";PWD=${env:WSL_TGT_PWD}" }{% br %}
    $sfOdbc.Open()
    $udt = New-Object System.Data.DataTable
    $command = New-Object System.Data.Odbc.OdbcCommand($batchUpdateSql,$sfOdbc)
    $null = $command.ExecuteNonQuery()
    $sfOdbc.Close(){% br %}
    {%- endif %}
    if(${env:DEBUG} -ne "TRUE") {
        try { $null = Remove-Item $(Join-Path -Path ${env:WSL_WORKDIR} -ChildPath $fileDat) } catch {}
    }
    $errStream.Dispose()
    $audStream.Dispose()    
    Write-Output 1
    Write-Output $threadAud
    Write-Output $threadErr
    Write-Output $RowsLoaded
}

function MAIN { {%- br %}
    # Get extended property values{%- br %}
    ${env:DEBUG}             = Get-ExtendedProperty -PropertyName "SF_DEBUG_MODE" -TableName ${env:WSL_LOAD_TABLE}
    ${env:SNOWSQL_ACCOUNT}   = Get-ExtendedProperty "SF_SNOWSQL_ACCOUNT" -TableName ${env:WSL_LOAD_TABLE}{%- br %}
    ${env:SNOWSQL_WAREHOUSE} = Get-ExtendedProperty "SF_SNOWSQL_WAREHOUSE" -TableName ${env:WSL_LOAD_TABLE}{%- br %}
    ${env:SNOWSQL_DATABASE}  = Get-ExtendedProperty "SF_SNOWSQL_DATABASE" -TableName ${env:WSL_LOAD_TABLE}{%- br %}
    ${env:SNOWSQL_USER}      = ${env:WSL_TGT_USER}
    ${env:SNOWSQL_PWD}       = ${env:WSL_TGT_PWD}
    ${env:FILE_FORMAT}       = Get-ExtendedProperty -PropertyName "SF_FILE_FORMAT" -TableName ${env:WSL_LOAD_TABLE}
    ${env:UNLOAD_GZIP}       = @($(Get-ExtendedProperty -PropertyName "SF_SEND_FILES_ZIPPED" -TableName ${env:WSL_LOAD_TABLE}), "FALSE" -ne "")[0]{% br %}
    {%- from table.extendedPropertyValuesByName as entry where entry.key == "RANGE_BATCH_EXPRESSION" %}    ${env:BATCH_EXPRESSION}  = "{{entry.value}}" {%- br %}{%- endfrom %}
    {%- from table.extendedPropertyValuesByName as entry where entry.key == "RANGE_BATCH_INCREMENTAL_OVERRIDE" %}    ${env:BATCH_OVERRIDE}    = "{{entry.value}}" {%- br %}{%- endfrom %}
    ${env:PILOT_TABLE}       = Get-ExtendedProperty -PropertyName "RANGE_PILOT_TABLE" -TableName ${env:WSL_LOAD_TABLE}
    ${env:UNLOAD_DELIM}      = @($(Get-ExtendedProperty -PropertyName "SF_UNLOAD_DELIMITER" -TableName ${env:WSL_LOAD_TABLE}), "|" -ne "")[0]{% br %}
    ${env:UNLOAD_ENCLOSED}   = @($(Get-ExtendedProperty -PropertyName "SF_UNLOAD_ENCLOSED_BY" -TableName ${env:WSL_LOAD_TABLE}), "`"" -ne "")[0]{% br %}
    ${env:UNLOAD_ESCAPE}     = @($(Get-ExtendedProperty -PropertyName "SF_UNLOAD_ESCAPE_CHAR" -TableName ${env:WSL_LOAD_TABLE}), "#" -ne "")[0]{% br %}
    ${env:MAX_RETRIES}       = @($(Get-ExtendedProperty -PropertyName "RANGE_UPLOAD_MAX_RETRIES" -TableName ${env:WSL_LOAD_TABLE}), "2" -ne "")[0]{% br %}
    $THREAD_COUNT            = @($(Get-ExtendedProperty -PropertyName "RANGE_THREAD_COUNT" -TableName ${env:WSL_LOAD_TABLE}), "8" -ne "")[0]{% br %}
    $THREAD_ERRORS           = @($(Get-ExtendedProperty -PropertyName "RANGE_MAX_THREAD_FAILURES" -TableName ${env:WSL_LOAD_TABLE}), "0" -ne "")[0]{% br %}
    $THREAD_FAIL_ACTION      = @($(Get-ExtendedProperty -PropertyName "RANGE_FAIL_ON_THREAD_FAILURE" -TableName ${env:WSL_LOAD_TABLE}), "FALSE" -ne "")[0]{% br %}
    ${env:EXTRACT_CHAR_SET}  = @($(Get-ExtendedProperty -PropertyName "RANGE_EXTRACT_CHARSET" -TableName ${env:WSL_LOAD_TABLE}))[0]{% br %}
    ${env:MAX_ROW_LENGTH}    = @($(Get-ExtendedProperty -PropertyName "RANGE_MAX_ROW_LENGTH" -TableName ${env:WSL_LOAD_TABLE}), "10000" -ne "")[0]{% br %}
    $CR_LF_REPLACED          = "{{crLfReplaced}}"
    
    {%- br %}
    if(${env:DEBUG} -eq "TRUE") { {%- br %}
        $errStream.WriteLine("=================== LOAD OPTIONS ==================="){%- br %}
        $errStream.WriteLine("Specified Load Table:             " + ${env:WSL_LOAD_TABLE}){%- br %}
        $errStream.WriteLine("Specified Work Dir:               " + ${env:WSL_WORKDIR}){%- br %}
        $errStream.WriteLine("Specified Sequence:               " + ${env:WSL_SEQUENCE}){%- br %}
        $errStream.WriteLine("Specified Metadata ODBC DSN:      " + ${env:WSL_META_DSN}){%- br %}
        $errStream.WriteLine("Specified Metadata Username:      " + ${env:WSL_META_USER}){%- br %}
        $errStream.WriteLine("Specified Metadata Password:      " + (New-Object string ('*', ${env:WSL_META_PWD}.Length))){%- br %}
        $errStream.WriteLine(""){%- br %}
        $errStream.WriteLine("=================== SOURCE TABLE INFO ==================="){%- br %}
        $errStream.WriteLine("Source Schema:                    " + ${env:WSL_SRC_SCHEMA}){%- br %}
        $errStream.WriteLine("Source Tables:                    " + "{{ table.loadInfo.sourceTables }}"){%- br %}
        $errStream.WriteLine("Source Where:                     " + "{{ table.loadInfo.whereAndGroupByClauses.Replace("\"","\"\"") }}"){%- br %}
        $errStream.WriteLine(""){%- br %}
        $errStream.WriteLine("=================== SOURCE DB INFO ==================="){%- br %}
        $errStream.WriteLine("ODBC Source DSN:                  " + ${env:WSL_SRC_DSN}){%- br %}
        $errStream.WriteLine("ODBC Source Username:             " + ${env:WSL_SRC_USER}){%- br %}
        $errStream.WriteLine("ODBC Source Password:             " + (New-Object string ('*', ${env:WSL_SRC_PWD}.Length))){%- br %}
        $errStream.WriteLine(""){%- br %}
        $errStream.WriteLine("=================== EXTENDED PROPERTIES ==================="){%- br %}
        $errStream.WriteLine("SF_DEBUG_MODE:                    " + ${env:DEBUG}){%- br %}
        $errStream.WriteLine("SF_SNOWSQL_ACCOUNT:               " + ${env:SNOWSQL_ACCOUNT}){%- br %}
        $errStream.WriteLine("SF_SNOWSQL_WAREHOUSE:             " + ${env:SNOWSQL_WAREHOUSE}){%- br %}
        $errStream.WriteLine("SF_SNOWSQL_DATABASE:              " + ${env:SNOWSQL_DATABASE}){%- br %}
        $errStream.WriteLine("SF_FILE_FORMAT:                   " + ${env:FILE_FORMAT}){%- br %}
        $errStream.WriteLine("SF_SEND_FILES_ZIPPED:             " + ${env:UNLOAD_GZIP}){%- br %}
        $errStream.WriteLine("SF_UNLOAD_DELIMITER:              " + ${env:UNLOAD_DELIM}){%- br %}
        $errStream.WriteLine("SF_UNLOAD_ENCLOSED_BY:            " + ${env:UNLOAD_ENCLOSED}){%- br %}
        $errStream.WriteLine("SF_UNLOAD_ESCAPE_CHAR:            " + ${env:UNLOAD_ESCAPE}){%- br %}
        $errStream.WriteLine("RANGE_BATCH_EXPRESSION:           " + ${env:BATCH_EXPRESSION}){%- br %}
        $errStream.WriteLine("RANGE_BATCH_INCREMENTAL_OVERRIDE: " + ${env:BATCH_OVERRIDE}){%- br %}
        $errStream.WriteLine("RANGE_PILOT_TABLE:                " + ${env:PILOT_TABLE}){%- br %}
        $errStream.WriteLine("RANGE_THREAD_COUNT:               " + $THREAD_COUNT){%- br %}
        $errStream.WriteLine("RANGE_MAX_THREAD_FAILURES:        " + $THREAD_ERRORS){%- br %}
        $errStream.WriteLine("RANGE_UPLOAD_MAX_RETRIES:         " + ${env:MAX_RETRIES}){%- br %}
        $errStream.WriteLine("RANGE_EXTRACT_CHARSET:            " + ${env:EXTRACT_CHAR_SET}){%- br %}
        $errStream.WriteLine("RANGE_MAX_ROW_LENGTH:             " + ${env:MAX_ROW_LENGTH}){%- br %}
        $errStream.WriteLine("RANGE_CR_LF_REPLACED:             " + $CR_LF_REPLACED){%- br %}
        $errStream.WriteLine(""){%- br %}
    }{%- br %}
    {%- br %}
    $sfOdbc = New-Object System.Data.Odbc.OdbcConnection{% br %}
    $sfOdbc.ConnectionString = "DSN=${env:WSL_TGT_DSN}"
    if( ! [string]::IsNullOrEmpty(${env:WSL_TGT_USER})) { $sfOdbc.ConnectionString += ";UID=${env:WSL_TGT_USER}" }
    if( ! [string]::IsNullOrEmpty(${env:WSL_TGT_PWD})) { $sfOdbc.ConnectionString += ";PWD=${env:WSL_TGT_PWD}" }{% br %}
    {%- if PilotTable != "" %}
    $batchListSql = @"
      SELECT batch_number
           , min_value
           , max_value
      FROM ${env:WSL_LOAD_SCHEMA}.${env:PILOT_TABLE}
      WHERE status IN ('N','R')
      ORDER BY batch_number
"@
    try {
        $sfOdbc.Open()
        $command = New-Object System.Data.Odbc.OdbcCommand($batchListSql,$sfOdbc)
        $adapter = New-Object System.Data.Odbc.OdbcDataAdapter($command)
        $bdt = New-Object System.Data.DataTable
        $null = $adapter.fill($bdt)
        $sfOdbc.Close()
    }
    catch {
        $logStream.WriteLine($_.Exception.Message)
        $logStream.WriteLine("Load failed. Failed to access range table"){%- br %}
        [Console]::WriteLine("-2"){%- br %}
        [Console]::WriteLine("Load failed. Failed to access range table"){%- br %}
        Print-Log
        exit
    }
    
    if($bdt.Rows.Count -eq 0) {
        $logStream.WriteLine("Batch table is empty or all batches are marked as complete")
        [Console]::WriteLine("-1"){%- br %}
        [Console]::WriteLine("Batch table is empty or all batches are marked as complete"){%- br %}
        Print-Log
        exit
    }
    
    if(($bdt.batch_number | Get-Unique).Count -ne $bdt.Rows.Count) {
        $logStream.WriteLine("Range table contains duplicate batch numbers.")
        [Console]::WriteLine("-2"){%- br %}
        [Console]::WriteLine("Range table contains duplicate batch numbers."){%- br %}
        Print-Log
        exit
    }
    
    $id = 0
    foreach($batch in $bdt) { {% br %}
        $id++
        while($true) {
            if((Get-Job -State 'Failed').Count -gt $THREAD_ERRORS) {
                $THREAD_FAIL_ACTION = "TRUE"
                break
            }
            elseif((Get-Job -State 'Running').Count -lt $THREAD_COUNT) {
                $job = Start-Job -ScriptBlock $jobScript -Arg @($batch, $id)
                break
            }
            else {
                Start-Sleep -Seconds 10
            }
        }
        if((Get-Job -State 'Failed').Count -gt $THREAD_ERRORS) {
            $THREAD_FAIL_ACTION = "TRUE"
            break
        }
    }{% br %}
    {%- else %}
    $job = Start-Job -ScriptBlock $jobScript{% br %}
    {%- endif %}
    $jobs = Get-Job | Wait-Job
    $retCode = 1
    foreach($j in $jobs) {
        $jobRes = $j | Receive-Job
        $jobStatus = $jobRes[0]
        $jobAud = $jobRes[1]
        $jobErr = $jobRes[2]
        
        $audReader = New-Object System.IO.StreamReader($jobAud)
        while( ! $audReader.EndOfStream) { {%- br %}
            $logStream.WriteLine($audReader.ReadLine()){%- br %}
        }{%- br %}
        $audReader.Close()
        
        $errReader = New-Object System.IO.StreamReader($jobErr)
        while( ! $errReader.EndOfStream) { {%- br %}
            $errStream.WriteLine($errReader.ReadLine()){%- br %}
        }{%- br %}
        $errReader.Close()

        if($jobStatus -gt -2) {
            $jobRows = $jobRes[3]
            $TotalRows += $jobRows
            if(${env:DEBUG} -ne "TRUE") {
                $null = Remove-Item $jobAud
                $null = Remove-Item $jobErr
            }
        }
        else {
            $logStream.WriteLine("Thread failure: $jobAud"){% br %}
            {%- if PilotTable != "" %}
            if($THREAD_FAIL_ACTION -eq "TRUE") { {% br %}
                $retCode = -2 {% br %}
            } {% br %}
            else { {% br %}
                $retCode = -1 {% br %}
            } {% br %}
            {%- else %}
            $retCode = -2 {% br %}
            {%- endif %}
        }
    }{% br %}
    {%- if PilotTable != "" %}
    $batchUpdateSql = @"
      UPDATE ${env:WSL_LOAD_SCHEMA}.${env:PILOT_TABLE}
      SET STATUS = 'N'
      WHERE STATUS = 'R'
"@
    $sfOdbc = New-Object System.Data.Odbc.OdbcConnection{% br %}
    $sfOdbc.ConnectionString = "DSN=${env:WSL_TGT_DSN}"
    if( ! [string]::IsNullOrEmpty(${env:WSL_TGT_USER})) { $sfOdbc.ConnectionString += ";UID=${env:WSL_TGT_USER}" }
    if( ! [string]::IsNullOrEmpty(${env:WSL_TGT_PWD})) { $sfOdbc.ConnectionString += ";PWD=${env:WSL_TGT_PWD}" }{% br %}
    $sfOdbc.Open()
    $udt = New-Object System.Data.DataTable
    $command = New-Object System.Data.Odbc.OdbcCommand($batchUpdateSql,$sfOdbc)
    $null = $command.ExecuteNonQuery()
    $sfOdbc.Close(){% br %}
    {%- endif %}
    # Update metadata row counts
    try {
        $null = WsWrkTask -Inserted $TotalRows
    }
    catch {
        $logStream.WriteLine("Call to WsWrkTask failed")
        $logStream.WriteLine($_.Exception.Message)
    }
    if($retCode -eq 1) {
        $logStream.WriteLine("Load successful. Total of $TotalRows rows loaded"){%- br %}
        [Console]::WriteLine("$retCode"){%- br %}
        [Console]::WriteLine("Load successful. Total of $TotalRows rows loaded"){%- br %}
    }
    elseif($retCode -eq -1) {
        $logStream.WriteLine("Load completed with warnings. Total of $TotalRows rows loaded"){%- br %}
        [Console]::WriteLine("$retCode"){%- br %}
        [Console]::WriteLine("Load completed with warnings. Total of $TotalRows rows loaded"){%- br %}
    }
    else {
        $logStream.WriteLine("Load failed. Total of $TotalRows rows loaded"){%- br %}
        [Console]::WriteLine("$retCode"){%- br %}
        [Console]::WriteLine("Load failed. Total of $TotalRows rows loaded"){%- br %}    
    }
}{%- br %}
{%- br %}
try { {%- br %}
    $fileAud = Join-Path -Path ${env:WSL_WORKDIR} -ChildPath "${env:WSL_LOAD_TABLE}_${env:WSL_SEQUENCE}.aud"{%- br %}
    $fileErr = Join-Path -Path ${env:WSL_WORKDIR} -ChildPath "${env:WSL_LOAD_TABLE}_${env:WSL_SEQUENCE}.err"{%- br %}
    $logStream = New-Object IO.StreamWriter($fileAud,$false){%- br %}
    $logStream.AutoFlush = $true{%- br %}
    $errStream = New-Object IO.StreamWriter($fileErr,$false){%- br %}
    $errStream.AutoFlush = $true{%- br %}
    {%- br %}
    MAIN{%- br %}
    {%- br %}
}{%- br %}
catch { {%- br %}
    $logStream.WriteLine($_.Exception.Message){%- br %}
    $logStream.WriteLine($_.InvocationInfo.PositionMessage){%- br %}
    [Console]::WriteLine("-2"){%- br %}
    [Console]::WriteLine("Load failed"){%- br %}
}{%- br %}
finally {
    Print-Log
}
