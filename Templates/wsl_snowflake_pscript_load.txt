{#                                                                                                                                                          -- #}
{# --    Â© Wherescape Ltd 2017. Wherescape Ltd permits you to copy this Template solely for use with the RED software, and to modify this Template          -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : Snowflake                                                                                                                        -- #}
{# -- Template Name      : wsl_snowflake_pscript_load                                                                                                       -- #}
{# -- Template Version   : 8.0.1.0                                                                                                                          -- #}
{# -- Description        : This template creates a Snowflake script specifically                                                                            -- #}
{# --                      specifically designed for all RED load tables                                                                                    -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{#  Notes / History                                                                                                                                         -- #}
{# -- TK: Powershell release V1 (2017-05-17)                                                                                                                -- #}
{# -- TK: Powershell release V2 (2017-08-03)  Metadata service now used for extended properties fields                                                      -- #}
{# -- TK: Powershell release V3 (2017-08-23)  File splitting added                                                                                          -- #}
{# -- TK: Powershell release V4 (2017-09-19)  Extended COPY statement use to automatically apply RED after load transforms during the COPY.                 -- #}
{# -- TK: Powershell release V5 (2018-02-08)  Powershell ODBC function replaced with compiled class to drastically improve load speeds.                     -- #}
{# -- TK: Powershell release V6 (2018-05-14)  Fixed support for non CSV delimited files and removed unneccessary file copy when loading files from windows  -- #}
{# -- TK: Powershell release V7 (2018-06-27)  Enabled file loads from external stages and stageless loads from azure blob storage                           -- #}
{# --                                                                                                                                                       -- #}
{%- set dssRecordSrc = "DSS_RECORD_SOURCE" -%}
#=============================================================================={%- br %}
# DBMS Name        :    SNOWFLAKE {{table.dbType.name}}{%- br %}
# Template         :    {{settings.template.name}}{%- br %}
# Template Version :    8.0.1.0{%- br %}
# Description      :    Load {{table.name}}{%- br %}
# Generated by     :    {{env.productVersion}}{%- br %}
# Generated for    :    {{env.licensedTo}}{%- br %}
# Generated on     :    {{env.currentTimestamp}}{%- br %}
# Author           :    {{env.userName}}{%- br %}
#=============================================================================={%- br %}
# Notes / History{%- br %}
#{%- br %}
Import-module -Name WslPowershellCommon -DisableNameChecking{%br%}
Hide-Window{%br%}
{%br%}
function Print-Log { {%- br %}
    $logStream.Dispose(){%- br %}
    $logReader = New-Object IO.StreamReader($fileAud){%- br %}
    {%- br %}
    while( ! $logReader.EndOfStream) { {%- br %}
        [Console]::WriteLine($logReader.ReadLine()){%- br %}
    }{%- br %}
    {%- br %}
    $logReader.Dispose(){%- br %}
}{%- br %}
{%- br %}
Function Replace-WslTags($stuff) { {%- br %}
    {%- br %}
    if([string]::IsNullOrWhitespace($stuff)) { {%- br %}
        return $stuff{%- br %}
    }{%- br %}
    {%- br %}
    if($stuff.Contains('$SEQUENCE$')) { {%- br %}
        $stuff = $stuff.Replace('$SEQUENCE$',${env:WSL_SEQUENCE}){%- br %}
    }{%- br %}
    {%- br %}
    if([regex]::IsMatch($stuff,'\$.+\$')) { {%- br %}
        # If $stuff contains two or more $s and the $SEQUENCE$ string is not detected
        # or has already been replaced then we assume a date
        while([regex]::IsMatch($stuff,'\$.+\$')) { {%- br %}
            $startPos = $stuff.IndexOf('$'){%- br %}
            {%- br %}
            $work = $stuff.SubString($startPos + 1){%- br %}
            $endPos = $work.IndexOf('$'){%- br %}
            {%- br %}
            $suppliedFormat = $work.SubString(0, $endPos){%- br %}
            $dateFormat = $suppliedFormat.Replace('YY','yy').Replace('DD','dd').Replace('HH','hh').Replace('MI','mm').Replace('SS','ss'){%- br %}
            $dateString = (Get-Date -f $dateFormat){%- br %}
            $replaceString = '$' + $suppliedFormat + '$'{%- br %}
            {%- br %}
            $stuff = $stuff.Replace($replaceString,$dateString){%- br %}
        }{%- br %}
    }{%- br %}
    {%- br %}
    if($stuff.indexOf('$') -ne -1) { {%- br %}
        ${env:warn} = $true{%- br %}
        $logStream.WriteLine("Unclosed '$' tag in '$stuff'"){%- br %}
        $logStream.WriteLine("Unclosed '$' will be removed"){%- br %}
        $stuff = $stuff.Replace('$',''){%- br %}
    }{%- br %}
    return $stuff.Trim(){%- br %}
}{%- br %}
{%- br %}
{% if (table.loadInfo.archiveFile.path != "") or (table.loadInfo.archiveFile.name != "") and (table.loadInfo.sourceConnectionType.name == "Windows") %}
# File archiving function for windows file loads
function Archive-Files { {%- br %}
    param ({%- br %}
        [array]$files{%- br %}
    ){%- br %}
    $ArchivePath = @"{%- br %}
{{ table.loadInfo.archiveFile.path }}{%- br %}
"@{%- br %}
    $ArchiveName = @"
{{ table.loadInfo.archiveFile.name }}{%- br %}
"@{%- br %}
    {%- br %}
    if(($runMode -ne "S3") -and ($runmode -ne "AZ")) { {%- br %}
        if([string]::IsNullOrWhitespace($ArchivePath)) { {%- br %}
            $ArchivePath = (gci $files[0]).Directory.FullName{%- br %}
        }{%- br %}
        {%- br %}
        if( ! $ArchivePath.EndsWith('\')) { {%- br %}
            $ArchivePath += "\"{%- br %}
        }{%- br %}
        {%- br %}
        if ($files.Count -gt 1) { {%- br %}
            if(! [string]::IsNullOrWhitespace($ArchivePath)) { {%- br %}
                if( ! [string]::IsNullOrWhitespace($ArchiveName)) { {%- br %}
                    ${env:warn} = $true{%- br %}
                    $logStream.WriteLine("Files will be moved but not renamed"){%- br %}
                    $logStream.WriteLine("Renaming is not supported for multi file loads"){%- br %}
                }{%- br %}
                {%- br %}
                $dir = Replace-WslTags(${ArchivePath}){%- br %}
                foreach($file in $files) { {%- br %}
                    try { {%- br %}
                        if( ! (Test-Path -Path $dir)) { {%- br %}
                            $null = New-Item -ItemType Directory -Path $dir{%- br %}
                        }{%- br %}
                        Move-Item $file $dir -ErrorAction Stop{%- br %}
                        $logStream.WriteLine("$file moved to $dir"){%- br %}
                    }{%- br %}
                    catch { {%- br %}
                        ${env:warn} = $true
                        $logStream.WriteLine("Failed to move " + $file + " to " + $dir){%- br %}
                        $logStream.WriteLine($_.Exception.Message){%- br %}
                        $logStream.WriteLine($_.InvocationInfo.PositionMessage){%- br %}
                    }{%- br %}
                }{%- br %}
            }{%- br %}
            else { {%- br %}
                if( ! [string]::IsNullOrWhitespace($ArchiveName)) { {%- br %}
                    ${env:warn} = $true{%- br %}
                    $logStream.WriteLine("Only moving (not renaming) is supported for multi file loads"){%- br %}
                }{%- br %}
            }{%- br %}
        }{%- br %}
        else { {%- br %}
            try { {%- br %}
                $dir = Replace-WslTags(${ArchivePath}){%- br %}
                $fil = Replace-WslTags(${ArchiveName}){%- br %}
                $path = $dir + $fil
                if( ! (Test-Path -Path $dir)) {
                    $null = New-Item -ItemType Directory -Path $dir
                }
                Move-Item $files[0] $path -ErrorAction Stop{%- br %}
                $logStream.WriteLine("Source file moved to " + $path){%- br %}
            }{%- br %}
            catch { {%- br %}
                ${env:warn} = $true{%- br %}
                $logStream.WriteLine("Failed to move " + $files[0] + " to " + ${path}){%- br %}
                $logStream.WriteLine($_.Exception.Message){%- br %}
                $logStream.WriteLine($_.InvocationInfo.PositionMessage){%- br %}
                {%- br %}
            }{%- br %}
        }{%- br %}
    }{%- br %}
}{%- br %}
{%- br %}
{%- endif %}
Function Gzip-File { {%- br %}
    param({%- br %}
        [string]$inFile = $(throw "No input file specified"),{%- br %}
        [string]$outFile = $inFile + ".gz",{%- br %}
        [switch]$removeOriginal = $false{%- br %}
    ){%- br %}
    {%- br %}
    $input = New-Object IO.FileStream $InFile, ([IO.FileMode]::Open), ([IO.FileAccess]::Read), ([IO.FileShare]::Read){%- br %}
    $output = New-Object IO.FileStream $OutFile, ([IO.FileMode]::Create), ([IO.FileAccess]::Write), ([IO.FileShare]::None){%- br %}
    $gzipStream = New-Object IO.Compression.GzipStream $Output, ([IO.Compression.CompressionLevel]::Fastest){%- br %}
    {%- br %}
    $input.CopyTo($gzipStream){%- br %}
    {%- br %}
    $gzipStream.Dispose(){%- br %}
    $output.Dispose(){%- br %}
    $input.Dispose(){%- br %}
    {%- br %}
    if($removeOriginal) { {%- br %}
        Remove-Item -Path $inFile{%- br %}
    }{%- br %}
    {%- br %}
    return (gci $outFile).FullName{%- br %}
}{%- br %}
{%- br %}
# Get Extended Properties{%- br %}
function Get-ExtendedProperty { {%- br %}
    param({%- br %}
        $propertyName{%- br %}
    ){%- br %}
    $repo = New-Object WslMetadataServiceClient.Repo(${env:WSL_META_DSN},$metaDbType,${env:WSL_META_USER},${env:WSL_META_PWD},"dbo."){%- br %}
    $root = $repo.objectsByName{%- br %}
    $value = $root[${env:WSL_LOAD_TABLE}].extendedPropertyValuesByName[$propertyName].GetValue(){%- br %}
    if([string]::IsNullOrEmpty($value)) { {%- br %}
        $value = $root[${env:WSL_LOAD_TABLE}].loadInfo.sourceConnection.extendedPropertyValuesByName[$propertyName].GetValue(){%- br %}
    }{%- br %}
    if([string]::IsNullOrEmpty($value)) { {%- br %}
        $value = $root[${env:WSL_LOAD_TABLE}].target.connection.extendedPropertyValuesByName[$propertyName].GetValue(){%- br %}
    }{%- br %}
    $repo.Dispose(){%- br %}
    return , $value{%- br %}
}{%- br %}
function Load-Data { {%- br %}
    # Get extended property values{%- br %}
    ${env:DEBUG}              = Get-ExtendedProperty "SF_DEBUG_MODE"{%- br %}
    ${env:ACCESS_KEY}         = Get-ExtendedProperty "SF_ACCESS_KEY"{%- br %}
    ${env:SECRET_KEY}         = Get-ExtendedProperty "SF_SECRET_KEY"{%- br %}
    ${env:SEND_FILES_ZIPPED}  = Get-ExtendedProperty "SF_SEND_FILES_ZIPPED"{%- br %}
    ${env:FILE_FORMAT}        = Get-ExtendedProperty "SF_FILE_FORMAT"{%- br %}
    ${env:SNOWSQL_ACCOUNT}    = Get-ExtendedProperty "SF_SNOWSQL_ACCOUNT"{%- br %}
    ${env:SNOWSQL_DATABASE}   = Get-ExtendedProperty "SF_SNOWSQL_DATABASE"{%- br %}
    ${env:SNOWSQL_SCHEMA}     = Get-ExtendedProperty "SF_SNOWSQL_SCHEMA"{%- br %}
    ${env:SNOWSQL_WAREHOUSE}  = Get-ExtendedProperty "SF_SNOWSQL_WAREHOUSE"{%- br %}
    ${env:UNICODE_SUPPORT}    = Get-ExtendedProperty "SF_UNICODE_SUPPORT"{%- br %}
    ${env:SPLIT_THRESHOLD}    = Get-ExtendedProperty "SF_SPLIT_THRESHOLD"{%- br %}
    ${env:FILE_COUNT}         = Get-ExtendedProperty "SF_SPLIT_COUNT"{%- br %}
    ${env:TIMEZONE}           = Get-ExtendedProperty "SF_TIMEZONE"{%- br %}
    ${env:FILE_TYPE}          = @($(Get-ExtendedProperty "SF_FILE_TYPE"), "CSV" -ne $null){%- br %}
    ${env:EXTERNAL_STAGE}     = Get-ExtendedProperty "SF_EXTERNAL_STAGE"{%- br %}
    ${env:AZ_SAS_TOKEN}       = Get-ExtendedProperty "SF_AZURE_SAS_TOKEN"{%- br %}
    ${env:AZ_ENCRYPTION_TYPE} = Get-ExtendedProperty "SF_AZURE_ENCRYPTION_TYPE"{%- br %}
    ${env:AZ_ENCRYPTION_KEY}  = Get-ExtendedProperty "SF_AZURE_ENCRYPTION_KEY"{%- br %}
    {%- br %}
    if(${env:UNICODE_SUPPORT} -ne "TRUE") { {%- br %}
        ${env:UNICODE_SUPPORT} = "FALSE"{%- br %}
    }{%- br %}
    if(${env:SEND_FILES_ZIPPED} -ne "TRUE") { {%- br %}
        ${env:SEND_FILES_ZIPPED} = "FALSE"{%- br %}
    }{%- br %}
    if(${env:FILE_COUNT} -lt 1) { {%- br %}
        ${env:FILE_COUNT} = 1{%- br %}
    }{%- br %}
    {%- br %}
    ${env:SNOWSQL_USER} = ${env:WSL_TGT_USER}{%- br %}
    ${env:SNOWSQL_PWD}  = ${env:WSL_TGT_PWD}{%- br %}
    {%- br %}
    if(${env:DEBUG} -eq "TRUE") { {%- br %}
        $logStream.WriteLine("=================== LOAD OPTIONS ==================="){%- br %}
        $logStream.WriteLine("Specified Load Table:        " + ${env:WSL_LOAD_TABLE}){%- br %}
        $logStream.WriteLine("Specified Work Dir:          " + ${env:WSL_WORKDIR}){%- br %}
        $logStream.WriteLine("Specified Sequence:          " + ${env:WSL_SEQUENCE}){%- br %}
        $logStream.WriteLine("Specified Metadata ODBC DSN: " + ${env:WSL_META_DSN}){%- br %}
        $logStream.WriteLine("Specified Metadata Username: " + ${env:WSL_META_USER}){%- br %}
        $logStream.WriteLine("Specified Metadata Password: " + (New-Object string ('*', ${env:WSL_META_PWD}.Length))){%- br %}
        $logStream.WriteLine(""){%- br %}
        if($runMode -eq 'S3') {
            $logStream.WriteLine("=================== CONNECTION OPTIONS ==================="){%- br %}
            $logStream.WriteLine("Access Key:                  " + (New-Object string ('*', ${env:ACCESS_KEY}.Length))){%- br %}
            $logStream.WriteLine("Secret Key:                  " + (New-Object string ('*', ${env:SECRET_KEY}.Length))){%- br %}
            $logStream.WriteLine(""){%- br %}
        }
        elseif($runmode -eq "AZ") {
            $logStream.WriteLine("=================== CONNECTION OPTIONS ==================="){%- br %}
            $logStream.WriteLine("SAS Token:                          " + (New-Object string ('*', ${env:AZ_SAS_TOKEN}.Length))){%- br %}
            $logStream.WriteLine("Encryption Method:                  " + ${env:AZ_ENCRYPTION_TYPE}){%- br %}
            $logStream.WriteLine("Encryption Key:                     " + (New-Object string ('*', ${env:AZ_ENCRYPTION_KEY}.Length))){%- br %}
            $logStream.WriteLine(""){%- br %}
        }
        $logStream.WriteLine("=================== MODES ==================="){%- br %}
        $logStream.WriteLine("Specified Debug Mode:        " + ${env:DEBUG}){%- br %}
        $logStream.WriteLine("Specified Run Mode:          " + $runMode){%- br %}
        $logStream.WriteLine("Unicode Extract:             " + ${env:UNICODE_SUPPORT}){%- br %}
        $logStream.WriteLine(""){%- br %}
        if($runMode -eq 'Database') {
            $logStream.WriteLine("=================== SOURCE TABLE INFO ==================="){%- br %}
            $logStream.WriteLine("Source Schema:               " + ${env:WSL_SRC_SCHEMA}){%- br %}
            $logStream.WriteLine("Source Tables:               " + @"
{{ table.loadInfo.sourceTables }}{%- br %}
"@){%- br %}
            $logStream.WriteLine("Source Where:                " + @"
{{ table.loadInfo.whereAndGroupByClauses }}{%- br %}
"@){%- br %}
            $logStream.WriteLine(""){%- br %}
            $logStream.WriteLine("=================== SOURCE DB INFO ==================="){%- br %}
            $logStream.WriteLine("ODBC Source DSN:             " + ${env:WSL_SRC_DSN}){%- br %}
            $logStream.WriteLine("ODBC Source Username:        " + ${env:WSL_SRC_USER}){%- br %}
            $logStream.WriteLine("ODBC Source Password:        " + (New-Object string ('*', ${env:WSL_SRC_PWD}.Length))){%- br %}
            $logStream.WriteLine(""){%- br %}
        }
    }{%- br %}
    {%- br %}
    {% if (table.loadInfo.sourceConnectionType.name == "ODBC") or (table.loadInfo.sourceConnectionType.name == "Database") -%}
    $filePath = ${env:WSL_WORKDIR}
    $fileDat = "wsl${env:WSL_LOAD_TABLE}${env:WSL_SEQUENCE}"
    {%- br %}
    $logStream.WriteLine("================= EXTRACT SQL ====================="){%- br %}
    {% set empty = "" %}
    $extractSql = @"
    SELECT
      {%- from table.columns as column where (column.sourceColumn is defined or column.transformType.code == "D") %}
        {%- if not loop.first %}    , {% else %} {% endif %}
        {%- if column.transformType.code != "A" %}
          {{- column.source }}
        {%- else %}
          {%- if column.sourceTable is defined %}
            {%- fetch column.sourceTable %}
            {{- column.sourceTable.name }}.
          {%- endif %}
          {%- if column.sourceColumn is defined %}
            {{- column.sourceColumn.name }}
          {%- endif %}
        {%- endif %}
        {%- br %}
      {%- endfrom %}
    FROM ${env:WSL_SRC_SCHEMA}.{{ table.loadInfo.sourceTables }} {{table.loadInfo.sourceTables }}{%- br %}
    {%- from table.loadInfo.whereAndGroupByClauses | lines as whereLine %}
    {{ whereLine }}{% br %}
    {%- endfrom %}
"@{%- br %}
    {%- br %}
    $logStream.WriteLine($extractSql){%- br %}
    $logStream.WriteLine(""){%- br %}
    {%- br %}
    if(${env:DEBUG} -eq "TRUE") { {%- br %}
        $logStream.WriteLine("BEGIN create of data file from source system: $(Get-Date)"){%- br %}
    }{%- br %}
    $unicode = $false
    if( ${env:UNICODE_SUPPORT} -eq "TRUE") {
        $unicode = $true
    }
    $OdbcDump = Get-OdbcDumpSource
    Add-Type -TypeDefinition $OdbcDump -Language CSharp -ReferencedAssemblies "System.Data"
    $wslOdbc = New-Object WhereScape.OdbcDump
    #GetDataToFile(string query, string dsn, string username, string password, string dataFile, string delimiter, int fileCount, int splitThreshold, bool addQuotes, bool unicode)
    $rowCount = $wslOdbc.GetDataToFile($extractSql,${env:WSL_SRC_DSN},${env:WSL_SRC_USER},${env:WSL_SRC_PWD},"${filePath}${fileDat}","|", ${env:FILE_COUNT}, ${env:SPLIT_THRESHOLD}, $false, $unicode){%- br %}
    if(${env:DEBUG} -eq "TRUE") { {%- br %}
        $logStream.WriteLine("END create of data file from source system: $(Get-Date)"){%- br %}
    }{%- br %}
    if($rowCount -lt 1) { {%- br %}
        $logStream.WriteLine("Source query returned 0 rows"){%- br %}
        [Console]::WriteLine("1"){%- br %}
        [Console]::WriteLine("Source query returned 0 rows"){%- br %}
        Print-Log{%- br %}
        exit{%- br %}
    }{%- br %}
    [array]$dataFiles = (Get-ChildItem "${filePath}${fileDat}*").FullName{%- br %}
    {%- else %}
    $fileDat = @"
{{ table.loadInfo.sourceFile.name }}{%- br %}
"@
    if($runMode -eq "Windows") { {%- br %}
        $filePath = "{{ table.loadInfo.sourceFile.path }}"{%- br %}
        try { {%- br %}    
            [array]$dataFiles = (Get-ChildItem (Join-Path -Path $filePath -ChildPath $fileDat) -ErrorAction Stop ).FullName{%- br %}
            if($dataFiles.Length -eq 0) { {%- br %}
                [Console]::WriteLine("-2"){%- br %}
                [Console]::WriteLine("No files found matching $(Join-Path -Path $filePath -ChildPath $fileDat)"){%- br %}
                $logStream.WriteLine("No files found matching $(Join-Path -Path $filePath -ChildPath $fileDat)"){%- br %}
                Print-Log{%- br %}
                exit{%- br %}
            }{%- br %}
        }{%- br %}
        catch { {%- br %}
            [Console]::WriteLine("-2"){%- br %}
            [Console]::WriteLine("No files found matching $(Join-Path -Path $filePath -ChildPath $fileDat)"){%- br %}
            $logStream.WriteLine("No files found matching $(Join-Path -Path $filePath -ChildPath $fileDat)"){%- br %}
            Print-Log{%- br %}
            exit{%- br %}
        }{%- br %}
        $rowCount = 0 {%- br %}
        foreach ($sourceFile in $dataFiles) { {%- br %}
            $lineCounter = [IO.File]::OpenText($sourceFile){%- br %}
            while ($lineCounter.ReadLine() -ne $null) { {%- br %}
                $rowCount ++{%- br %}
            }{%- br %}
            if($fileHeader -eq "true") { {%- br %}
                $rowCount --{%- br %}
            }{%- br %}
            $lineCounter.Dispose()
        }{%- br %}
    }{%- br %}
    else { {%- br %}
        $filePath = $s3Prefix{%- br %}
        if( ! $filePath.endsWith('/')) { {%- br %}
            $filePath += '/'{%- br %}
        }{%- br %}
    }{%- br %}
    {%- endif %}
    if(($runMode -ne "S3") -and ($runmode -ne "AZ")) {
        $sourcePath = $filePath
        for($x = 0; $x -lt $dataFiles.Count; $x++) {
            $originalName = $dataFiles[$x]
            if(${env:SEND_FILES_ZIPPED} -eq "TRUE") { {% br %}
                {%- if table.loadInfo.sourceConnectionType.name == "Windows" %}
                $noPath = ($dataFiles[$x]).Replace($sourcePath, "")
                $newName = Join-Path -Path ${env:WSL_WORKDIR} -ChildPath $($noPath + ".gz"){% br %}
                {%- endif %}
                $dataFiles[$x] = Gzip-File -inFile $originalName{% if table.loadInfo.sourceConnectionType.name != "Windows" %} -RemoveOriginal{% else %} -OutFile $newName{% endif %}{% br %}
                {%- if table.loadInfo.sourceConnectionType.name == "Windows" %}
                $filePath = ${env:WSL_WORKDIR}{% br %}
                {%- endif %}
                $logStream.WriteLine("File '$originalName' GZipped to '$newName' prior to upload")
            }
        }
    }{%- br %}
    $logStream.WriteLine("================= LOAD ================="){%- br %}
    $sfOdbc = New-Object System.Data.Odbc.OdbcConnection
    $sfOdbc.ConnectionString = "DSN=${env:WSL_TGT_DSN}"
    if( ! [string]::IsNullOrEmpty(${env:WSL_TGT_USER})) { $sfOdbc.ConnectionString += ";UID=${env:WSL_TGT_USER}" }
    if( ! [string]::IsNullOrEmpty(${env:WSL_TGT_PWD})) { $sfOdbc.ConnectionString += ";PWD=${env:WSL_TGT_PWD}" }
    $sfOdbc.Open()
    if((($runMode -ne "S3") -and ($runmode -ne "AZ")) -or ( ! [string]::IsNullOrEmpty(${env:EXTERNAL_STAGE}))) { {%- br %}
        if(($runMode -ne "S3") -and ($runmode -ne "AZ")) {
            $remSQL = "remove @~/WSL${env:WSL_SEQUENCE}*;"
            $null = (New-Object System.Data.Odbc.OdbcCommand($remSQL,$sfOdbc)).ExecuteNonQuery()
            $putSQL = "PUT file://${filePath}${fileDat}{% if table.loadInfo.sourceConnectionType.name != "Windows" %}*{%- endif %} @~/WSL${env:WSL_SEQUENCE};"
            $snowsqlPut = "snowsql -q ""$putsql"" -o friendly=false  -o remove_comments=true -o output_format=csv -o timing=false"{%- br %}
            if(${env:DEBUG} -eq "TRUE") { {%- br %}
                $logStream.WriteLine("BEGIN PUT of files matching ${env:WSL_WORKDIR}${fileDat} : $(Get-Date)"){%- br %}
            }{%- br %}
            $logStream.WriteLine("PUT:"){%- br %}
            $logStream.WriteLine($putSQL)
            $logStream.WriteLine("")
            $putRes = & $([ScriptBlock]::Create($snowsqlPut)){%- br %}
            if(${env:DEBUG} -eq "TRUE") { {%- br %}
                $logStream.WriteLine("END PUT of files matching ${env:WSL_WORKDIR}${fileDat} : $(Get-Date)"){%- br %}
            }{%- br %}
        }{% br %}
        {%- set noindent = "" %}
        if( ! [string]::IsNullOrEmpty(${env:TIMEZONE})) {
            $tzStmt = "ALTER SESSION SET TIMEZONE = '${env:TIMEZONE}';`r`n"
            $logStream.WriteLine("SET TIMEZONE:")
            $logStream.WriteLine($tzStmt)
            $tzCmd = New-Object System.Data.Odbc.OdbcCommand($tzStmt,$sfOdbc)
            $null = $tzCmd.ExecuteNonQuery()
        }
        if(${env:FILE_TYPE} -eq "CSV") {
            $copyStmt = @"
            COPY INTO ${env:WSL_LOAD_FULLNAME}{% br %}
            ( {{ noindent }}
              {%- for col in table.columns %}
                {%- if not loop.first %}
            , {{ noindent }}
                {%- endif %}
            {{- noindent }}{{ col.name }}{%- br %}
              {%- endfor %}
            ){%- br %}
            FROM ({%- br %}{% set csvPos = 0 %}
              SELECT {% for col in table.columns %}
                {%- if not loop.first %}                   , {% endif %}
                {%- if (table.loadInfo.sourceConnectionType.name == "Windows") and (col.name == dssRecordSrc ) %}METADATA`$FILENAME
                {%- elseif col.transformType.code == "A" %}{{ col.source }}
                {%- else %}
                  {%- if table.loadInfo.sourceConnectionType.name == "Windows" %}{%- fetch col.sourceColumn -%}t.`${{ (col.sourceColumn.name).Replace("COL","") }}
                  {%- else %}{% set csvPos = csvPos + 1 %}t.`${{ csvPos }}
                  {%- endif %}
                {%- endif %}{% br %}
              {%- endfor %}
              FROM $(if ( [string]::IsNullOrWhiteSpace(${env:EXTERNAL_STAGE})) { "@~/WSL${env:WSL_SEQUENCE} t" }
                     else { "@${env:EXTERNAL_STAGE}/${fileDat} t" })
            ){%- br %}
            FILE_FORMAT = '${env:FILE_FORMAT}'{%- br %}
            {%- if table.loadInfo.fileLoaderOptions != "" %}
            {{ table.loadInfo.fileLoaderOptions }}{%- br %}
            {%- endif %}
"@{%- br %}
        }
        else {
            $copyStmt = @"
            COPY INTO ${env:WSL_LOAD_FULLNAME}
            FROM @~/WSL${env:WSL_SEQUENCE}
            FILE_FORMAT = '${env:FILE_FORMAT}'{%- br %}
            {%- if table.loadInfo.fileLoaderOptions != "" %}
            {{ table.loadInfo.fileLoaderOptions }}{%- br %}
            {%- endif %}
"@
        }
        $maskedLoad = $copyStmt{%- br %}
        {%- br %}
        $logStream.WriteLine("COPY:"){%- br %}
        $logStream.WriteLine($maskedLoad)
        if(${env:DEBUG} -eq "TRUE") { {%- br %}
            $logStream.WriteLine("BEGIN COPY INTO '${env:WSL_LOAD_FULLNAME}' : $(Get-Date)"){%- br %}
        }{%- br %}
        $copyCmd = New-Object System.Data.Odbc.OdbcCommand($copyStmt,$sfOdbc)
        $copyCmd.CommandTimeout = 0
        $loadRes = New-Object Data.DataTable{%- br %}
        $null = (New-Object Data.odbc.odbcDataAdapter($copyCmd)).fill($loadRes){%- br %}
        if(${env:DEBUG} -eq "TRUE") { {%- br %}
            $logStream.WriteLine("END COPY INTO '${env:WSL_LOAD_FULLNAME}' : $(Get-Date)"){%- br %}
        }{%- br %}
        if(($loadRes.errors_seen | Measure-Object -Sum).Sum -eq 0) { {%- br %}
            $rowsLoaded = ($loadRes.rows_loaded | Measure-Object -Sum).Sum{%- br %}
            $logStream.WriteLine(($loadRes | Format-Table -Property file,status,rows_parsed,rows_loaded -AutoSize | Out-String))
            $logStream.WriteLine("$rowsLoaded rows loaded.")
            try {
                $null = WsWrkTask -Inserted $rowsLoaded
            } catch { $logStream.WriteLine("Failed to update task row count"); $logStream.WriteLine($_.Exception.InnerException.Message)}
            [Console]::WriteLine("1"){%- br %}
            [Console]::WriteLine("Load successful. $rowsLoaded rows loaded"){%- br %}
            if(${env:DEBUG} -eq "FALSE") { {%- br %}
                {%- if table.loadInfo.sourceConnectionType.name != "Windows" %}
                foreach($file in $dataFiles) { {%- br %}
                    Remove-Item $file{%- br %}
                }{%- br %}
                {%- else %}
                if(${env:SEND_FILES_ZIPPED} -eq "TRUE") {
                    foreach($file in $dataFiles) { {%- br %}
                        Remove-Item $file{%- br %}
                    }{%- br %}
                }{% br %}
                {%- endif %}
                $null = (New-Object System.Data.Odbc.OdbcCommand($remSQL,$sfOdbc)).ExecuteNonQuery()
            }{%- br %}
            else { {%- br %}
                $logStream.WriteLine("Temporary data files not removed as debug mode is enabled"){%- br %}
            }{%- br %}
        }{%- br %}
        else { {%- br %}
            $logStream.WriteLine(($loadRes | Format-Table -Property file,status,rows_parsed,rows_loaded -AutoSize | Out-String))
            [Console]::WriteLine("-2"){%- br %}
            [Console]::WriteLine("Load failed"){%- br %}
            Print-Log{%- br %}
            exit{%- br %}
        }{%- br %}
        $sfOdbc.Close(){%- br %}
        {%- if (table.loadInfo.archiveFile.path != "") or (table.loadInfo.archiveFile.name != "") and (table.loadInfo.sourceConnectionType.name == "Windows") %}
        Archive-Files $sourceFiles{%- br %}
        {%- endif %}
    }{%- br %}
    elseif($runmode -eq "S3") { {%- br %}
        {%- set noindent = "" %}
            if( ! [string]::IsNullOrEmpty(${env:TIMEZONE})) {
                $tzStmt = "ALTER SESSION SET TIMEZONE = '${env:TIMEZONE}';`r`n"
                $logStream.WriteLine("SET TIMEZONE:")
                $logStream.WriteLine($tzStmt)
                $tzCmd = New-Object System.Data.Odbc.OdbcCommand($tzStmt,$sfOdbc)
                $null = $tzCmd.ExecuteNonQuery()
            }
            $copyStmt = @"
            COPY INTO ${env:WSL_LOAD_FULLNAME}{% br %}
            FROM ${filePath}${fileDat}{%- br %}
            CREDENTIALS = (AWS_KEY_ID='${env:ACCESS_KEY}' AWS_SECRET_KEY='${env:SECRET_KEY}'){%- br %}
            FILE_FORMAT = '${env:FILE_FORMAT}'{%- br %}
            {%- if table.loadInfo.fileLoaderOptions != "" %}
            {{ table.loadInfo.fileLoaderOptions }}{%- br %}
            {%- endif %}
"@{%- br %}
            $maskedLoad = $copyStmt{%- br %}
            if( ! [string]::IsNullOrWhiteSpace(${env:ACCESS_KEY})) { {%- br %}
                $maskedLoad = $maskedLoad.Replace(${env:ACCESS_KEY},(New-Object String ('*', ${env:ACCESS_KEY}.Length))){%- br %}
            }{%- br %}
            if( ! [string]::IsNullOrWhiteSpace(${env:SECRET_KEY})) { {%- br %}
                $maskedLoad = $maskedLoad.Replace(${env:SECRET_KEY},(New-Object String ('*', ${env:SECRET_KEY}.Length))){%- br %}
            }{%- br %}
            {%- br %}
            $logStream.WriteLine("COPY:"){%- br %}
            $logStream.WriteLine($maskedLoad)
            $logStream.WriteLine("")
            if(${env:DEBUG} -eq "TRUE") { {%- br %}
                $logStream.WriteLine("BEGIN COPY INTO '${env:WSL_LOAD_FULLNAME}' : $(Get-Date)"){%- br %}
            }{%- br %}
            $copyCmd = New-Object System.Data.Odbc.OdbcCommand($copyStmt,$sfOdbc)
            $copyCmd.CommandTimeout = 0
            $loadRes = New-Object Data.DataTable{%- br %}
            $null = (New-Object Data.odbc.odbcDataAdapter($copyCmd)).fill($loadRes){%- br %}
            if(${env:DEBUG} -eq "TRUE") { {%- br %}
                $logStream.WriteLine("END COPY INTO '${env:WSL_LOAD_FULLNAME}' : $(Get-Date)"){%- br %}
            }{%- br %}
            if(($loadRes.errors_seen | Measure-Object -Sum).Sum -eq 0) { {%- br %}
                $rowsLoaded = ($loadRes.rows_loaded | Measure-Object -Sum).Sum{%- br %}
                $logStream.WriteLine(($loadRes | Where { $_.file -ne "" } | Format-Table -Property file,status,rows_parsed,rows_loaded -AutoSize | Out-String))
                $logStream.WriteLine("$rowsLoaded rows loaded.")
                try {
                    $null = WsWrkTask -Inserted $rowsLoaded
                } catch { $logStream.WriteLine("Failed to update task row count"); $logStream.WriteLine($_.Exception.InnerException.Message)}
                [Console]::WriteLine("1"){%- br %}
                [Console]::WriteLine("Load successful. $rowsLoaded rows loaded"){%- br %}
            }{%- br %}
            else { {%- br %}
                $logStream.WriteLine(($loadRes | Format-Table -Property file,status,rows_parsed,rows_loaded -AutoSize | Out-String))
                [Console]::WriteLine("-2"){%- br %}
                [Console]::WriteLine("Load failed"){%- br %}
                Print-Log{%- br %}
                exit{%- br %}
            }{%- br %}
            $sfOdbc.Close(){%- br %}
        }{%- br %}
        else {
            {%- set noindent = "" %}
            if( ! [string]::IsNullOrEmpty(${env:TIMEZONE})) {
                $tzStmt = "ALTER SESSION SET TIMEZONE = '${env:TIMEZONE}';`r`n"
                $logStream.WriteLine("SET TIMEZONE:")
                $logStream.WriteLine($tzStmt)
                $tzCmd = New-Object System.Data.Odbc.OdbcCommand($tzStmt,$sfOdbc)
                $null = $tzCmd.ExecuteNonQuery()
            }
            $copyStmt = @"
            COPY INTO ${env:WSL_LOAD_FULLNAME}{% br %}
            FROM ${filePath}${fileDat}{%- br %}
            CREDENTIALS = (AZURE_SAS_TOKEN='${env:AZ_SAS_TOKEN}'){%- br %}
            $(if( ! [string]::IsNullOrWhiteSpace(${env:AZ_ENCRYPTION_TYPE})) { "ENCRYPTION = (TYPE='${env:AZ_ENCRYPTION_TYPE}' MASTER_KEY='${env:AZ_ENCRYPTION_KEY}')" })
            FILE_FORMAT = '${env:FILE_FORMAT}'{%- br %}
            {%- if table.loadInfo.fileLoaderOptions != "" %}
            {{ table.loadInfo.fileLoaderOptions }}{%- br %}
            {%- endif %}
"@{%- br %}
            $maskedLoad = $copyStmt{%- br %}
            if( ! [string]::IsNullOrWhiteSpace(${env:AZ_SAS_TOKEN})) {
                $maskedLoad = $maskedLoad.Replace(${env:AZ_SAS_TOKEN},(New-Object String ('*', ${env:AZ_SAS_TOKEN}.Length)))
            }
            if( ! [string]::IsNullOrWhiteSpace(${env:AZ_ENCRYPTION_KEY})) {
                $maskedLoad = $maskedLoad.Replace(${env:AZ_ENCRYPTION_KEY},(New-Object String ('*', ${env:AZ_ENCRYPTION_KEY}.Length)))
            }{%- br %}
            {%- br %}
            $logStream.WriteLine("COPY:"){%- br %}
            $logStream.WriteLine($maskedLoad)
            $logStream.WriteLine("")
            if(${env:DEBUG} -eq "TRUE") { {%- br %}
                $logStream.WriteLine("BEGIN COPY INTO '${env:WSL_LOAD_FULLNAME}' : $(Get-Date)"){%- br %}
            }{%- br %}
            $copyCmd = New-Object System.Data.Odbc.OdbcCommand($copyStmt,$sfOdbc)
            $copyCmd.CommandTimeout = 0
            $loadRes = New-Object Data.DataTable{%- br %}
            $null = (New-Object Data.odbc.odbcDataAdapter($copyCmd)).fill($loadRes){%- br %}
            if(${env:DEBUG} -eq "TRUE") { {%- br %}
                $logStream.WriteLine("END COPY INTO '${env:WSL_LOAD_FULLNAME}' : $(Get-Date)"){%- br %}
            }{%- br %}
            if(($loadRes.errors_seen | Measure-Object -Sum).Sum -eq 0) { {%- br %}
                $rowsLoaded = ($loadRes.rows_loaded | Measure-Object -Sum).Sum{%- br %}
                $logStream.WriteLine(($loadRes | Where { $_.file -ne "" } | Format-Table -Property file,status,rows_parsed,rows_loaded -AutoSize | Out-String))
                $logStream.WriteLine("$rowsLoaded rows loaded.")
                try {
                    $null = WsWrkTask -Inserted $rowsLoaded
                } catch { $logStream.WriteLine("Failed to update task row count"); $logStream.WriteLine($_.Exception.InnerException.Message)}
                [Console]::WriteLine("1"){%- br %}
                [Console]::WriteLine("Load successful. $rowsLoaded rows loaded"){%- br %}
            }{%- br %}
            else { {%- br %}
                $logStream.WriteLine(($loadRes | Format-Table -Property file,status,rows_parsed,rows_loaded -AutoSize | Out-String))
                [Console]::WriteLine("-2"){%- br %}
                [Console]::WriteLine("Load failed"){%- br %}
                Print-Log{%- br %}
                exit{%- br %}
            }{%- br %}
            $sfOdbc.Close(){%- br %}
    }
}{%- br %}
{%- br %}
try { {%- br %}
    $fileAud = Join-Path -Path ${env:WSL_WORKDIR} -ChildPath "${env:WSL_LOAD_TABLE}_${env:WSL_SEQUENCE}.txt"{%- br %}
    $logStream = New-Object IO.StreamWriter($FileAud,$false){%- br %}
    $logStream.AutoFlush = $true{%- br %}
    {%- br %}
    Add-Type -Path $(Join-Path -Path ${env:WSL_BINDIR} -ChildPath 'WslMetadataServiceClient.dll'){%- br %}
    $metaDbType = [WslMetadataServiceClient.MetaDatabaseType]::SqlServer{%- br %}
    if( ! ${env:WSL_WORKDIR}.EndsWith('\')) { {%- br %}
        ${env:WSL_WORKDIR} += '\'{%- br %}
    }{%- br %}
    {% if (table.loadInfo.sourceConnectionType.name == "ODBC") or (table.loadInfo.sourceConnectionType.name == "Database") -%}
    $runMode = "Database"{%- br %}
    {%- else -%}
    # Metadata DSN, Meta DB Type enum, Metadata User, Metadata Password, Metadata schema{%- br %}
    $repo = New-Object WslMetadataServiceClient.Repo(${env:WSL_META_DSN},$metaDbType,${env:WSL_META_USER},${env:WSL_META_PWD},"dbo."){%- br %}
    $root = $repo.objectsByName{%- br %}
    $s3Prefix = $root[${env:WSL_LOAD_TABLE}].loadInfo.sourceConnection.extendedPropertyValuesByName["SF_S3_BUCKET_PREFIX"].GetValue(){%- br %}
    $repo.Dispose(){%- br %}
    if([string]::IsNullOrWhiteSpace($s3Prefix)) { {%- br %}
        $runMode = "Windows"{% br %}
    }{%- br %}
    elseif($s3Prefix.StartsWith("s3://")) { {%- br %}
        $runMode = "S3"{%- br %}
    }{%- br %}
    else {
        $runMode = "AZ"
    }
    {%- endif %}
    ${env:warn} = $false{%- br %}
    {%- br %}
    Load-Data{%- br %}
    {%- br %}
    Print-Log{%- br %}
}{%- br %}
catch { {%- br %}
    try { {%- br %}
        $repo.Dispose(){%- br %}
    }{%- br %}
    catch {}{%- br %}
    [Console]::WriteLine("-2"){%- br %}
    [Console]::WriteLine("Load failed"){%- br %}
    $logStream.WriteLine($_.Exception.Message){%- br %}
    $logStream.WriteLine($_.InvocationInfo.PositionMessage){%- br %}
    Print-Log{%- br %}
}{%- br %}
