{# -- TemplateVersion:003 MinVersion:8510 MaxVersion:* TargetType:Snowflake ModelType:DATAVAULT TemplateType:Utility                                        -- #}
{# --                                                                                                                                                       -- #}
{# --    (c) WhereScape Inc 2020. WhereScape Inc permits you to copy this Template solely for use with the RED software, and to modify this Template        -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : SNOWFLAKE                                                                                                                        -- #}
{# -- Template Name      : wsl_snowflake_utility_dv                                                                                                         -- #}
{# -- RED Version        : 8.5.1.0                                                                                                                          -- #}
{# -- Description        : Generic macros that can be used to define specific templates for Snowflake data vaults                                           -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{# -- Notes / History                                                                                                                                       -- #}
{# -- JL: Snowflake Release 1.0.0 (2017-06-06)                                                                                                              -- #}
{# -- PM: Macro changed for added for batch by column                                                                                                       -- #}
{# -- PM: Macro added for Multi-Active Satellite                                                                                                            -- #}

{# -- This macro adds hub hash key calculations                                   -- #}
{% macro addHubHashKey(hashColumn, indentStr = "               ") %}
{#=====================================================================================#}
  {%- set hashFunctionPatBeg  = "CAST(MD5("                                        -%}
  {%- set hashFunctionPatEnd  = ") AS CHAR(32))"                                   -%}
  {%- set hashColTransPattern = "NVL(CAST([SRCCOL] AS VARCHAR),'null')"            -%}
  {%- set hashConcatPattern   = " ||'||'||"                                        -%}
{#=====================================================================================#}
  {%- for hashSource in hashColumn.hashKeySources -%}
    {%- if loop.first -%}
      {{- hashFunctionPatBeg -}}{%br%}
    {%- endif -%}
    {{indentStr}}{{- hashColTransPattern.replace("[SRCCOL]",hashSource.source) -}}
    {%- if not loop.last -%}
      {{- hashConcatPattern -}}{%br%}
    {%- else -%}
      {%br%}{{indentStr}}{{- hashFunctionPatEnd -}}
    {%- endif -%}
  {%- endfor -%}
{% endmacro %}

{# -- This macro adds link hash key calculations                                  -- #}
{% macro addLinkHashKey(hashColumn, indentStr = "               ") %}
{#=====================================================================================#}
  {%- set hashFunctionPatBeg  = "CAST(MD5("                                        -%}
  {%- set hashFunctionPatEnd  = ") AS CHAR(32))"                                   -%}
  {%- set hashColTransPattern = "NVL(CAST([SRCCOL] AS VARCHAR),'null')"            -%}
  {%- set hashConcatPattern   = " ||'||'||"                                        -%}
{#=====================================================================================#}
  {%- for hashSource in hashColumn.hashKeySources -%}
    {%- if loop.first -%}
      {{- hashFunctionPatBeg -}}{%br%}
    {%- endif -%}
    {{indentStr}}{{- hashColTransPattern.replace("[SRCCOL]",hashSource.source) -}}
    {%- if not loop.last -%}
      {{- hashConcatPattern -}}{%br%}
    {%- else -%}
      {%br%}{{indentStr}}{{- hashFunctionPatEnd -}}
    {%- endif -%}
  {%- endfor -%}
{% endmacro %}

{# -- This macro adds change hash key calculations                                 -- #}
{% macro addChangeHashKey(hashColumn, indentStr = "               ") %}
{#=====================================================================================#}
  {%- set hashFunctionPatBeg  = "CAST(MD5("                                        -%}
  {%- set hashFunctionPatEnd  = ") AS CHAR(32))"                                   -%}
  {%- set hashColTransPattern = "NVL(CAST([SRCCOL] AS VARCHAR),'null')"            -%}
  {%- set hashConcatPattern   = " ||'||'||"                                        -%}
{#=====================================================================================#}
  {%- for hashSource in hashColumn.hashKeySources -%}
    {%- if loop.first -%}
      {{- hashFunctionPatBeg -}}{%br%}
    {%- endif -%}
    {{indentStr}}{{- hashColTransPattern.replace("[SRCCOL]",hashSource.source) -}}
    {%- if not loop.last -%}
      {{- hashConcatPattern -}}{%br%}
    {%- else -%}
      {%br%}{{indentStr}}{{- hashFunctionPatEnd -}}
    {%- endif -%}
  {%- endfor -%}
{% endmacro %}

{# -- This macro adds the target columns and dss columns of the destination table-- #}
{% macro addSetInsertTargetColumns(indentString = "  ") %}
  {%- for column in table.columns %}
    {%- set sTargetColumn = column.name -%}
    {%- if loop.first -%}
      {{indentString}}( {{sTargetColumn}}
    {%- else -%}
      {{indentString}}, {{sTargetColumn}}
    {%- endif -%}
    {%- if loop.last -%}
      ){%br%}
    {%- else -%}
      {%br%}
    {%- endif -%}
  {%- endfor %}
{% endmacro %}

	{# -- This macro adds the initial select from incoming_rows for Multi-Active Sequence Satellites that require Sequence Key generation-- #}
{% macro addSetInsertColumnsMultiActiveSequenceSatellite(indentString = "  ") %}
  {%- for column in table.columns %}
    {%- if not loop.first -%}{{indentString}}   , {% endif %}
    {%- if column.dssVersion -%}
		coalesce(current_rows.{{column.name}},0) + 1
    {%- else -%}
		incoming_rows.{{column.name}}
    {%- endif %} AS {{column.name}} {%br%}
  {%- endfor %}
{% endmacro %}

{# --This macro adds the distinct keyword if configured -- #}
{% macro distinct(indentString = "  ") %}
{%- if table.sourceJoinDetails.distinct -%} DISTINCT{{indentString}} {%- endif -%}
{% endmacro %}

{# -- This macro adds the source columns and dss columns for stage objects -- #}
{% macro addSetInsertColumns(indentString = "       ") %}
  {%- for column in table.columns %}
    {%- if not loop.first -%}{{indentString}}, {% endif %}
    {%- if column.transform | trim != "" -%}
      {{column.transform | trim }}
    {%- elseif column.hubHashKey -%}
      {{- addHubHashKey(hashColumn = column) -}}
    {%- elseif column.linkHashKey -%}
      {{- addLinkHashKey(hashColumn = column) -}}
    {%- elseif column.changeHashKey -%}
      {{- addChangeHashKey(hashColumn = column) -}}
    {%- elseif column.updateTime or column.createTime -%}
      CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
    {%- else -%}
      {{- column.source -}}
    {%- endif %} AS {{column.name}} {%br%}
  {%- endfor %}
{% endmacro %}

{# -- This macro adds the source columns and dss columns for perm objects -- #}
{% macro addSetInsertColumnsPerm(indentString = "       ") %}
  {%- for column in table.columns %}
    {%- if not loop.first -%}{{indentString}}, {% endif %}
    {%- if column.transform | trim != "" -%}
      {{column.transform | trim }}
    {%- elseif column.dssVersion -%}
      NVL(current_rows.{{column.name}},0) + 1
    {%- elseif column.updateTime or column.createTime -%}
      CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
    {%- elseif column.dssStartDate -%}
      {{settings.changeDetectionStartNew}}
    {%- else -%}
      {{- column.source -}}
    {%- endif %} AS {{column.name}} {%br%}
  {%- endfor %}
{% endmacro %}

{# -- This macro inserts the where not exists query for a hub -- #}
{% macro addHubWhereNotExists(indent="        ") %}
{%- if (table.sourceJoinDetails.where | trim != "" or settings.batchProcessingField != "")%}
AND NOT EXISTS ( {%br%}
{%- else %}
WHERE NOT EXISTS ({%br%}
{%- endif %}
{{indent}}SELECT 1{%br%}
{{indent}}FROM   [TABLEOWNER].[{{table.name}}] {{table.name}}{%br%}
{%- from table.columns as column where column.hubHashKey and column.artificial %}
  {%- set outerLoop = loop %}
  {%- for businessKeyColumn in column.hashKeyImmediateSources %}
    {%- if outerLoop.first and loop.first %}{{indent}}WHERE  {% else %}{{indent}}AND    {% endif %}
    {{- businessKeyColumn.source}} = {{table.name}}.{{businessKeyColumn.name}}{%br%}
  {%- endfor %}
{%- endfrom %}
{{indent}}){%br%}
{% endmacro %}

{# -- This macro inserts the where not exists query for a link -- #}
{% macro addLinkWhereNotExists(indent="        ",isSatelliteMultiActiveSequence = true) %}
{%- if table.sourceJoinDetails.where | trim != "" or settings.batchProcessingField != "" %}
AND NOT EXISTS ({%br%}
{%- else %}
WHERE NOT EXISTS ({%br%}
{%- endif %}
{{indent}}SELECT 1{%br%}
{{indent}}FROM   [TABLEOWNER].[{{table.name}}] {{table.name}}{%br%}
{%- from table.columns as column where column.linkHashKey and column.artificial %} {#- -- The "primary" hash key for the link table is marked as artificial -- #}
  {%- set outerLoop = loop %}
  {%- for hashKeySourceColumn in column.hashKeyImmediateSources %}
    {%- if outerLoop.first and loop.first %}{{indent}}WHERE  {% else %}{{indent}}AND    {% endif %}
    {{- hashKeySourceColumn.source}} = {{table.name}}.{{hashKeySourceColumn.name}}{%br%}
  {%- endfor %}
{%- endfrom %}
{{indent}}){%br%}
{% endmacro %}

{# -- This macro inserts the where not exists query for a satellite -- #}
{% macro addSatWhereNotExists(indent="        ",isSatelliteMultiActiveSequence = true) %}
{%- if table.sourceJoinDetails.where | trim != "" or settings.batchProcessingField != "" %}
AND NOT EXISTS ({%br%}
{%- else %}
WHERE NOT EXISTS ( {%br%}
{%- endif %}
{{indent}}SELECT 1{%br%}
{{indent}}FROM   [TABLEOWNER].[{{table.name}}] {{table.name}}{%br%}
{%- from table.columns as column where column.linkHashKey or column.hubHashKey or column.changeHashKey or column.dssStartDate -%}
  {%- if loop.first %}{{indent}}WHERE  {% else %}{{indent}}AND    {% endif -%}
  {%- if column.dssStartDate %}current_rows.{{column.name}}
  {%- else -%}{{column.source}}{%- endif %} = {{table.name}}.{{column.name}}{%br%}
{%- endfrom %}
{{indent}}){%br%}
{% endmacro %}

{# -- This macro inserts the query to find the current row for a satellite -- #}
{% macro addSatCurrentVersion(indent="        ") %}
LEFT OUTER JOIN ({%br%}
{{indent}}SELECT
{%- from table.columns as column where column.hubHashKey or column.linkHashKey %}
  {%- if loop.first %}{{" "}}{% else %}{{indent}}, {% endif %}{{table.name}}.{{column.name}}{%br%}
{%- endfrom %}
{%- from table.columns as column where column.dssStartDate or column.dssVersion %}
  {{indent}}   , MAX({{table.name}}.{{column.name}}) AS {{column.name}}{%br%}
{%- endfrom %}
{{indent}}FROM   [TABLEOWNER].[{{table.name}}] {{table.name}}{%br%}
{%- from table.columns as column where column.hubHashKey or column.linkHashKey %}
  {%- if loop.first %}{{indent}}GROUP BY {% else %}{{indent}}, {% endif %}{{table.name}}.{{column.name}}{%br%}
{%- endfrom %}
{{indent}}) AS current_rows{%br%}
{%- from table.columns as column where column.hubHashKey or column.linkHashKey %}
  {%- if loop.first %}      ON  {% else %}      AND {% endif %}{{column.source}} = current_rows.{{column.name}}{%br%}
{%- endfrom %}
{% endmacro %}

{# -- This macro inserts the procedure comment block -- #}
{% macro addProcedureCommentBlock(indentString = "  ", commentMessage = "Hello") %}
{{- indentString -}}--====================================================={%br%}
{{- indentString -}}-- {{commentMessage}}{%br%}
{{- indentString -}}--====================================================={%br%}
{% endmacro %}



{# -- This macro adds in logic for batch looping -- #}
{% macro addBatchLoopSelectClause() %}
{%- if settings.batchProcessingField != "" %}
  {%- set sourceFound = false %}
  {%- for col in table.columns %}
    {%- if col.sourceColumn is defined and not sourceFound %}
      {%- fetch col.sourceColumn %}
      {%- if col.sourceColumn.name == settings.batchProcessingField %}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @" {%- br %}
  SELECT DISTINCT {{col.source}} batch_start {%- br %}
  {%- for joinLine in (table.sourceJoinDetails.join | lines)%}  {{joinLine}}{%br%}{%- endfor%}
  {%- for whereLine in (table.sourceJoinDetails.where | lines)%}  {{whereLine}}{%br%}{%- endfor%}
  ORDER BY 1 {%- br %}
"@ {%- br %}
  $SnowflakeLoop = Run-Snowflake-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed batch distinct select from source tables step $step" -odbcConn $tgtConn {%- br %}
}{%br%}
{%- br %}
foreach($row in $SnowflakeLoop[3]) { {%- br %}
{%- br %}
  if ( $status -eq 1 ){ {%- br %}
{%- br %}
    $null = WsWrkAudit -Message "Processing batch : $($row[0])" {%- br %}
{%- br %}
        {%- set sourceFound = true %}
      {%- endif %}
    {%- endif %}
  {%- endfor %}
{%- endif %}
{% endmacro %}



{# -- This macro adds in logic for batch looping -- #}
{% macro addBatchLoopWhereClause(indent = "      ", dssFlag = false) %}
  {%- if table.sourceJoinDetails.where | trim != "" or dssFlag %}
    {%- set nextWhere = "AND" %}
  {%- else %}
    {%- set nextWhere = "WHERE" %}
  {%- endif %}
  {%- if settings.batchProcessingField != "" %}
    {%- set sourceFound = false %}
    {%- for col in table.columns %}
      {%- if col.sourceColumn is defined and not sourceFound %}
        {%- fetch col.sourceColumn %}
        {%- if col.sourceColumn.name == settings.batchProcessingField %}
    {{nextWhere}} {{col.source}} = '$($row[0])' {%br%}
          {%- set sourceFound = true %}
        {%- endif %}
      {%- endif %}
    {%- endfor %}
  {%- endif %}
{% endmacro %}

{# -- This macro adds the source columns and dss columns for Satellites which require Multi-Active Sequence Key generation -- #}
{% macro addSetInsertColumnsIncomingRowsMultiActiveSequenceSatellite(indentString = "       ") %}
	{%- from table.columns as column where not column.dssVersion %}
		{%- if not loop.first -%}{{indentString}}, {%else%}{{"     "}}{% endif %}
		{%- if column.keyType.name == "MultiActiveSequence" and column.sourceTable is empty -%}
			{%- from table.columns as groupByHashCol where groupByHashCol.hubHashKey or groupByHashCol.linkHashKey -%}
				{%- if groupByHashCol.linkHashKey -%}
					{%- error "
Multi-Active Satellite Sequence Key generation is not supported for Link Satellites, instead:
(1) Manually add a sequence column with suitable column transform to your DV Stage.
(2) In the Maintain Hash Key Columns Wizard model your Satellite Type as Multi-Active Natural selecting your sequence column as your key.
Example transform: ROW_NUMBER() OVER(PARTITION BY EmployeeID ORDER BY PhoneNumber)
" -%}
				{%- endif -%}
				{%- fetch groupByHashCol.sourceTable -%}
				ROW_NUMBER() OVER( PARTITION BY {{ groupByHashCol.sourceTable.name }}.{{ groupByHashCol.sourceColumn.name }}{%br%}
				 ORDER BY {% endfrom -%}
			{%- from table.columns as changeHashCol where changeHashCol.changeHashKey %}
				{%- if column.changeHashMultiActiveSeqSortColumns is empty -%} ( SELECT 1 )
				{%- else -%}
					{#- we have sort sequence columns -#}
					{%- fetch changeHashCol.sourceTable -%}
					{%- for sortCol in column.changeHashMultiActiveSeqSortColumns -%}
						{%- if not loop.first -%}{{indentString}}      ,{%else%}{{" "}} {% endif -%}
						{{ changeHashCol.sourceTable.name }}.{{ sortCol.name }}{% if not loop.last %}{% br %}{%else%} {% endif %}
					{%- endfor %}
				{%- endif -%}
			{%- endfrom %}
			{%- br %} {{indentString}})
		{%- elseif column.transform | trim != "" -%}
			{{column.transform | trim }}
		{%- elseif column.updateTime or column.createTime or column.dssStartDate -%}
			 CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
		{%- elseif column.source is not empty -%}
			{{- column.source -}}
		{%- else -%}
			CAST(NULL AS {{column.fullDataType.toUpperCase()}})
		{%- endif %} AS {{column.name}} {% if not loop.last %}{% br %}{% endif %}
	{%- endfrom %}
{% endmacro %}


{# -- This macro inserts the where not exists query for a satellite with Multi-Active Sequence Key generation---- #}
{% macro addMultiActiveSequenceSatWhereNotExists(indent="        ") %}
WHERE NOT EXISTS ({%br%}
{{indent}}SELECT 1{%br%}
{{indent}}FROM   [TABLEOWNER].[{{table.name}}] {{table.name}}{%br%}
{%- from table.columns as column where column.linkHashKey or column.hubHashKey or column.changeHashKey or column.dssStartDate or column.keyType.name == "MultiActiveNatural" or column.keyType.name == "MultiActiveSequence" -%}
  {%- if loop.first %}{{indent}}WHERE  {% else %}{{indent}}AND    {% endif -%}
  {%- if column.dssStartDate %}current_rows.{{column.name}}
  {%- else -%}incoming_rows.{{column.name}}{%- endif %} = {{table.name}}.{{column.name}}{%br%}
{%- endfrom %}
{{indent}}){%br%}
{% endmacro %}


{# -- This macro inserts the query to find the current row for a Satellite that requires Multi-Active Sequence Key generation -- #}
{% macro addSatMultiActiveSequenceCurrentVersion(indent="         ") %}
LEFT OUTER JOIN ({%br%}
{{indent}}SELECT
{%- from table.columns as column where column.hubHashKey or column.linkHashKey or column.keyType.name == "MultiActiveNatural" or column.keyType.name == "MultiActiveSequence" %}
  {%- if loop.first %} {% else %}{{indent}}     , {% endif %}{{table.name}}.{{column.name}}{%br%}
{%- endfrom %}
{%- from table.columns as column where column.dssStartDate or column.dssVersion %}
  {{indent}}   , MAX({{table.name}}.{{column.name}}) AS {{column.name}}{%br%}
{%- endfrom %}
{{indent}}FROM   [TABLEOWNER].[{{table.name}}] {{table.name}}{%br%}
{%- from table.columns as column where column.hubHashKey or column.linkHashKey or column.keyType.name == "MultiActiveNatural" or column.keyType.name == "MultiActiveSequence" %}
  {%- if loop.first %}{{indent}}GROUP BY {% else %}{{indent}}, {% endif %}{{table.name}}.{{column.name}}{%br%}
{%- endfrom %}
{{indent}}) AS current_rows{%br%}
{%- from table.columns as column where column.hubHashKey or column.linkHashKey or column.keyType.name == "MultiActiveNatural" or column.keyType.name == "MultiActiveSequence" %}
  {%- if loop.first %}      ON  {% else %}      AND {% endif -%}incoming_rows.{{column.name}} = current_rows.{{column.name}}{%br%}
{%- endfrom %}
{% endmacro %}
