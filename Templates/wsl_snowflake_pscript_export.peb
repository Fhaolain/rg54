{# -- TemplateVersion:002 MinVersion:8210 MaxVersion:* TargetType:Snowflake ModelType:* TemplateType:Powershell32                                           -- #}
{#                                                                                                                                                          -- #}
{# --    c WhereScape Ltd 2018. WhereScape Ltd permits you to copy this Template solely for use with the RED software, and to modify this Template          -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : Snowflake                                                                                                                        -- #}
{# -- Template Name      : wsl_snowflake_pscript_export                                                                                                     -- #}
{# -- RED Version        : 8.2.1.0                                                                                                                          -- #}
{# -- Description        : This template creates a Snowflake script specifically                                                                            -- #}
{# --                      specifically designed for all RED exports                                                                                        -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{#  Notes / History                                                                                                                                         -- #}
{# -- TK: Powershell release V1 (2017-05-17)                                                                                                                -- #}
{# -- TK: Updated to use extended properties (201-03-05)                                                                                                    -- #}
{# --                                                                                                                                                       -- #}
#=============================================================================={%- br %}
# DBMS Name        :    {{table.dbType.name}}{%- br %}
# Template         :    {{settings.template.name}}{%- br %}
# Template Version :    8.2.1.0{%- br %}
# Description      :    Export {{table.name}}{%- br %}
# Generated by     :    {{env.productVersion}}{%- br %}
# Generated for    :    {{env.licensedTo}}{%- br %}
# Generated on     :    {{env.currentTimestamp}}{%- br %}
# Author           :    {{env.userName}}{%- br %}
#=============================================================================={%- br %}
# Notes / History{%- br %}
#{%- br %}
function Print-Log { {%- br %}
    $logStream.Dispose(){%- br %}
    $logReader = New-Object IO.StreamReader($fileAud){%- br %}
    {%- br %}
    while( ! $logReader.EndOfStream) { {%- br %}
        [Console]::WriteLine($logReader.ReadLine()){%- br %}
    }{%- br %}
    {%- br %}
    $logReader.Dispose(){%- br %}
}{%- br %}
{%- br %}
Function Replace-WslTags($stuff) { {%- br %}
    {%- br %}
    if([string]::IsNullOrWhitespace($stuff)) { {%- br %}
        return $stuff{%- br %}
    }{%- br %}
    {%- br %}
    if($stuff.Contains('$SEQUENCE$')) { {%- br %}
        $stuff = $stuff.Replace('$SEQUENCE$',${env:WSL_SEQUENCE}){%- br %}
    }{%- br %}
    {%- br %}
    if([regex]::IsMatch($stuff,'\$.+\$')) { {%- br %}
        # If $stuff contains two or more $s and the $SEQUENCE$ string is not detected
        # or has already been replaced then we assume a date
        while([regex]::IsMatch($stuff,'\$.+\$')) { {%- br %}
            $startPos = $stuff.IndexOf('$'){%- br %}
            {%- br %}
            $work = $stuff.SubString($startPos + 1){%- br %}
            $endPos = $work.IndexOf('$'){%- br %}
            {%- br %}
            $suppliedFormat = $work.SubString(0, $endPos){%- br %}
            $dateFormat = $suppliedFormat.Replace('YY','yy').Replace('DD','dd').Replace('HH','hh').Replace('MI','mm').Replace('SS','ss'){%- br %}
            $dateString = (Get-Date -f $dateFormat){%- br %}
            $replaceString = '$' + $suppliedFormat + '$'{%- br %}
            {%- br %}
            $stuff = $stuff.Replace($replaceString,$dateString){%- br %}
        }{%- br %}
    }{%- br %}
    {%- br %}
    if($stuff.indexOf('$') -ne -1) { {%- br %}
        ${env:warn} = $true{%- br %}
        $logStream.WriteLine("Unclosed '$' tag in '$stuff'"){%- br %}
        $logStream.WriteLine("Unclosed '$' will be removed"){%- br %}
        $stuff = $stuff.Replace('$',''){%- br %}
    }{%- br %}
    return $stuff.Trim(){%- br %}
}{%- br %}
# Gzip function{%- br %}
function Gzip-File { {%- br %}
    param({%- br %}
        [string]$inFile = $(throw "No input file specified"),{%- br %}
        [string]$outFile = $inFile + ".gz",{%- br %}
        [switch]$removeOriginal = $false{%- br %}
    ){%- br %}
    {%- br %}
    $input = New-Object IO.FileStream $InFile, ([IO.FileMode]::Open), ([IO.FileAccess]::Read), ([IO.FileShare]::Read){%- br %}
    $output = New-Object IO.FileStream $OutFile, ([IO.FileMode]::Create), ([IO.FileAccess]::Write), ([IO.FileShare]::None){%- br %}
    $gzipStream = New-Object IO.Compression.GzipStream $Output, ([IO.Compression.CompressionLevel]::Fastest){%- br %}
    {%- br %}
    $input.CopyTo($gzipStream){%- br %}
    {%- br %}
    $gzipStream.Dispose(){%- br %}
    $output.Dispose(){%- br %}
    $input.Dispose(){%- br %}
    {%- br %}
    if($removeOriginal) { {%- br %}
        Remove-Item -Path $inFile{%- br %}
    }{%- br %}
    {%- br %}
    return (gci $outFile).Name{%- br %}
}{%- br %}
{%- br %}
# Main export function{%- br %}
function Export-Data { {%- br %}
    # Get extended properties{%- br %}
    ${env:DEBUG} = Get-ExtendedProperty -PropertyName "SF_DEBUG" -TableName ${env:WSL_EXP_NAME}{%- br %}
    ${env:ACCESS_KEY}        = Get-ExtendedProperty -PropertyName "SF_ACCESS_KEY" -TableName ${env:WSL_EXP_TABLE}{%- br %}
    ${env:SECRET_KEY}        = Get-ExtendedProperty -PropertyName "SF_SECRET_KEY" -TableName ${env:WSL_EXP_TABLE}{%- br %}
    ${env:SEND_FILES_ZIPPED} = Get-ExtendedProperty -PropertyName "SF_SEND_FILES_ZIPPED" -TableName ${env:WSL_EXP_TABLE}{%- br %}
    ${env:SNOWSQL_ACCOUNT}   = Get-ExtendedProperty -PropertyName "SF_SNOWSQL_ACCOUNT" -TableName ${env:WSL_EXP_TABLE}{%- br %}
    ${env:SNOWSQL_DATABASE}  = Get-ExtendedProperty -PropertyName "SF_SNOWSQL_DATABASE" -TableName ${env:WSL_EXP_TABLE}{%- br %}
    ${env:SNOWSQL_SCHEMA}    = Get-ExtendedProperty -PropertyName "SF_SNOWSQL_SCHEMA" -TableName ${env:WSL_EXP_TABLE}{%- br %}
    ${env:SNOWSQL_WAREHOUSE} = Get-ExtendedProperty -PropertyName "SF_SNOWSQL_WAREHOUSE" -TableName ${env:WSL_EXP_TABLE}{%- br %}
    ${env:UNICODE_SUPPORT}   = Get-ExtendedProperty -PropertyName "SF_UNICODE_SUPPORT" -TableName ${env:WSL_EXP_TABLE}{%- br %}
    ${env:SEND_FILES_ZIPPED} = Get-ExtendedProperty -PropertyName "SF_SEND_FILES_ZIPPED" -TableName ${env:WSL_EXP_TABLE}{%- br %}
    {%- br %}
    ${env:SNOWSQL_USER} = ${env:WSL_SRC_USER}{%- br %}
    ${env:SNOWSQL_PWD}  = ${env:WSL_SRC_PWD}{%- br %}
    {%- br %}
    if(${env:DEBUG} -eq "TRUE") { {%- br %}
        $logStream.WriteLine("=================== EXPORT OPTIONS ==================="){%- br %}
        $logStream.WriteLine("Specified Export Name:       " + ${env:WSL_EXP_NAME}){%- br %}
        $logStream.WriteLine("Specified Work Dir:          " + ${env:WSL_WORKDIR}){%- br %}
        $logStream.WriteLine("Specified Sequence:          " + ${env:WSL_SEQUENCE}){%- br %}
        $logStream.WriteLine("Specified Metadata ODBC DSN: " + ${env:WSL_META_DSN}){%- br %}
        $logStream.WriteLine("Specified Metadata Username: " + ${env:WSL_META_USER}){%- br %}
        $logStream.WriteLine("Specified Metadata Password: " + (New-Object string ('*', ${env:WSL_META_PWD}.Length))){%- br %}
        $logStream.WriteLine(""){%- br %}
        if($runMode -eq 'S3') {
            $logStream.WriteLine("=================== CONNECTION OPTIONS ==================="){%- br %}
            $logStream.WriteLine("Access Key:                  " + (New-Object string ('*', ${env:ACCESS_KEY}.Length))){%- br %}
            $logStream.WriteLine("Secret Key:                  " + (New-Object string ('*', ${env:SECRET_KEY}.Length))){%- br %}
            $logStream.WriteLine(""){%- br %}
        }
        $logStream.WriteLine("=================== MODES ==================="){%- br %}
        $logStream.WriteLine("Specified Debug Mode:        " + ${env:DEBUG}){%- br %}
        $logStream.WriteLine("Specified Run Mode:          " + $runMode){%- br %}
        $logStream.WriteLine("Unicode Extract:             " + ${env:UNICODE_SUPPORT}){%- br %}
        $logStream.WriteLine(""){%- br %}
        if($runMode -eq 'Database') {
            $logStream.WriteLine("=================== SOURCE TABLE INFO ==================="){%- br %}
            $logStream.WriteLine("Source Where:                " + '{{ table.exportInfo.whereClause }}'){%- br %}
            $logStream.WriteLine(""){%- br %}
            $logStream.WriteLine("=================== SOURCE DB INFO ==================="){%- br %}
            $logStream.WriteLine("ODBC Source DSN:             " + ${env:WSL_SRC_DSN}){%- br %}
            $logStream.WriteLine("ODBC Source Username:        " + ${env:WSL_SRC_USER}){%- br %}
            $logStream.WriteLine("ODBC Source Password:        " + (New-Object string ('*', ${env:WSL_SRC_PWD}.Length))){%- br %}
            $logStream.WriteLine(""){%- br %}
        }
    }{%- br %}
    {%- br %}   
    $logStream.WriteLine("================= EXTRACT SQL ====================="){%- br %}
    {% set empty = "" %}
    $extractSql = @"
    SELECT
      {%- from table.columns as column where (column.sourceColumn is defined or column.transform | trim != "") %}
        {%- if not loop.first %}    , {% else %} {% endif %}
        {%- if column.transform | trim != "" %}
          {{- column.source }}
        {%- else %}
          {%- if column.sourceTable is defined %}
            {%- fetch column.sourceTable %}
            {{- column.sourceTable.name }}.
          {%- endif %}
          {%- if column.sourceColumn is defined %}
            {{- column.sourceColumn.name }}
          {%- endif %}
        {%- endif %}
        {%- br %}
      {%- endfrom %}
    FROM ${env:WSL_EXP_FULLNAME} ${env:WSL_EXP_TABLE}{%- br %}
    {%- from table.exportInfo.whereClause | lines as whereLine %}
    {{ whereLine }}{% br %}
    {%- endfrom %}
"@{%- br %}
    {%- br %}
    $logStream.WriteLine($extractSql){%- br %}
    $logStream.WriteLine(""){%- br %}
    {%- br %}
    if(${env:DEBUG} -eq "TRUE") { {%- br %}
        $logStream.WriteLine("BEGIN create of data file from source system: $(Get-Date)"){%- br %}
    }{%- br %}
    $unicode = $false
    if( ${env:UNICODE_SUPPORT} -eq "TRUE") {
        $unicode = $true
    }
    if($runMode -eq "Windows") { {%- br %}
        $path = '{{ table.exportInfo.file.path }}'{%- br %}
        if( ! $path.endsWith('\')) { {%- br %}
            $path += '\'{%- br %}
        }{%- br %}
        $path = Replace-WslTags $path{%- br %}
        $file = '{{ table.exportInfo.file.name }}'{%- br %}
        $file = Replace-WslTags $file{%- br %}
    }{%- br %}
    else { {%- br %}
        $path = ${env:WSL_SERVER}{%- br %}
        if( ! $path.endsWith('/')) { {%- br %}
            $path += '/'{%- br %}
        }{%- br %}
        $file = '{{ table.exportInfo.file.name }}'{%- br %}
        $file = Replace-WslTags $file{%- br %}
        $fileDat = $path + $file{%- br %}
    }{%- br %}
    {%- br %}
    if($runMode -ne "S3") { {%- br %}
        $logStream.WriteLine("================= SNOWSQL ================="){%- br %}
        $deleteRes = snowsql -q "remove @~/${file};"  -o friendly=false -o remove_comments=true -o header=false -o output_format=csv -o timing=false{%- br %}
        {%- br %}
        $copyStmt = "COPY INTO @~/$file FROM ( `r`n$extractSql `r`n) {{ table.exportInfo.options }}"{%- br %}
        $snowsqlExport = "snowsql -q `"$copyStmt`" -o friendly=false -o remove_comments=true -o output_format=csv -o timing=false"{%- br %}
        $maskedExport = $snowsqlExport{%- br %}
        {%- br %}
        $logStream.WriteLine("Export:    " + $maskedExport){%- br %}
        $exportRes = & $([ScriptBlock]::Create($snowsqlExport)){%- br %}
        try { {%- br %}
            $exportRes = $exportRes | Select-Object -Last 2 | ConvertFrom-CSV{%- br %}
        } catch {}{%- br %}
        if($exportRes.rows_unloaded -ne $null) { {%- br %}
            $rowsExported = $exportRes.rows_unloaded{%- br %}
        }{%- br %}
        else { {%- br %}
            foreach($line in $exportRes) { {%- br %}
                $logStream.WriteLine($line){%- br %}
            }{%- br %}
            [Console]::WriteLine("-2"){%- br %}
            [Console]::WriteLine("Export failed"){%- br %}
            Print-Log{%- br %}
            exit{%- br %}
        }{%- br %}
        {%- br %}
        $snowsqlGet = "snowsql -q `"GET @~/$file file://${path};`" -o friendly=false -o remove_comments=true -o output_format=csv -o timing=false"{%- br %}
        $logStream.WriteLine("GET:    " + $snowsqlGet){%- br %}
        $getRes = & $([ScriptBlock]::Create($snowsqlGet)){%- br %}
        try { {%- br %}
            $getRes = $getRes | Select-Object -Last 2 | ConvertFrom-CSV{%- br %}
        } catch {}{%- br %}
        {%- br %}
        $getFile = $getRes.file{%- br %}
        $getStatus = $getRes.status{%- br %}
        $getMessage = $getRes.message{%- br %}
        if($getStatus -eq "DOWNLOADED") { {%- br %}
            $deleteRes = snowsql -q "remove @~/${file};"  -o friendly=false -o remove_comments=true -o header=false -o output_format=csv -o timing=false{%- br %}
            $logStream.WriteLine("File '$file' downloaded as '${path}${getFile}'"){%- br %}
            if( ! [string]::IsNullOrWhiteSpace($getMessage)) { {%- br %}
                $logStream.WriteLine("Message returned from GET call: $getMessage"){%- br %}
            }{%- br %}
            $logStream.WriteLine("$rowsExported rows exported"){%- br %}
            [Console]::WriteLine("1"){%- br %}
            [Console]::WriteLine("Export successful. $rowsExported rows exported"){%- br %}
        }{%- br %}
        else { {%- br %}
            $logStream.WriteLine("Status returned from GET call: $getStatus"){%- br %}
            if( ! [string]::IsNullOrWhiteSpace($getMessage)) { {%- br %}
                $logStream.WriteLine("Message returned from GET call: $getMessage"){%- br %}
            }{%- br %}
            [Console]::WriteLine("-2"){%- br %}
            [Console]::WriteLine("Export Failed"){%- br %}
            Print-Log{%- br %}
            exit{%- br %}
        }{%- br %}
    }{%- br %}
    else { {%- br %}
        $logStream.WriteLine("================= SNOWSQL ================="){%- br %}
        $copyStmt = "COPY INTO $fileDat FROM ( `r`n$extractSql `r`n) CREDENTIALS = (AWS_KEY_ID='${env:ACCESS_KEY}' AWS_SECRET_KEY='${env:SECRET_KEY}') {{ table.exportInfo.options }}"{%- br %}
        $snowsqlExport = "snowsql -q `"$copyStmt`" -o friendly=false -o remove_comments=true -o output_format=csv -o timing=false"{%- br %}
        $maskedExport = $snowsqlExport{%- br %}
        if( ! [string]::IsNullOrWhiteSpace(${env:ACCESS_KEY})) { {%- br %}
            $maskedExport = $maskedExport.Replace(${env:ACCESS_KEY},(New-Object String ('*', ${env:ACCESS_KEY}.Length))){%- br %}
        }{%- br %}
        if( ! [string]::IsNullOrWhiteSpace(${env:SECRET_KEY})) { {%- br %}
            $maskedExport = $maskedExport.Replace(${env:SECRET_KEY},(New-Object String ('*', ${env:SECRET_KEY}.Length))){%- br %}
        }{%- br %}
        {%- br %}
        $logStream.WriteLine("Export:    " + $maskedExport){%- br %}
        $exportRes = & $([ScriptBlock]::Create($snowsqlExport)){%- br %}    
        try { {%- br %}
            $exportRes = $exportRes | Select-Object -Last 2 | ConvertFrom-CSV{%- br %}
        } catch {}{%- br %}
        if($exportRes.rows_unloaded -ne $null) { {%- br %}
            $rowsExported = $exportRes.rows_unloaded{%- br %}
            $logStream.WriteLine("$rowsExported rows exported"){%- br %}
            [Console]::WriteLine("1"){%- br %}
            [Console]::WriteLine("Export successful. $rowsExported rows exported"){%- br %}
        }{%- br %}
        else { {%- br %}
            foreach($line in $exportRes) { {%- br %}
                $logStream.WriteLine($line){%- br %}
            }{%- br %}
            [Console]::WriteLine("-2"){%- br %}
            [Console]::WriteLine("Export failed"){%- br %}
            Print-Log{%- br %}
            exit{%- br %}
        }{%- br %}
    }{%- br %}
}{%- br %}
{%- br %}
try { {%- br %}
    if([string]::IsNullOrWhiteSpace(${env:WSL_SERVER})) { {%- br %}
        $runMode = "Windows"
    }{%- br %}
    else { {%- br %}
        if((${env:WSL_SERVER}).indexOf("s3://") -eq -1) { {%- br %}
            $runMode = "Windows"{%- br %}
        }{%- br %}
        else { {%- br %}
            $runMode = "S3"{%- br %}
        }{%- br %}
    }{%- br %}
    ${env:warn} = $false{%- br %}
    # Set Audit file name{%- br %}
    $fileAud = "${env:WSL_WORKDIR}\${env:WSL_EXP_NAME}_${env:WSL_SEQUENCE}.txt"{%- br %}
    $logStream = New-Object IO.StreamWriter($FileAud,$false){%- br %}
    $logStream.AutoFlush = $true{%- br %}
    {%- br %}
    Export-Data{%- br %}
    {%- br %}
    Print-Log{%- br %}
    exit{%- br %}
}{%- br %}
catch { {%- br %}
    [Console]::WriteLine("-2"){%- br %}
    [Console]::WriteLine("Export failed"){%- br %}
    $logStream.WriteLine($_.Exception.Message){%- br %}
    $logStream.WriteLine($_.InvocationInfo.PositionMessage){%- br %}
    Print-Log{%- br %}
    exit{%- br %}
}{%- br %}
