{# -- TemplateVersion:002 MinVersion:8010 MaxVersion:* TargetType:Snowflake ModelType:STAR TemplateType:Powershell                                          -- #}
{# --                                                                                                                                                       -- #}
{# --    c WhereScape Ltd 2018. WhereScape Ltd permits you to copy this Template solely for use with the RED software, and to modify this Template          -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : SNOWFLAKE                                                                                                                        -- #}
{# -- Template Name      : wsl_snowflake_pscript_stage                                                                                                      -- #}
{# -- RED Version        : 8.2.1.0                                                                                                                          -- #}
{# -- Description        : This template creates a Snowflake procedure using Insert                                                                         -- #}
{# --                      specifically designed for RED stage tables                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{# -- Notes / History                                                                                                                                       -- #}
{# -- JL: Snowflake Release 1.0.0 (2017-06-06)                                                                                                              -- #}
{# -- JL: Powershell Mods 2.0.0 (2017-08-03)                                                                                                                -- #}
{# -- JL: Dim mismatch reporting added 2.0.1 (2017-09-25)                                                                                                   -- #}
{# -- JL: Improved dim mismatch reporting 2.0.2 (2018-08-27)                                                                                                -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{% fetch table %}
{% set counter = 0 %}
{% import "wsl_snowflake_utility_dml" %}
{# --                                                            Start of main procedure text                                                               -- #}
#--=============================================================================={%br%}
#-- DBMS Name        :    SNOWFLAKE {{table.dbType.name}}{%br%}
#-- Block Name       :    {{settings.procedureName}}{%br%}
#-- Template         :    {{settings.template.name}}{%br%}
#-- Template Version :    8.2.1.0{%br%}
#-- Description      :    Update the {{table.objectType.name}} table {{table.name}}{%br%}
#-- Generated by     :    {{env.productVersion}}{%br%}
#-- Generated for    :    {{env.licensedTo}}{%br%}
#-- Generated on     :    {{env.currentTimestamp}}{%br%}
#-- Author           :    {{env.userName}}{%br%}
#--=============================================================================={%br%}
#-- Notes / History{%br%}
#--{%br%}

Import-module -Name WslPowershellCommon -DisableNameChecking{%br%}
Import-module -Name WslPowershellSnowflake -DisableNameChecking{%br%}
$tgtConn = New-Object System.Data.Odbc.OdbcConnection{%br%}
Hide-Window{%br%}

#--============================================================================{%br%}
#-- General Variables{%br%}
#--============================================================================{%br%}{%br%}
$sequence = ${env:WSL_SEQUENCE}{%br%}
$jobName = ${env:WSL_JOB_NAME}{%br%}
$taskName = ${env:WSL_TASK_NAME}{%br%}
$jobId = ${env:WSL_JOB_KEY}{%br%}
$taskId = ${env:WSL_TASK_KEY}{%br%}
$return_Msg = "{{table.name}} updated."{%br%}
$status = 1{%br%}

#--============================================================================{%br%}
#-- Main{%br%}
#--============================================================================{%br%}{%br%}
$step = {% counter %}00{%br%}
{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
$deleteCount = 0{%br%}
{%- endif %}
$insertCount = 0{%br%}

{%- for par in settings.parameters %}
  {%- if loop.first %}
{%br%}
#--============================================================================{%br%}
#-- Set Parameter Variables{%br%}
#--============================================================================{%br%}{%br%}
$step = {% counter %}00{%br%}{%br%}
  {%- endif %}
${{par}} = (WsParameterRead "{{par}}")[0]{%br%}
{%- endfor %}

#--============================================================================{%br%}
#-- Set Timezone{%br%}
#--============================================================================{%br%}{%br%}
$step = {% counter %}00{%br%}{%br%}
$timeZone = Get-ExtendedProperty -PropertyName "SF_TIMEZONE" -TableName "{{table.name}}"
if( ! [string]::IsNullOrEmpty($timeZone)) {
    $tzSql = "ALTER SESSION SET TIMEZONE = '$timeZone'"
    $SnowflakeResult = Run-Snowflake-RedSQL -sql $tzSql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to alter session timezone to '$timeZone'" -odbcConn $tgtConn
}{% br %}
{% br %}

{# --                                             -- #}
{# -- =========================================== -- #}
{# -- Deletes and Truncates                       -- #}
{# -- =========================================== -- #}
{# --                                             -- #}
{%- if settings.deleteBeforeInsert %}
  {%- if settings.deleteBeforeInsertTruncate %}{%br%}
if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #-- Truncate existing records{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  TRUNCATE TABLE [TABLEOWNER].[{{table.name}}]{%br%}
  ;{%br%}
"@
  $SnowflakeResult = Run-Snowflake-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed truncating table {{table.name}} step $step" -odbcConn $tgtConn
  $return_Msg = $SnowflakeResult[2]{%br%}
}{%br%}
  {%- else %}{%br%}
if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #-- Delete existing records{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  DELETE FROM [TABLEOWNER].[{{table.name}}]{%br%}
  {%- if settings.deleteWhereClause | trim != "" %}  {{settings.deleteWhereClause}}{%br%}{%- endif %}
  ;{%br%}
"@
  $SnowflakeResult = Run-Snowflake-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed deleting from table {{table.name}} step $step" -odbcConn $tgtConn
  $deleteCount = $SnowflakeResult[1]
  $return_Msg = $SnowflakeResult[2]{%br%}
}{%br%}
  {%- endif %}
{%- endif %}

{# --                                             -- #}
{# -- =========================================== -- #}
{# -- Auto adds                                   -- #}
{# -- =========================================== -- #}
{# --                                             -- #}
{%- set missingBkStatus="W" %}
{%- for rel in table.relations %}
  {%- if rel.autoAddUnmatchedBusinessKeys %}
    {%- if rel.noWarningForUnmatchedBusinessKeys %}
      {%- set missingBkStatus="I" %}
    {%- else %}
      {%- set missingBkStatus="W" %}
    {%- endif %}
    {%- fetch rel.fks[0].toTable %}
    {%- set dimTable = rel.fks[0].toTable %}
    {%- set dimTableOrig = dimTable %}
    {%- set dimTableName = dimTable.name %}
    {%- if dimTable.subType == "D" or dimTable.subType == "V" %}
      {%- if dimTable.subType == "V" %}
        {%- set vcNotFound = true %}
        {%- for vc in dimTable.columns %}
          {%- fetch vc.sourceTable -%}
          {%- if vc.sourceTable.name is defined and vcNotFound %}
            {%- set dimTable = objectsByName[vc.sourceTable.name] %}
            {%- set vcNotFound = false %}
          {%- endif %}
        {%- endfor %}
      {%- endif %}

if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #--= Build sql for finding missing dimension keys for dimension {{ dimTableName }}{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql_select = @"{% br %}
      {%- for fk in rel.fks %}
        {%- fetch fk.fromTable %}
        {%- fetch fk.fromColumn %}
        {%- fetch fk.toColumn %}
        {%- fetch fk.toColumn.sourceColumn %}
        {%- set bkSourceAlias = fk.toColumn.name %}
        {%- if dimTableOrig.subType == "V" %}
          {%- set bkSourceAlias = fk.toColumn.sourceColumn.name %}
        {%- endif %}
        {%- if loop.first %}  SELECT
        {%- else %}       ,
        {%- endif %} {{ fk.fromTable.name }}.{{ fk.fromColumn.name }} AS {{ bkSourceAlias }}{% br %}
      {%- endfor %}
      {%- for joinLine in (table.sourceJoinDetails.join | lines)%}  {{joinLine}}{%br%}{%- endfor%}
      {%- for whereLine in (table.sourceJoinDetails.where | trim | lines)%}  {{whereLine}}{%br%}{%- endfor%}
      {%- for groupByLine in (table.sourceJoinDetails.groupBy | trim | lines)%}  {{groupByLine}}{%br%}{%- endfor%}
  EXCEPT{% br %}
      {%- from dimTable.columns as dimCol where dimCol.businessKey %}
        {%- if loop.first %}  SELECT
        {%- else %}       ,
        {%- endif %} {{ dimTable.name }}.{{ dimCol.name }} AS {{ dimCol.name }}{% br %}
      {%- endfrom %}
  FROM [TABLEOWNER].[{{ dimTable.name }}] {{ dimTable.name }} {% br %}
"@{%br%}{%br%}

      {%- if rel.detailLogForUnmatchedBusinessKeys %}
  #--============================================================================{%br%}
  #--= Log messages for auto adds to dimension {{ dimTableName }}{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = $sql_select + " ORDER BY 1"
  
  $SnowflakeResult = Run-Snowflake-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to log missing dimension keys for {{ dimTableName }} at step $step" -odbcConn $tgtConn
  foreach($row in $SnowflakeResult[4]) { {%br%}
    $null = WsWrkError -Status "I" -messageType "AUTO_ADD" -Message "Auto added {{dimTableName}} row: $($row[0])" {%br%} 
  }{%br%}
      {%- endif %}
}{%br%}

if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #--= Insert missing dimension keys for dimension {{ dimTableName }}{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  INSERT INTO [TABLEOWNER].[{{ dimTable.name }}]{% br %}
      {%- from dimTable.columns as dimCol where dimCol.artificial or dimCol.businessKey or dimCol.dss or (dimCol.name == dssDeleteTime) %}
        {%- if loop.first %}  ( 
        {%- else %}  , 
        {%- endif %} {{ dimCol.name }}{% br %}
      {%- endfrom %}
  ){% br %}
      {%- from dimTable.columns as dimCol where dimCol.artificial or dimCol.businessKey or dimCol.dss or (dimCol.name == dssDeleteTime) %}
        {%- if loop.first %}  SELECT
        {%- else %}       ,
        {%- endif %}
        {%- if dimCol.artificial %}
          {%- from dimTable.columns as dimBk where dimBk.businessKey %}
            {%- if loop.first %} ROW_NUMBER() OVER(ORDER BY src.{{ dimBk.name }}) + COALESCE(maxkey.maxkey,0) AS DIM_KEY
            {%- endif %}
          {%- endfrom %}
        {%- elseif dimCol.businessKey %} src.{{ dimCol.name }} AS {{ dimCol.name }}
        {%- else %} CAST(CURRENT_TIMESTAMP AS {{ dimCol.fullDataType }}) AS {{ dimCol.name }}
        {%- endif %}
        {%- br %}
      {%- endfrom %}
  FROM (
    $sql_select
  ) AS src{% br %}
        {%- from dimTable.columns as dimCol where dimCol.artificial %}
  CROSS JOIN (
    SELECT MAX({{ dimCol.name }}) AS maxkey FROM [TABLEOWNER].[{{ dimTable.name }}]{% br %}
  ) AS maxkey{% br %}
      {%- endfrom %}
  ;{% br %}
"@
  $SnowflakeResult = Run-Snowflake-RedSQL $sql ${env:WSL_TGT_DSN} ${env:WSL_TGT_USER} ${env:WSL_TGT_PWD} "Failed to insert missing dimension keys into {{ dimTableName }} at step $step" -odbcConn $tgtConn
  $dimInsertCount = $SnowflakeResult[1]
  $return_Msg = $SnowflakeResult[2]{%br%}
  if ( $dimInsertCount -gt 0 ){ {%br%}
    $null = WsWrkAudit -Status "{{missingBkStatus}}" -Message "{{dimTableName }} $dimInsertCount rows auto added" {%br%}
  }{%br%}
}{%br%}{%br%}
    {%- endif %}
  {%- endif %}
{%- endfor %}

{# --                                             -- #}
{# -- =========================================== -- #}
{# -- Load data                                   -- #}
{# -- =========================================== -- #}
{# --                                             -- #}
if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #-- Insert new records{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  INSERT INTO [TABLEOWNER].[{{table.name}}]{%br%}
  {{addSetInsertTargetColumns()}}
  ){%br%}
  SELECT{{distinct() -}}{{- addSetInsertColumnsSnowflake(addArtificialKey = true)}}
  {%- for joinLine in (table.sourceJoinDetails.join | lines)%}  {{joinLine}}{%br%}{%- endfor%}
  {{- addDimensionJoins(indent = "  ")}}
  {%- for whereLine in (table.sourceJoinDetails.where | trim | lines)%}  {{whereLine}}{%br%}{%- endfor%}
  {%- for groupByLine in (table.sourceJoinDetails.groupBy | trim | lines)%}  {{groupByLine}}{%br%}{%- endfor%}  
  ;{%br%}
"@
  $SnowflakeResult = Run-Snowflake-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed insert into table {{table.name}} step $step" -odbcConn $tgtConn
  $insertCount = $insertCount + $SnowflakeResult[1]
  $return_Msg = $SnowflakeResult[2]{%br%}
}{%br%}{%br%}

{# --                                             -- #}
{# -- =========================================== -- #}
{# -- Report missed dimension lookups             -- #}
{# -- =========================================== -- #}
{# --                                             -- #}
{%- set dimTable="X" %}
{%- set dimKeyColumn="X" %}
{%- set missingBkStatus="W" %}
{%- for rel in table.relations %}
  {%- for fk in rel.fks %}
    {%- fetch fk.toTable %}
    {%- set dimTable=fk.toTable.name %}
    {%- from fk.toTable.columns as column where column.artificial %}
      {%- set dimKeyColumn=column.name %}
    {%- endfrom %}
  {%- endfor %}
  {%- if rel.noWarningForUnmatchedBusinessKeys %}
    {%- set missingBkStatus="I" %}
  {%- else %}
    {%- set missingBkStatus="W" %}
  {%- endif %}
if ( $status -eq 1 ){
{%br%}
  #--====================================================={%br%}
  #-- Check {{dimTable}} for bad key joins{%br%}
  #--====================================================={%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  SELECT COUNT(*) {%br%}
  FROM [TABLEOWNER].[{{table.name}}] {%br%}
  WHERE {{dimKeyColumn}} = 0 {%br%}
"@
  $SnowflakeLoop = Run-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to count zero key rows at step $step" -odbcConn $tgtConn
  foreach($row in $SnowflakeLoop[4]) { {%br%}
    if ( $row[0] -gt 0 ){ {%br%}
      $null = WsWrkAudit -Status "{{missingBkStatus}}" -Message "$($row[0]) rows that could not be matched to {{dimTable}}" {%br%}
    }{%br%}
  }{%br%}
}{%br%}{%br%}
{%- endfor %}

{# --                                             -- #}
{# -- =========================================== -- #}
{# -- Details of missing dimension lookups        -- #}
{# -- =========================================== -- #}
{# --                                             -- #}
{%- for rel in table.relations %}
  {%- fetch rel.fks[0].toTable %}
  {%- if rel.detailLogForUnmatchedBusinessKeys and not rel.autoAddUnmatchedBusinessKeys %}
    {%- set dimTable = rel.fks[0].toTable %}
    {%- set dimTableOrig = dimTable %}
    {%- set dimTableName = dimTable.name %}
    {%- if dimTable.subType == "D" or dimTable.subType == "V" %}
      {%- if dimTable.subType == "V" %}
        {%- set vcNotFound = true %}
        {%- for vc in dimTable.columns %}
          {%- fetch vc.sourceTable -%}
          {%- if vc.sourceTable.name is defined and vcNotFound %}
            {%- set dimTable = objectsByName[vc.sourceTable.name] %}
            {%- set vcNotFound = false %}
          {%- endif %}
        {%- endfor %}
      {%- endif %}
if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #--= Log messages for unmatched dimension keys in {{ dimTableName }}{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"{% br %}
      {%- for fk in rel.fks %}
        {%- fetch fk.fromTable %}
        {%- fetch fk.fromColumn %}
        {%- fetch fk.toColumn %}
        {%- fetch fk.toColumn.sourceColumn %}
        {%- set bkSourceAlias = fk.toColumn.name %}
        {%- if dimTableOrig.subType == "V" %}
          {%- set bkSourceAlias = fk.toColumn.sourceColumn.name %}
        {%- endif %}
        {%- if loop.first %}  SELECT
        {%- else %}       ,
        {%- endif %} {{ fk.fromTable.name }}.{{ fk.fromColumn.name }} AS {{ bkSourceAlias }}{% br %}
      {%- endfor %}
      {%- for joinLine in (table.sourceJoinDetails.join | lines)%}  {{joinLine}}{%br%}{%- endfor%}
      {%- for whereLine in (table.sourceJoinDetails.where | trim | lines)%}  {{whereLine}}{%br%}{%- endfor%}
      {%- for groupByLine in (table.sourceJoinDetails.groupBy | trim | lines)%}  {{groupByLine}}{%br%}{%- endfor%}
  EXCEPT{% br %}
      {%- from dimTable.columns as dimCol where dimCol.businessKey %}
        {%- if loop.first %}  SELECT
        {%- else %}       ,
        {%- endif %} {{ dimTable.name }}.{{ dimCol.name }} AS {{ dimCol.name }}{% br %}
      {%- endfrom %}
  FROM [TABLEOWNER].[{{ dimTable.name }}] {{ dimTable.name }} {% br %}
  ORDER BY 1
"@{%br%}{%br%}
  $SnowflakeResult = Run-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to log missing dimension keys for {{ dimTableName }} at step $step" -odbcConn $tgtConn
  foreach($row in $SnowflakeResult[4]) { {%br%}
    $null = WsWrkError -Status "I" -messageType "LOOKUP" -Message "Dimension key not found in dimension {{dimTableName}} row: $($row[0])" {%br%}
  }{%br%}
}{%br%}
    {%- endif %}
  {%- endif %}
{%- endfor %}

{# --                                             -- #}
{# -- =========================================== -- #}
{# -- Finish Up                                   -- #}
{# -- =========================================== -- #}
{# --                                             -- #}
#--====================================================={%br%}
#-- All Done report the results{%br%}
#--====================================================={%br%}{%br%}
$step = {% counter %}00{%br%}{%br%}
#-- WsWrkTask call to updated row counts in Ws_Wrk_Task_Run/Log{%br%}
{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
$metaResult = WsWrkTask -Replaced $insertCount -Deleted $deleteCount{%br%}
{%- else %}
$metaResult = WsWrkTask -Replaced $insertCount{%br%}
{%- endif %}
if ( $metaResult -lt -1 ){
  $status = -2{%br%}
  $return_Msg = "Failure executing WsWrkTask. $insertCount records inserted."{%br%}
}

#-- Work out return message{%br%}
if ( $status -eq 1 ) {
{%br%}
  $return_Msg = "{{table.name}} updated.  "{%br%}
  $return_Msg += "$insertCount records inserted.  "{%br%}
  {%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
  $return_Msg += "$deleteCount records deleted.  "{%br%}
  {%- endif %}
}

$status
$return_Msg

$tgtConn.Dispose()
