{# -- TemplateVersion:002 MinVersion:8010 MaxVersion:* TargetType:Snowflake ModelType:STAR,ODS,NORMAL                                                       -- #}
{# --                                                                                                                                                       -- #}
{# --    © Wherescape Ltd 2017. Wherescape Ltd permits you to copy this Template solely for use with the RED software, and to modify this Template          -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : SNOWFLAKE                                                                                                                        -- #}
{# -- Template Name      : wsl_snowflake_pscript_perm                                                                                                       -- #}
{# -- RED Version        : 8.0.1.0                                                                                                                          -- #}
{# -- Description        : This template creates a Snowflake procedure specifically                                                                         -- #}
{# --                      specifically designed for all RED non-stage tables                                                                               -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{# -- Notes / History                                                                                                                                       -- #}
{# -- JL: Snowflake Release 1.0.0 (2017-06-06)                                                                                                              -- #}
{# -- JL: Powershell Mods 2.0.0 (2017-08-03)                                                                                                                -- #}
{# -- JL: Added logical deleting and batch looping 2.0.1 (2017-09-17)                                                                                       -- #}
{# -- JL: Added support for identity columns 2.0.2 (2017-12-14)                                                                                             -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{% fetch table %}
{% set counter = 0 %}
{% set dssDeleteTime = "DSS_DELETE_TIME" %}
{% import "wsl_snowflake_utility_dml" %}
{# --                                                            Start of main procedure text                                                               -- #}
#--=============================================================================={%br%}
#-- DBMS Name        :    SNOWFLAKE {{table.dbType.name}}{%br%}
#-- Block Name       :    {{settings.procedureName}}{%br%}
#-- Template         :    {{settings.template.name}}{%br%}
#-- Template Version :    8.0.1.0{%br%}
#-- Description      :    Update the {{table.objectType.name}} table {{table.name}}{%br%}
#-- Generated by     :    {{env.productVersion}}{%br%}
#-- Generated for    :    {{env.licensedTo}}{%br%}
#-- Generated on     :    {{env.currentTimestamp}}{%br%}
#-- Author           :    {{env.userName}}{%br%}
#--=============================================================================={%br%}
#-- Notes / History{%br%}
#--{%br%}

Import-module -Name WslPowershellCommon -DisableNameChecking{%br%}
Import-module -Name WslPowershellSnowflake -DisableNameChecking{%br%}
$tgtConn = New-Object System.Data.Odbc.OdbcConnection{%br%}
Hide-Window{%br%}

#--============================================================================{%br%}
#-- General Variables{%br%}
#--============================================================================{%br%}{%br%}
$sequence = ${env:WSL_SEQUENCE}{%br%}
$jobName = ${env:WSL_JOB_NAME}{%br%}
$taskName = ${env:WSL_TASK_NAME}{%br%}
$jobId = ${env:WSL_JOB_KEY}{%br%}
$taskId = ${env:WSL_TASK_KEY}{%br%}
$return_Msg = "{{table.name}} updated."{%br%}
$status = 1{%br%}

#--============================================================================{%br%}
#-- Main{%br%}
#--============================================================================{%br%}{%br%}
$step = {% counter %}00{%br%}
{%- set dssDeleteTimePresent = "FALSE" -%}
{%- from table.columns as column where column.name == dssDeleteTime -%}
  {% set dssDeleteTimePresent = "TRUE" %}  
$logicalDeleteCount = 0{%br%}
{%- endfrom -%}
{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
$deleteCount = 0{%br%}
{%- endif %}
$mergeCount = 0{%br%}

{%- for par in settings.parameters %}
  {%- if loop.first %}
{%br%}
#--============================================================================{%br%}
#-- Set Parameter Variables{%br%}
#--============================================================================{%br%}{%br%}
$step = {% counter %}00{%br%}{%br%}
  {%- endif %}
${{par}} = (WsParameterRead "{{par}}")[0]{%br%}
{%- endfor %}

#--============================================================================{%br%}
#-- Set Timezone{%br%}
#--============================================================================{%br%}{%br%}
$step = {% counter %}00{%br%}{%br%}
$timeZone = Get-ExtendedProperty -PropertyName "SF_TIMEZONE" -TableName "{{table.name}}"
if( ! [string]::IsNullOrEmpty($timeZone)) {
    $tzSql = "ALTER SESSION SET TIMEZONE = '$timeZone'"
    $SnowflakeResult = Run-Snowflake-RedSQL -sql $tzSql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed to alter session timezone to '$timeZone'" -odbcConn $tgtConn
}{% br %}
{% br %}

{%- if settings.deleteBeforeInsert %}
  {%- if settings.deleteBeforeInsertTruncate %}{%br%}
if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #-- Truncate existing records{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  TRUNCATE TABLE [TABLEOWNER].[{{table.name}}]{%br%}
  ;{%br%}
"@
  $SnowflakeResult = Run-Snowflake-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed truncating table {{table.name}} step $step" -odbcConn $tgtConn
  $return_Msg = $SnowflakeResult[2]{%br%}
}{%br%}
  {%- else %}{%br%}
if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #-- Delete existing records{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  DELETE FROM [TABLEOWNER].[{{table.name}}]{%br%}
  {%- if settings.deleteWhereClause | trim != "" %}  {{settings.deleteWhereClause}}{%br%}{%- endif %}
  ;{%br%}
"@
  $SnowflakeResult = Run-Snowflake-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed deleting from table {{table.name}} step $step" -odbcConn $tgtConn
  $deleteCount = $SnowflakeResult[1]
  $return_Msg = $SnowflakeResult[2]{%br%}
}{%br%}
  {%- endif %}
{%- endif %}

{%- if settings.insertZeroKeyRecord %}
  {% from table.columns as column where column.artificial %}
    {% if loop.first %}{%br%}
if ( $status -eq 1 ){
{%br%}
  #--============================================================================{%br%}
  #-- Refresh zero key records{%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @"
  MERGE INTO [TABLEOWNER].[{{table.name}}]{%br%}
  USING ({%br%}
    SELECT {{defaultColumnsSnowflake()}}
    FROM   DUAL{%br%}
    ) AS src{%br%}
  ON {{getArtificialKey()}} = 0{%br%}
  WHEN MATCHED THEN UPDATE{%br%}
  SET{{- addMergeUpdateColumns(alias = "src")}}
  WHEN NOT MATCHED THEN INSERT{%br%}
  {{addSetInsertTargetColumns(includeIdentity = true)}}
  ){%br%}
  VALUES  
  ({{- addSetInsertColumnsSnowflake(addArtificialKey = true, alias = "src", zeroKeyInsert = true, indent = "  ", addColumnName = false, ignoreDssColumns = true, includeIdentity = true)}} 
  ){%br%}
  ;{%br%}
"@
  $SnowflakeResult = Run-Snowflake-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed zero key merge into table {{table.name}} step $step" -odbcConn $tgtConn
  $mergeCount = $mergeCount + $SnowflakeResult[1]
  $return_Msg = $SnowflakeResult[2]{%br%}
}{%br%}
    {%- endif -%}
  {%- endfrom -%}
{%- endif %}

{%- if dssDeleteTimePresent == "TRUE" -%} 
if ( $status -eq 1 ){ {%br%}{%br%}
  #--============================================================================{%br%}
  #-- Ensure there is Source Data before performing a logical delete {%br%}
  #--============================================================================{%br%}{%br%}
  $step = {% counter %}00{%br%}{%br%}
  $sql = @" {%- br %}
  SELECT COUNT(*) {%- br %}
  {%- for joinLine in (table.sourceJoinDetails.join | lines)%}  {{joinLine}}{%br%}{%- endfor%}
  ;{%br%}
"@ {%- br %}
  $SourceCount = Run-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed batch distinct select from source tables step $step" -odbcConn $tgtConn {%- br %}{%- br %}
  foreach($row in $SourceCount[4]) { {%br%}{%br%}
    if ( $($row[0]) -gt 0 ) { {%br%}{%br%}
      #--============================================================================{%br%}
      #-- Perform Logical Deletes{%br%}
      #--============================================================================{%br%}{%br%}
      $step = {% counter %}00{%br%}{%br%}
      $sql = @"
      UPDATE [TABLEOWNER].[{{table.name}}]{%br%}
      SET    DSS_DELETE_TIME = CAST(CURRENT_TIMESTAMP AS TIMESTAMP){%br%}
      {%- from table.columns as column where column.currentFlag or column.dssEndDate %}
        {%- if column.currentFlag %}
           , {{column.name}} = 'N'{%br%}
        {%- elseif column.dssEndDate %}
           , {{column.name}} = {{settings.changeDetectionEndExpiring}}{%br%}
        {%- endif %}
      {%- endfrom %}
      WHERE NOT EXISTS ( {%br%}
        SELECT 1{%br%}
        {%- for joinLine in (table.sourceJoinDetails.join | lines)%}        {{joinLine | trim}}{%br%}{%- endfor%}
        {{addWhereJoinToTarget()}}{%br%}
        ){%br%}
      AND   DSS_DELETE_TIME IS NULL{%br%}
      AND   {{getArtificialKey()}} <> 0{%br%}
      ;{%br%}
"@
      $SnowflakeResult = Run-Snowflake-RedSQL $sql ${env:WSL_TGT_DSN} ${env:WSL_TGT_USER} ${env:WSL_TGT_PWD} "Failed logical delete in table {{table.name}} step $step" -odbcConn $tgtConn 
      $logicalDeleteCount = $logicalDeleteCount + $SnowflakeResult[1]
      $return_Msg = $SnowflakeResult[2]{%br%}
    }{%br%}
  }{%br%}
}{%br%}
{%- endif %}

{%- if settings.batchProcessingField != "" %}
  {%- set batchIndent = "  " %} 
{%- else %}
  {%- set batchIndent = "" %}
{%- endif %}

if ( $status -eq 1 ){
{%br%}
  {{- addBatchLoopSelectClause()}}
  {{batchIndent}}#--============================================================================{%br%}
  {{batchIndent}}#-- Refresh data{%br%}
  {{batchIndent}}#--============================================================================{%br%}{%br%}
  {{batchIndent}}$step = {% counter %}00{%br%}{%br%}
  {{batchIndent}}$sql = @"
  {{batchIndent}}MERGE INTO [TABLEOWNER].[{{table.name}}]{%br%}
  {{batchIndent}}USING ({%br%}
    {{batchIndent}}SELECT {{- addSetInsertColumnsSnowflake(indent = batchIndent+"         ")}}
    {{- addLastSurrogateColumn()}}
    {%- for joinLine in (table.sourceJoinDetails.join | trim | lines)%}    {{batchIndent}}{{joinLine}}{%br%}{%- endfor%}
    {{- addLastSurrogateCrossJoin() }}
    {%- for whereLine in (table.sourceJoinDetails.where | trim | lines)%}    {{batchIndent}}{{whereLine}}{%br%}{%- endfor%}
    {{- addBatchLoopWhereClause()}}
    {%- for groupByLine in (table.sourceJoinDetails.groupBy | trim | lines)%}    {{batchIndent}}{{groupByLine}}{%br%}{%- endfor%}
    {{batchIndent}}) AS src{%br%}
  {{batchIndent}}{{addMergeJoinCondition(alias = "src")}}
  {{batchIndent}}WHEN MATCHED THEN UPDATE{%br%}
  {{batchIndent}}SET{{- addMergeUpdateColumns(alias = "src", indent = batchIndent+"    ")}}
  {{batchIndent}}WHEN NOT MATCHED THEN INSERT{%br%}
  {{batchIndent}}{{- addSetInsertTargetColumns(indent = batchIndent)}}
  {{batchIndent}}){%br%}
  {{batchIndent}}VALUES{%br%}
  {{batchIndent}}({{- addSetInsertColumnsSnowflake(addArtificialKey = true, alias = "src", indent = batchIndent+"  ", addColumnName = false, ignoreDssColumns = true)}}
  {{batchIndent}}){%br%}
  {{batchIndent}};{%br%}
"@
  {{batchIndent}}$SnowflakeResult = Run-Snowflake-RedSQL -sql $sql -dsn ${env:WSL_TGT_DSN} -uid ${env:WSL_TGT_USER} -pwd ${env:WSL_TGT_PWD} -failureMsg "Failed data merge into table {{table.name}} step $step" -odbcConn $tgtConn
  {{batchIndent}}$mergeCount = $mergeCount + $SnowflakeResult[1]
  {{batchIndent}}$return_Msg = $SnowflakeResult[2]{%br%}
{{batchIndent}}} {%br%}
{%- if settings.batchProcessingField != "" %}
} {%br%}
{%- endif %}

#--====================================================={%br%}
#-- All Done report the results{%br%}
#--====================================================={%br%}{%br%}
$step = {% counter %}00{%br%}{%br%}
#-- WsWrkTask call to updated row counts in Ws_Wrk_Task_Run/Log{%br%}
{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
$metaResult = WsWrkTask -Replaced $mergeCount -Deleted $deleteCount{%br%}
{%- else %}
$metaResult = WsWrkTask -Replaced $mergeCount{%br%}
{%- endif %}
if ( $metaResult -lt -1 ){
  $status = -2{%br%}
  $return_Msg = "Failure executing WsWrkTask. $mergeCount records merged."{%br%}
}

#-- Work out return message{%br%}
if ( $status -eq 1 ) {
{%br%}
  $return_Msg = "{{table.name}} updated.  "{%br%}
  $return_Msg += "$mergeCount records merged.  "{%br%}
  {%- if dssDeleteTimePresent == "TRUE" %}
  $return_Msg += "$logicalDeleteCount records logically deleted.  "{%br%}
  {%- endif %}
  {%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
  $return_Msg += "$deleteCount records deleted.  "{%br%}
  {%- endif %}
}

$status
$return_Msg

$tgtConn.Dispose()
