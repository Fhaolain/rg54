{#                                                                                                                                                          -- #}
{# --    Â© Wherescape Ltd 2017. Wherescape Ltd permits you to copy this Template solely for use with the RED software, and to modify this Template          -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : Snowflake                                                                                                                        -- #}
{# -- Template Name      : wsl_snowflake_pscript_export                                                                                                     -- #}
{# -- Template Version   : 6.9.1.0                                                                                                                          -- #}
{# -- Description        : This template creates a Snowflake script specifically                                                                            -- #}
{# --                      specifically designed for all RED exports                                                                                        -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{#  Notes / History                                                                                                                                         -- #}
{# -- TK: Powershell release V1 (2017-05-17)                                                                                                                -- #}
{# --                                                                                                                                                       -- #}
#=============================================================================={%- br %}
# DBMS Name        :    {{table.dbType.name}}{%- br %}
# Template         :    {{settings.template.name}}{%- br %}
# Template Version :    6.9.1.0{%- br %}
# Description      :    Export {{table.name}}{%- br %}
# Generated by     :    {{env.productVersion}}{%- br %}
# Generated for    :    {{env.licensedTo}}{%- br %}
# Generated on     :    {{env.currentTimestamp}}{%- br %}
# Author           :    {{env.userName}}{%- br %}
#=============================================================================={%- br %}
# Notes / History{%- br %}
#{%- br %}
function Print-Log { {%- br %}
    $logStream.Dispose(){%- br %}
    $logReader = New-Object IO.StreamReader($fileAud){%- br %}
    {%- br %}
    while( ! $logReader.EndOfStream) { {%- br %}
        [Console]::WriteLine($logReader.ReadLine()){%- br %}
    }{%- br %}
    {%- br %}
    $logReader.Dispose(){%- br %}
}{%- br %}
{%- br %}
# Define ODBC Read function{%- br %}
function Get-ODBC-Data{ {%- br %}
    param({%- br %}
        [string]$query = "",{%- br %}
        [string]$dsn = "",{%- br %}
        [string]$username = "",{%- br %}
        [string]$password = "",{%- br %}
        [string]$fileDat  = ""{%- br %}
    ){%- br %}
    {%- br %}
    $odbcConn = New-Object Data.Odbc.OdbcConnection{%- br %}
    $odbcConn.ConnectionString = "DSN=$dsn"{%- br %}
    {%- br %}
    if(![string]::IsNullOrEmpty($username)){ {%- br %}
        {%- br %}
        $odbcConn.ConnectionString += ";UID=$username"{%- br %}
        {%- br %}
    }{%- br %}
    {%- br %}
    if(![string]::IsNullOrEmpty($password)){ {%- br %}
        {%- br %}
        $odbcConn.ConnectionString += ";PWD=$password"{%- br %}
        {%- br %}
    }{%- br %}
    try { {%- br %}
        {%- br %}
        $odbcConn.open(){%- br %}
        $odbcCommand = New-object Data.Odbc.OdbcCommand($query,$odbcConn){%- br %}
        {%- br %}
        if( ! [string]::IsNullOrWhiteSpace($fileDat)) { {%- br %}
            {%- br %}
            if(${env:UNICODE_SUPPORT} -eq "TRUE") { {%- br %}
                {%- br %}
                $format  = New-Object Text.UTF8Encoding
                {%- br %}
            }{%- br %}
            else { {%- br %}
                {%- br %}
                $format  = New-Object Text.ASCIIEncoding{%- br %}
                {%- br %}
            } {%- br %}
            {%- br %}
            $odbcReader = $odbcCommand.ExecuteReader(){%- br %}
            $columnCount = $odbcReader.FieldCount{%- br %}
            $dataFile = "${env:WSL_WORKDIR}\${fileDat}"{%- br %}
            $sb  = New-Object Text.StringBuilder{%- br %}
            $fileStream = New-Object IO.StreamWriter($DataFile,$false,$Format){%- br %}
            $fileStream.AutoFlush = $true{%- br %}
            $rowCount = 0{%- br %}
            $fileDelim = '|'{%- br %}
            {%- br %}
            while($odbcReader.Read()) { {%- br %}
                {%- br %}
                [System.Collections.ArrayList]$data = @(){%- br %}
                {%- br %}
                for($x = 0; $x -lt $columnCount; $x++){ {%- br %}
                    {%- br %}
                    if($odbcReader.IsDBNull($x)) { {%- br %}
                        {%- br %}
                        [void]$data.Add(""){%- br %}
                        {%- br %}
                    } {%- br %}
                    else { {%- br %}
                        {%- br %}
                        [void]$data.Add($odbcReader.GetValue($x).ToString().Replace([regex]::Escape($fileDelim),'')){%- br %}
                        {%- br %}
                    }{%- br %}
                }{%- br %}
                {%- br %}
                [void]$sb.clear(){%- br %}
                {%- br %}
                $row = $data.ToArray(){%- br %}
                $work = [string]::Join($fileDelim,$row){%- br %}
                $work = [regex]::Replace($work,[regex]::Escape($fileDelim),$fileDelim){%- br %}
                $work = $work.Replace("`n"," "){%- br %}
                $work = $work.Replace("`r",""){%- br %}
                [void]$sb.Append($work){%- br %}
                {%- br %}
                $fileStream.WriteLine($sb.ToString()){%- br %}
                $rowCount++{%- br %}
                {%- br %}
            }{%- br %}
            {%- br %}
            $fileStream.Dispose(){%- br %}
            $odbcConn.Dispose(){%- br %}
            return $rowCount{%- br %}
            {%- br %}
        }{%- br %}
        else { {%- br %}
            {%- br %}
            $dataTable = New-Object Data.DataTable{%- br %}
            $null = (New-Object Data.odbc.odbcDataAdapter($odbcCommand)).fill($dataTable){%- br %}
            $odbcConn.Dispose(){%- br %}
            return , $dataTable{%- br %}
            {%- br %}
        }{%- br %}
    } {%- br %}
    catch { {%- br %}
        {%- br %}
        [Console]::WriteLine("-2"){%- br %}
        [Console]::WriteLine("Export failed"){%- br %}
        $logStream.WriteLine($_.Exception.Message){%- br %}
        $logStream.WriteLine($_.InvocationInfo.PositionMessage){%- br %}
        Print-Log{%- br %}
        exit{%- br %}
        {%- br %}
    }{%- br %}
}{%- br %}
{%- br %}
Function Replace-WslTags($stuff) { {%- br %}
    {%- br %}
    if([string]::IsNullOrWhitespace($stuff)) { {%- br %}
        return $stuff{%- br %}
    }{%- br %}
    {%- br %}
    if($stuff.Contains('$SEQUENCE$')) { {%- br %}
        $stuff = $stuff.Replace('$SEQUENCE$',${env:WSL_SEQUENCE}){%- br %}
    }{%- br %}
    {%- br %}
    if([regex]::IsMatch($stuff,'\$.+\$')) { {%- br %}
        # If $stuff contains two or more $s and the $SEQUENCE$ string is not detected
        # or has already been replaced then we assume a date
        while([regex]::IsMatch($stuff,'\$.+\$')) { {%- br %}
            $startPos = $stuff.IndexOf('$'){%- br %}
            {%- br %}
            $work = $stuff.SubString($startPos + 1){%- br %}
            $endPos = $work.IndexOf('$'){%- br %}
            {%- br %}
            $suppliedFormat = $work.SubString(0, $endPos){%- br %}
            $dateFormat = $suppliedFormat.Replace('YY','yy').Replace('DD','dd').Replace('HH','hh').Replace('MI','mm').Replace('SS','ss'){%- br %}
            $dateString = (Get-Date -f $dateFormat){%- br %}
            $replaceString = '$' + $suppliedFormat + '$'{%- br %}
            {%- br %}
            $stuff = $stuff.Replace($replaceString,$dateString){%- br %}
        }{%- br %}
    }{%- br %}
    {%- br %}
    if($stuff.indexOf('$') -ne -1) { {%- br %}
        ${env:warn} = $true{%- br %}
        $logStream.WriteLine("Unclosed '$' tag in '$stuff'"){%- br %}
        $logStream.WriteLine("Unclosed '$' will be removed"){%- br %}
        $stuff = $stuff.Replace('$',''){%- br %}
    }{%- br %}
    return $stuff.Trim(){%- br %}
}{%- br %}
# Parse Notes to get AWS settings{%- br %}
function ParseNote { {%- br %}
    param ({%- br %}
        $noteName,{%- br %}
        $notes{%- br %}
    ){%- br %}
    $startPos = $notes.IndexOf($noteName){%- br %}
    {%- br %}
    if($startPos -eq -1){ {%- br %}
        return ""{%- br %}
    }{%- br %}
    {%- br %}
    $work = $notes.Substring($startPos){%- br %}
    $endPos = $work.IndexOf("`r`n"){%- br %}
    {%- br %}
    if($endPos -eq -1){ {%- br %}
        {%- br %}
        return ""{%- br %}
    }{%- br %}
    {%- br %}
    $work = $work.Substring(0,$endPos){%- br %}
    $work = $work.Replace(${noteName} + "=",""){%- br %}
    return $work.Trim(){%- br %}
}{%- br %}
# Gzip function{%- br %}
function Gzip-File { {%- br %}
    param({%- br %}
        [string]$inFile = $(throw "No input file specified"),{%- br %}
        [string]$outFile = $inFile + ".gz",{%- br %}
        [switch]$removeOriginal = $false{%- br %}
    ){%- br %}
    {%- br %}
    $input = New-Object IO.FileStream $InFile, ([IO.FileMode]::Open), ([IO.FileAccess]::Read), ([IO.FileShare]::Read){%- br %}
    $output = New-Object IO.FileStream $OutFile, ([IO.FileMode]::Create), ([IO.FileAccess]::Write), ([IO.FileShare]::None){%- br %}
    $gzipStream = New-Object IO.Compression.GzipStream $Output, ([IO.Compression.CompressionLevel]::Fastest){%- br %}
    {%- br %}
    $input.CopyTo($gzipStream){%- br %}
    {%- br %}
    $gzipStream.Dispose(){%- br %}
    $output.Dispose(){%- br %}
    $input.Dispose(){%- br %}
    {%- br %}
    if($removeOriginal) { {%- br %}
        Remove-Item -Path $inFile{%- br %}
    }{%- br %}
    {%- br %}
    return (gci $outFile).Name{%- br %}
}{%- br %}
{%- br %}
# Main export function{%- br %}
function Export-Data { {%- br %}
    # Get the debug mode{%- br %}
    $mDebugSQL = "SELECT CASE LTRIM(RTRIM(ISNULL(NULLIF((SELECT UPPER(dss_parameter_value) {%- br %}
                                                         FROM dss_parameter{%- br %}
                                                         WHERE dss_parameter_name = 'SNOWFLAKE_RUN_DEBUG_MODE'),''),'FALSE'))) {%- br %}
                         WHEN 'TRUE' THEN 'TRUE'{%- br %}
                         ELSE 'FALSE'{%- br %}
                         END Debug"{%- br %}
    $mDebugResult = Get-ODBC-Data $mDebugSQL ${env:WSL_META_DSN} ${env:WSL_META_USER} ${env:WSL_META_PWD}{%- br %}
    ${env:DEBUG} = $mDebugResult.Debug{%- br %}
    {%- br %}
    # Get the target database credentials and the connection attributes from the metadata{%- br %}
    $mNotesSQL = "SELECT SUBSTRING(dc_attributes,CAST(CHARINDEX('Notes~',dc_attributes)+12 AS INTEGER),CAST(SUBSTRING(dc_attributes,CHARINDEX('Notes~',dc_attributes)+7,4) AS INTEGER)) AS Notes{%- br %}
                  FROM ws_dbc_connect{%- br %}
                  JOIN ws_dbc_target ON dc_obj_key = dt_connect_key{%- br %}
                  JOIN ws_obj_object ON oo_target_key = dt_target_key{%- br %}
                  WHERE oo_name = '${env:WSL_EXP_TABLE}'"{%- br %}
    $mNotesResult = Get-ODBC-Data $mNotesSQL ${env:WSL_META_DSN} ${env:WSL_META_USER} ${env:WSL_META_PWD}{%- br %}
    {%- br %}
    $notes = $mNotesResult.Notes{%- br %}
    $notes += "`r`n"{%- br %}
    {%- br %}
    ${env:ACCESS_KEY}        = ParseNote -noteName "ACCESS_KEY" -notes $notes{%- br %}
    ${env:SECRET_KEY}        = ParseNote -noteName "SECRET_KEY" -notes $notes{%- br %}
    ${env:SEND_FILES_ZIPPED} = ParseNote -noteName "SEND_FILES_ZIPPED" -notes $notes{%- br %}
    ${env:SNOWSQL_ACCOUNT}   = ParseNote -noteName "SNOWSQL_ACCOUNT" -notes $notes{%- br %}
    ${env:SNOWSQL_DATABASE}  = ParseNote -noteName "SNOWSQL_DATABASE" -notes $notes{%- br %}
    ${env:SNOWSQL_SCHEMA}    = ParseNote -noteName "SNOWSQL_SCHEMA" -notes $notes{%- br %}
    ${env:SNOWSQL_WAREHOUSE} = ParseNote -noteName "SNOWSQL_WAREHOUSE" -notes $notes{%- br %}
    ${env:UNICODE_SUPPORT}   = ParseNote -noteName "UNICODE_SUPPORT" -notes $notes{%- br %}
    ${env:SEND_FILES_ZIPPED} = ParseNote -noteName "SEND_FILES_ZIPPED" -notes $notes{%- br %}
    {%- br %}
    $snowsqlCredentialsSql = "SELECT dc_extract_userid usr, dc_extract_pwd pwd{%- br %}
                              FROM ws_dbc_connect{%- br %}
                              JOIN ws_dbc_target ON dc_obj_key = dt_connect_key{%- br %}
                              JOIN ws_obj_object ON oo_target_key = dt_target_key{%- br %}
                              WHERE oo_name = '${env:WSL_EXP_TABLE}'"{%- br %}
    $snowsqlCredentials = Get-ODBC-Data $snowsqlCredentialsSql ${env:WSL_META_DSN} ${env:WSL_META_USER} ${env:WSL_META_PWD}{%- br %}
    {%- br %}
    ${env:SNOWSQL_USER} = $snowsqlCredentials.usr{%- br %}
    ${env:SNOWSQL_PWD}  = $snowsqlCredentials.pwd{%- br %}
    {%- br %}
    if(${env:DEBUG} -eq "TRUE") { {%- br %}
        $logStream.WriteLine("=================== EXPORT OPTIONS ==================="){%- br %}
        $logStream.WriteLine("Specified Export Name:       " + ${env:WSL_EXP_NAME}){%- br %}
        $logStream.WriteLine("Specified Work Dir:          " + ${env:WSL_WORKDIR}){%- br %}
        $logStream.WriteLine("Specified Sequence:          " + ${env:WSL_SEQUENCE}){%- br %}
        $logStream.WriteLine("Specified Metadata ODBC DSN: " + ${env:WSL_META_DSN}){%- br %}
        $logStream.WriteLine("Specified Metadata Username: " + ${env:WSL_META_USER}){%- br %}
        $logStream.WriteLine("Specified Metadata Password: " + (New-Object string ('*', ${env:WSL_META_PWD}.Length))){%- br %}
        $logStream.WriteLine(""){%- br %}
        if($runMode -eq 'S3') {
            $logStream.WriteLine("=================== CONNECTION OPTIONS ==================="){%- br %}
            $logStream.WriteLine("Access Key:                  " + (New-Object string ('*', ${env:ACCESS_KEY}.Length))){%- br %}
            $logStream.WriteLine("Secret Key:                  " + (New-Object string ('*', ${env:SECRET_KEY}.Length))){%- br %}
            $logStream.WriteLine(""){%- br %}
        }
        $logStream.WriteLine("=================== MODES ==================="){%- br %}
        $logStream.WriteLine("Specified Debug Mode:        " + ${env:DEBUG}){%- br %}
        $logStream.WriteLine("Specified Run Mode:          " + $runMode){%- br %}
        $logStream.WriteLine("Unicode Extract:             " + ${env:UNICODE_SUPPORT}){%- br %}
        $logStream.WriteLine(""){%- br %}
        if($runMode -eq 'Database') {
            $logStream.WriteLine("=================== SOURCE TABLE INFO ==================="){%- br %}
            $logStream.WriteLine("Source Where:                " + '{{ table.exportInfo.whereClause }}'){%- br %}
            $logStream.WriteLine(""){%- br %}
            $logStream.WriteLine("=================== SOURCE DB INFO ==================="){%- br %}
            $logStream.WriteLine("ODBC Source DSN:             " + ${env:WSL_SRC_DSN}){%- br %}
            $logStream.WriteLine("ODBC Source Username:        " + ${env:WSL_SRC_USER}){%- br %}
            $logStream.WriteLine("ODBC Source Password:        " + (New-Object string ('*', ${env:WSL_SRC_PWD}.Length))){%- br %}
            $logStream.WriteLine(""){%- br %}
        }
    }{%- br %}
    {%- br %}
    $colSql = "SELECT ISNULL(NULLIF(CAST(ec_transform_code AS VARCHAR(4000)),''), ec_src_table + '.' + ec_src_column + ' ' + ec_col_name) COLS{%- br %}
               FROM ws_export_col{%- br %}
               JOIN ws_export_tab{%- br %}
               ON ec_obj_key = et_obj_key{%- br %}
               WHERE et_table_name = '${env:WSL_EXP_NAME}'{%- br %}
               ORDER BY ec_order"{%- br %}
    {%- br %}
    $colRes = Get-ODBC-Data $colSql ${env:WSL_META_DSN} ${env:WSL_META_USER} ${env:WSL_META_PWD}{%- br %}
    {%- br %}
    $columns = $colRes.COLS{%- br %}
    {%- br %}
    $extractSql = "SELECT "{%- br %}
    $extractSql += [string]::Join(",`r`n       ",$columns){% br %}
    $extractSql += "`r`nFROM " + ${env:WSL_EXP_FULLNAME} + " " + ${env:WSL_EXP_TABLE}{%- br %}
    {%- if table.exportInfo.whereClause != "" %}
    $extractSql += "`r`n" + '{{ table.exportInfo.whereClause }}'{%- br %}    
    {%- endif %}
    {%- br %}
    if( ! ${env:WSL_WORKDIR}.endsWith('\')) { {%- br %}
        ${env:WSL_WORKDIR} += '\'{%- br %}
    }{%- br %}
    if($runMode -eq "Windows") { {%- br %}
        $path = '{{ table.exportInfo.file.path }}'{%- br %}
        if( ! $path.endsWith('\')) { {%- br %}
            $path += '\'{%- br %}
        }{%- br %}
        $path = Replace-WslTags $path{%- br %}
        $file = '{{ table.exportInfo.file.name }}'{%- br %}
        $file = Replace-WslTags $file{%- br %}
    }{%- br %}
    else { {%- br %}
        $path = ${env:WSL_SERVER}{%- br %}
        if( ! $path.endsWith('/')) { {%- br %}
            $path += '/'{%- br %}
        }{%- br %}
        $file = '{{ table.exportInfo.file.name }}'{%- br %}
        $file = Replace-WslTags $file{%- br %}
        $fileDat = $path + $file{%- br %}
    }{%- br %}
    {%- br %}
    if($runMode -ne "S3") { {%- br %}
        $logStream.WriteLine("================= SNOWSQL ================="){%- br %}
        $deleteRes = snowsql -q "remove @~/${file};"  -o friendly=false -o remove_comments=true -o header=false -o output_format=csv -o timing=false{%- br %}
        {%- br %}
        $copyStmt = "COPY INTO @~/$file FROM ( `r`n$extractSql `r`n) {{ table.exportInfo.options }}"{%- br %}
        $snowsqlExport = "snowsql -q `"$copyStmt`" -o friendly=false -o remove_comments=true -o output_format=csv -o timing=false"{%- br %}
        $maskedExport = $snowsqlExport{%- br %}
        {%- br %}
        $logStream.WriteLine("Export:    " + $maskedExport){%- br %}
        $exportRes = & $([ScriptBlock]::Create($snowsqlExport)){%- br %}
        try { {%- br %}
            $exportRes = $exportRes | Select-Object -Last 2 | ConvertFrom-CSV{%- br %}
        } catch {}{%- br %}
        if($exportRes.rows_unloaded -ne $null) { {%- br %}
            $rowsExported = $exportRes.rows_unloaded{%- br %}
        }{%- br %}
        else { {%- br %}
            foreach($line in $exportRes) { {%- br %}
                $logStream.WriteLine($line){%- br %}
            }{%- br %}
            [Console]::WriteLine("-2"){%- br %}
            [Console]::WriteLine("Export failed"){%- br %}
            Print-Log{%- br %}
            exit{%- br %}
        }{%- br %}
        {%- br %}
        $snowsqlGet = "snowsql -q `"GET @~/$file file://${path};`" -o friendly=false -o remove_comments=true -o output_format=csv -o timing=false"{%- br %}
        $logStream.WriteLine("GET:    " + $snowsqlGet){%- br %}
        $getRes = & $([ScriptBlock]::Create($snowsqlGet)){%- br %}
        try { {%- br %}
            $getRes = $getRes | Select-Object -Last 2 | ConvertFrom-CSV{%- br %}
        } catch {}{%- br %}
        {%- br %}
        $getFile = $getRes.file{%- br %}
        $getStatus = $getRes.status{%- br %}
        $getMessage = $getRes.message{%- br %}
        if($getStatus -eq "DOWNLOADED") { {%- br %}
            $deleteRes = snowsql -q "remove @~/${file};"  -o friendly=false -o remove_comments=true -o header=false -o output_format=csv -o timing=false{%- br %}
            $logStream.WriteLine("File '$file' downloaded as '${path}${getFile}'"){%- br %}
            if( ! [string]::IsNullOrWhiteSpace($getMessage)) { {%- br %}
                $logStream.WriteLine("Message returned from GET call: $getMessage"){%- br %}
            }{%- br %}
            $logStream.WriteLine("$rowsExported rows exported"){%- br %}
            [Console]::WriteLine("1"){%- br %}
            [Console]::WriteLine("Export successful. $rowsExported rows exported"){%- br %}
        }{%- br %}
        else { {%- br %}
            $logStream.WriteLine("Status returned from GET call: $getStatus"){%- br %}
            if( ! [string]::IsNullOrWhiteSpace($getMessage)) { {%- br %}
                $logStream.WriteLine("Message returned from GET call: $getMessage"){%- br %}
            }{%- br %}
            [Console]::WriteLine("-2"){%- br %}
            [Console]::WriteLine("Export Failed"){%- br %}
            Print-Log{%- br %}
            exit{%- br %}
        }{%- br %}
    }{%- br %}
    else { {%- br %}
        $logStream.WriteLine("================= SNOWSQL ================="){%- br %}
        $copyStmt = "COPY INTO $fileDat FROM ( `r`n$extractSql `r`n) CREDENTIALS = (AWS_KEY_ID='${env:ACCESS_KEY}' AWS_SECRET_KEY='${env:SECRET_KEY}') {{ table.exportInfo.options }}"{%- br %}
        $snowsqlExport = "snowsql -q `"$copyStmt`" -o friendly=false -o remove_comments=true -o output_format=csv -o timing=false"{%- br %}
        $maskedExport = $snowsqlExport{%- br %}
        if( ! [string]::IsNullOrWhiteSpace(${env:ACCESS_KEY})) { {%- br %}
            $maskedExport = $maskedExport.Replace(${env:ACCESS_KEY},(New-Object String ('*', ${env:ACCESS_KEY}.Length))){%- br %}
        }{%- br %}
        if( ! [string]::IsNullOrWhiteSpace(${env:SECRET_KEY})) { {%- br %}
            $maskedExport = $maskedExport.Replace(${env:SECRET_KEY},(New-Object String ('*', ${env:SECRET_KEY}.Length))){%- br %}
        }{%- br %}
        {%- br %}
        $logStream.WriteLine("Export:    " + $maskedExport){%- br %}
        $exportRes = & $([ScriptBlock]::Create($snowsqlExport)){%- br %}    
        try { {%- br %}
            $exportRes = $exportRes | Select-Object -Last 2 | ConvertFrom-CSV{%- br %}
        } catch {}{%- br %}
        if($exportRes.rows_unloaded -ne $null) { {%- br %}
            $rowsExported = $exportRes.rows_unloaded{%- br %}
            $logStream.WriteLine("$rowsExported rows exported"){%- br %}
            [Console]::WriteLine("1"){%- br %}
            [Console]::WriteLine("Export successful. $rowsExported rows exported"){%- br %}
        }{%- br %}
        else { {%- br %}
            foreach($line in $exportRes) { {%- br %}
                $logStream.WriteLine($line){%- br %}
            }{%- br %}
            [Console]::WriteLine("-2"){%- br %}
            [Console]::WriteLine("Export failed"){%- br %}
            Print-Log{%- br %}
            exit{%- br %}
        }{%- br %}
    }{%- br %}
}{%- br %}
{%- br %}
try { {%- br %}
    if([string]::IsNullOrWhiteSpace(${env:WSL_SERVER})) { {%- br %}
        $runMode = "Windows"
    }{%- br %}
    else { {%- br %}
        if((${env:WSL_SERVER}).indexOf("s3://") -eq -1) { {%- br %}
            $runMode = "Windows"{%- br %}
        }{%- br %}
        else { {%- br %}
            $runMode = "S3"{%- br %}
        }{%- br %}
    }{%- br %}
    ${env:warn} = $false{%- br %}
    # Set Audit file name{%- br %}
    $fileAud = "${env:WSL_WORKDIR}\${env:WSL_EXP_NAME}_${env:WSL_SEQUENCE}.txt"{%- br %}
    $logStream = New-Object IO.StreamWriter($FileAud,$false){%- br %}
    $logStream.AutoFlush = $true{%- br %}
    {%- br %}
    Export-Data{%- br %}
    {%- br %}
    Print-Log{%- br %}
    exit{%- br %}
}{%- br %}
catch { {%- br %}
    [Console]::WriteLine("-2"){%- br %}
    [Console]::WriteLine("Export failed"){%- br %}
    $logStream.WriteLine($_.Exception.Message){%- br %}
    $logStream.WriteLine($_.InvocationInfo.PositionMessage){%- br %}
    Print-Log{%- br %}
    exit{%- br %}
}{%- br %}
