{# -- TemplateVersion:001 MinVersion:8510 MaxVersion:* TargetType:Snowflake ModelType:* TemplateType:Python                                                 -- #}
{#                                                                                                                                                          -- #}
{# --    (c) WhereScape Ltd 2020. WhereScape Ltd permits you to copy this Template solely for use with the RED software, and to modify this Template        -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : Snowflake                                                                                                                        -- #}
{# -- Template Name      : wsl_snowflake_pyscript_export                                                                                                    -- #}
{# -- RED Version        : 8.5.1.0                                                                                                                          -- #}
{# -- Description        : This template creates a Snowflake script specifically                                                                            -- #}
{# --                      specifically designed for all RED exports                                                                                        -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{#  Notes / History                                                                                                                                         -- #}
{# --                                                                                                                                                       -- #}
#=============================================================================={%- br %}
# DBMS Name        :    {{table.dbType.name}}{%- br %}
# Template         :    {{settings.template.name}}{%- br %}
# Template Version :    8.5.1.0{%- br %}
# Description      :    Export {{table.name}}{%- br %}
# Generated by     :    {{env.productVersion}}{%- br %}
# Generated for    :    {{env.licensedTo}}{%- br %}
# Generated on     :    {{env.currentTimestamp}}{%- br %}
# Author           :    {{env.userName}}{%- br %}
#=============================================================================={%- br %}
# Notes / History{%- br %}
{%- br %}
import os{%br%}
import re{%br%}
import gzip{%br%}
import shutil{%br%}
import sys{%br%}
from datetime import datetime{%br%}
import glob{%br%}
import pyodbc{%br%}
import snowflake.connector{%br%}
import time{%br%}
sys.path.append('C:\ProgramData\WhereScape\Modules\WslPython'){%br%}
import WslPythonCommon{%br%}

def PrintLog(fileAud):{%br%}
    with open(fileAud, 'r') as write_to_console:{%br%}
     print(write_to_console.read()){%br%}


def ReplaceWslTags(stuff):{%br%}

    if '$SEQUENCE$' in stuff:{%br%}
        stuff = stuff.replace('$SEQUENCE$',str(os.environ["WSL_SEQUENCE"])){%br%}
    if re.findall(r'\$(.+?)\$',stuff)!=[]:{%br%}
        # If stuff contains two or more $s and the $SEQUENCE$ string is not detected{%br%}
        # or has already been replaced then we assume a date{%br%}
            suppliedFormat = re.findall(r'\$(.+?)\$',stuff)[0]{%br%}
            dateFormat = suppliedFormat.replace('YYYY','%Y').replace('MMM','%b').replace('MM','%m').replace('DD','%d').replace('HH','%H').replace('MI','%M').replace('SS','%S'){%br%}
            dateString = datetime.today().strftime(dateFormat){%br%}
            replaceString = '$' + suppliedFormat + '$'{%br%}
            stuff = stuff.replace(replaceString,dateString){%br%}

    if stuff.find('$') != -1:{%br%}
       os.environ["warn"] = True{%br%}
       print("Unclosed '$' tag in " +stuff){%br%}
       print("Unclosed '$' will be removed"){%br%}
       stuff = stuff.replace('\$',''){%br%}
    return stuff.strip(){%br%}

def GzipFile({%br%}
        inFile="No input file specified",{%br%}
        outFile=".gz",{%br%}
        removeOriginal=True{%br%}
    ):{%br%}

    with open(inFile, 'rb') as f_in:{%br%}
        with gzip.open(os.path.splitext(inFile)[0]+outFile, 'wb') as f_out:
            shutil.copyfileobj(f_in, f_out){%br%}

    if removeOriginal==True:{%br%}
        os.remove(os.path.splitext(inFile)[0]+".txt"){%br%}

    return ((inFile+outFile))
{%  if (table.exportInfo.compressAfterExport  == true)  %}
# File compress function for windows file loads
def ArchiveFiles(srcFile,auditFile):{%- br %}
    logStream= open('%s' % (auditFile),'a+'){%- br %}
    try:
        utilityPath=r"{{table.exportInfo.compressUtility.path}} ".replace("\ ","").strip(){%- br %}
        separator="\\\\"{%- br %}
        utilityPath=utilityPath.split("\\"){%- br %}
        utilityPath=separator.join(utilityPath){%- br %}
        utilityName='{{table.exportInfo.compressUtility.name}}'{%- br %}
        utilityParameters='{{table.exportInfo.compressParameters}}'{%- br %}
        utilityParameters=utilityParameters.replace('$EXPFILE$',srcFile){%- br %}
        {%  if ("{{table.exportInfo.compressUtility.path}}"  == "")  %}{%- br %}
        GzipFile(srcFile,'.gz',True){%- br %}
        logStream.write("File Compressed using Gzip"){%- br %}
				{%  elseif ("{{table.exportInfo.compressUtility.path}}"  != "")  %}{%- br %}
        import subprocess{%- br %}
        outputCmd=subprocess.check_output(os.path.join(utilityPath,utilityName) +" "+ utilityParameters, universal_newlines=True){%- br %}
        logStream.write("\n"+outputCmd){%- br %}
        logStream.write("\nFile Compressed using command :"+os.path.join(utilityPath,utilityName) +" "+ utilityParameters){%- br %}
        {%- endif %}{%- br %}
    except Exception as inst:
            print("-2")
            print(inst.args)
            print("\nCompression Failed")
            logStream.close()
            PrintLog(logStream)
    logStream.close(){%- br %}
{%- endif %}
{%  if (table.exportInfo.triggerFile.path != "") and ( table.exportInfo.triggerFile.name != "")  %}{%- br %}
# Trigger File creation function for windows file loads
def CreateTriggerFile(auditFile): {%- br %}
    logStream= open('%s' % (auditFile),'a+'){%- br %}
    trgFileDelim = '{{ table.exportInfo.triggerFile.fieldDelimiter }}'{%- br %}
    if trgFileDelim=="":
        trgFileDelim = '|'

    trgFilePath = r'{{ table.exportInfo.triggerFile.path }} '.replace("\ ","").replace(" ",""){%- br %}
    if trgFilePath =="":
       trgFilePath = os.environ["WSL_WORKDIR"]

    trgFileName = '{{ table.exportInfo.triggerFile.name }}'{%- br %}
    trgFileName = ReplaceWslTags(trgFileName){%- br %}
    if trgFileName=="":
        trgFileName = str(os.environ["WSL_EXP_NAME"])+"_"+str(os.getenv('WSL_SEQUENCE'))+".trg"

    trgFile = os.path.join(trgFilePath,trgFileName){% br %}
    mExpOptions = '{{ table.exportInfo.options.Replace("'","'''") }}'{%- br %}
    trgSelectStmt = """
    SELECT {%- br %}
    {%-  if (table.exportInfo.triggerParameter1 == "Row Count")%}
      count(*){%- br %}
    {%- elseif (table.exportInfo.triggerParameter1 != "" ) %}
      {{ table.exportInfo.triggerParameter1 }}{%- br %}
    {%- endif %}
    {%-  if (table.exportInfo.triggerParameter2 == "Row Count")%}
    , count(*){%- br %}
    {%- elseif (table.exportInfo.triggerParameter2 != "" ) %}
    , {{ table.exportInfo.triggerParameter2 }}{%- br %}
    {%- endif %}
    {%-  if (table.exportInfo.triggerParameter3 == "Row Count")%}
    , count(*){%- br %}
    {%- elseif (table.exportInfo.triggerParameter3 != "" ) %}
    , {{ table.exportInfo.triggerParameter3 }}{%- br %}
    {%- endif %}
    FROM """+str(os.environ["WSL_EXP_FULLNAME"])+" "+str(os.environ["WSL_EXP_TABLE"]){%- br %}
{%- br %}
    SFConnectionString = snowflake.connector.connect(
                user=str(os.getenv('WSL_SRC_USER')),
                password=str(os.getenv('WSL_SRC_PWD')),
                account=os.environ["SNOWSQL_ACCOUNT"],
                warehouse=os.environ["SNOWSQL_WAREHOUSE"],
                database=os.environ["SNOWSQL_DATABASE"],
                schema=os.environ["SNOWSQL_SCHEMA"]
                )
    deleteRes = "remove @~/"+trgFileName+";"{% br %}
    SFconn = SFConnectionString.cursor(){% br %}
    SFconn.execute(deleteRes){% br %}
    SFconn.close(){% br %}
    copyStmt = """
      COPY INTO @~/"""+trgFileName+"""
      FROM ( """+ trgSelectStmt +""")FILE_FORMAT = (TYPE = 'CSV' FIELD_DELIMITER = '|' COMPRESSION = NONE) single=true;"""
    SFconn = SFConnectionString.cursor()
    maskedTrgExport=SFconn.execute(copyStmt).fetchall()
    SFconn.close()
    {%- br %}
    logStream.write("\nTrigger File:    " + trgFileName)
      {%- br %}
    if maskedTrgExport[0][0] != 0:{%- br %}
            rowsTrgExported = maskedTrgExport[0][0]{%- br %}
    else: {%- br %}
            print("-2"){%- br %}
            print("\nExport failed"){%- br %}
            PrintLog(logStream){%- br %}
    snowsqlGet = "GET @~/"+trgFileName+" file://"+trgFilePath+";"{%- br %}
    logStream.write("\nGET:    " + snowsqlGet){%- br %}
    SFconn = SFConnectionString.cursor(){% br %}
    getRes=SFconn.execute(snowsqlGet).fetchall(){% br %}
    SFconn.close(){% br %}
    getFile = getRes[0][0]{%- br %}
    getStatus = getRes[0][2]{%- br %}
    getMessage = getRes[0][3]{%- br %}
    if getStatus == "DOWNLOADED":{%- br %}
          deleteRes = "remove @~/"+trgFileName+";"{%- br %}
          SFconn = SFConnectionString.cursor()
          SFconn.execute(deleteRes)
          SFconn.close()
          if getMessage!="": {%- br %}
              logStream.write("\nMessage returned from GET call: "+getMessage){%- br %}
          print("1"){%- br %}
          logStream.write("\nTrigger File "+trgFile+" created"+"\n"){%- br %}
    else:{%- br %}
          logStream.write("\nStatus returned from GET call:"+ getStatus){%- br %}
          if getMessage !="":{%- br %}
              logStream.write("\nMessage returned from GET call: " +getMessage){%- br %}
          print("-2"){%- br %}
          print("Trigger File Creation Failed"){%- br %}
          PrintLog(logStream){%- br %}
    logStream.close()
{%- br %}
{%- endif %}
def ExportData(runMode):{%br%}
    os.environ["DEBUG"]          = WslPythonCommon.GetExtendedProperty("SF_DEBUG_MODE",str(os.environ["WSL_EXP_NAME"])){%br%}
    os.environ["ACCESS_KEY"]     = WslPythonCommon.GetExtendedProperty("SF_ACCESS_KEY",str(os.environ["WSL_EXP_TABLE"])){%br%}
    os.environ["SECRET_KEY"]     = WslPythonCommon.GetExtendedProperty("SF_SECRET_KEY",str(os.environ["WSL_EXP_TABLE"])){%br%}
    os.environ["SEND_FILES_ZIPPED"]  = WslPythonCommon.GetExtendedProperty("SF_SEND_FILES_ZIPPED",str(os.environ["WSL_EXP_TABLE"])){%br%}
    os.environ["SNOWSQL_ACCOUNT"]= WslPythonCommon.GetExtendedProperty("SF_SNOWSQL_ACCOUNT",str(os.environ["WSL_EXP_TABLE"])){%br%}
    os.environ["SNOWSQL_DATABASE"]  = WslPythonCommon.GetExtendedProperty("SF_SNOWSQL_DATABASE",str(os.environ["WSL_EXP_TABLE"])){%br%}
    os.environ["SNOWSQL_SCHEMA"] = WslPythonCommon.GetExtendedProperty("SF_SNOWSQL_SCHEMA",str(os.environ["WSL_EXP_TABLE"])){%br%}
    os.environ["SNOWSQL_WAREHOUSE"] = WslPythonCommon.GetExtendedProperty("SF_SNOWSQL_WAREHOUSE",str(os.environ["WSL_EXP_TABLE"])){%br%}
    os.environ["SNOWSQL_USER"] = os.environ["WSL_SRC_USER"]{%br%}
    os.environ["SNOWSQL_PWD"]  = os.environ["WSL_SRC_PWD"]{%br%}

    filePath = os.environ["WSL_WORKDIR"]{%br%}
    auditLog=str(os.environ["WSL_EXP_TABLE"])+"_"+str(os.getenv('WSL_SEQUENCE'))+".txt"{%br%}
    logStream = open(os.path.join(filePath,auditLog), 'a+'){%br%}

    if str(os.getenv('DEBUG'))== "TRUE":{%br%}
         logStream.write("=================== EXPORT OPTIONS ===================\n"){%br%}
         logStream.write("Specified Export Table:        " + str(os.environ["WSL_EXP_TABLE"])+'\n'){%br%}
         logStream.write("Specified Work Dir:          " + str(os.getenv('WSL_WORKDIR'))+'\n'){%br%}
         logStream.write("Specified Sequence:          " + str(os.getenv('WSL_SEQUENCE'))+'\n'){%br%}
         logStream.write("Specified Metadata ODBC DSN: " + str(os.getenv('WSL_META_DSN'))+'\n'){%br%}
         logStream.write("Specified Metadata Username: " + str(os.getenv('WSL_META_USER'))+'\n'){%br%}
         logStream.write("Specified Metadata Password: " + ('*'*len(str(os.getenv('WSL_META_PWD'))))+'\n')#Add password character{%br%}
         logStream.write("")
         if runMode == 'S3':{%br%}
             logStream.write("=================== CONNECTION OPTIONS ==================="+'\n'){%br%}
             logStream.write("Access Key:                  " +  ('*'*len(str(os.getenv('ACCESS_KEY'))))+'\n')#Add password character{%br%}
             logStream.write("Secret Key:                  " +  ('*'*len(str(os.getenv('SECRET_KEY'))))+'\n')#Add password character{%br%}
             logStream.write("")
         logStream.write("=================== MODES ==================="+'\n'){%br%}
         logStream.write("Specified Debug Mode:        " + str(os.getenv('DEBUG'))+'\n'){%br%}
         logStream.write("Specified Run Mode:          " + runMode+'\n'){%br%}
         logStream.write("Unicode Extract:             " + str(os.getenv('UNICODE_SUPPORT'))+'\n'){%br%}
         logStream.write(""){%br%}

         if runMode == 'Database':{%br%}
             logStream.write("=================== SOURCE TABLE INFO ==================="+'\n'){%br%}
             logStream.write("Source Where:               " +  '{{ table.exportInfo.whereClause }}'+'\n'){%br%}
             logStream.write(""+'\n'){%br%}
             logStream.write("=================== SOURCE DB INFO ==================="+'\n'){%br%}
             logStream.write("ODBC Source DSN:             " + str(os.getenv('WSL_SRC_DSN'))+'\n'){%br%}
             logStream.write("ODBC Source Username:        " + str(os.getenv('WSL_SRC_USER'))+'\n'){%br%}
             logStream.write("ODBC Source Password:        " + ('*'*len(str(os.getenv('WSL_SRC_PWD'))))+'\n')#Add password character{%br%}
             logStream.write("")
    {%- br %}
    logStream.write("================= EXTRACT SQL =====================\n"){%br%}
    {%- set empty = "" %}
    extractSql = """
     SELECT
      {%- from table.columns as column where (column.sourceColumn is defined or column.transform | trim != "") %}
        {%- if not loop.first %}    , {% else %} {% endif %}
        {%- if column.transform | trim != "" %}
          {{- column.source }}
        {%- else %}
          {%- if column.sourceTable is defined %}
            {%- fetch column.sourceTable %}
            {{- column.sourceTable.name }}.
          {%- endif %}
          {%- if column.sourceColumn is defined %}
            {{- column.sourceColumn.name }}
          {%- endif %}
        {%- endif %}
        {%- br %}
      {%- endfrom %}
    FROM """+str(os.environ["WSL_EXP_FULLNAME"])+" "+str(os.environ["WSL_EXP_TABLE"])+"""
     {%- from table.exportInfo.whereClause | lines as whereLine %}
    {{ whereLine }}{% br %}
    {%- endfrom %}
"""{%- br %}
   {%- br %}
    logStream.write(extractSql)
    SFConnectionString = snowflake.connector.connect(
                user=str(os.getenv('WSL_SRC_USER')),
                password=str(os.getenv('WSL_SRC_PWD')),
                account=os.environ["SNOWSQL_ACCOUNT"],
                warehouse=os.environ["SNOWSQL_WAREHOUSE"],
                database=os.environ["SNOWSQL_DATABASE"],
                schema=os.environ["SNOWSQL_SCHEMA"]
                )
    if str(os.getenv('DEBUG'))== "TRUE":{% br %}
      logStream.write("\nBEGIN create of data file from source system: "+str(datetime.now())+'\n'){% br %}
    unicode = False{% br %}
    if str(os.getenv('UNICODE_SUPPORT'))== "TRUE":{% br %}
       unicode = True{% br %}
    if runMode == "Windows":
       path = r"{{ table.exportInfo.file.path }} ".replace("\ ","").replace(" ",""){%- br %}
       path = ReplaceWslTags(path){%- br %}
       file = '{{ table.exportInfo.file.name }}'{%- br %}
       file = ReplaceWslTags(file){%- br %}
       delimitedBy= "'{{ table.exportInfo.file.fieldDelimiter }}'"{%- br %}
       if delimitedBy=="":
            delimitedBy = '|'
       enclosedBy='{{ table.exportInfo.file.fieldEnclosure.Replace("'","''") }}'{%- br %}
       headerRow= "{{ table.exportInfo.file.headerLine }}"{%- br %}
    {%- br %}
    else:{% br %}
      path=(str(os.getenv('WSL_SERVER'))+" ").replace("\ ","").replace(" ",""){%- br %}{% br %}
      file = '{{ table.exportInfo.file.name }}'{%- br %}
      file = ReplaceWslTags(file){%- br %}
      fileDat=os.path.join(path,file)
    if runMode != "S3":{%- br %}
      logStream.write("================= SNOWSQL =================\n"){% br %}
      deleteRes = "remove @~/"+file+";"{% br %}
      SFconn = SFConnectionString.cursor(){% br %}
      SFconn.execute(deleteRes){% br %}
      SFconn.close(){% br %}
      copyStmt = """
      COPY INTO @~/"""+file+"""
      FROM ( """+ extractSql +""")FILE_FORMAT = (TYPE = 'CSV' COMPRESSION = NONE
      FIELD_DELIMITER = """+delimitedBy+""" field_optionally_enclosed_by= '{{ table.exportInfo.file.fieldEnclosure.Replace("'","''") }}')single=true HEADER = """+headerRow+"""; {{ table.exportInfo.options }}"""
      SFconn = SFConnectionString.cursor()
      maskedExport=SFconn.execute(copyStmt).fetchall()
      SFconn.close()

      {%- br %}
      logStream.write("\nExport:    " + str(maskedExport[0][0]))
      {%- br %}
      if maskedExport[0][0] != 0:{%- br %}
            rowsExported = maskedExport[0][0]{%- br %}
      else: {%- br %}
           # foreach($line in $exportRes) { {%- br %}
           #     $logStream.WriteLine($line){%- br %}
           # }{%- br %}
            print("-2"){%- br %}
            print("\nExport failed"){%- br %}
            PrintLog(logStream){%- br %}
      snowsqlGet = "GET @~/"+file+" file://"+path+";"{%- br %}
      logStream.write("\nGET:    " + snowsqlGet){%- br %}

      SFconn = SFConnectionString.cursor(){% br %}
      getRes=SFconn.execute(snowsqlGet).fetchall(){% br %}
      SFconn.close(){% br %}
      getFile = getRes[0][0]{%- br %}
      getStatus = getRes[0][2]{%- br %}
      getMessage = getRes[0][3]{%- br %}
      if getStatus == "DOWNLOADED":{%- br %}
            deleteRes = "remove @~/"+file+";"{%- br %}
            SFconn = SFConnectionString.cursor()
            SFconn.execute(deleteRes)
            SFconn.close()
            logStream.write("\nFile "+file+" downloaded as "+os.path.join(path,getFile)+"\n"){%- br %}
            if getMessage!="": {%- br %}
                logStream.write("\nMessage returned from GET call: "+getMessage){%- br %}
            logStream.write("\n"+str(rowsExported)+" rows exported"){%- br %}
            print("1"){%- br %}
            print("\nExport successful. "+str(rowsExported)+" rows exported"){%- br %}
      else:{%- br %}
            logStream.write("\nStatus returned from GET call:"+ getStatus){%- br %}
            if getMessage !="":{%- br %}
                logStream.write("\nMessage returned from GET call: " +getMessage){%- br %}
            print("-2"){%- br %}
            print("Export Failed"){%- br %}
            PrintLog(logStream){%- br %}
        {%- br %}
    else: {%- br %}
        logStream.write("================= SNOWSQL ================="){%- br %}
        copyStmt = "COPY INTO "+fileDat+" FROM ( "+extractSql +") CREDENTIALS = (AWS_KEY_ID='"+str(os.getenv('ACCESS_KEY'))+" AWS_SECRET_KEY='"+str(os.getenv('SECRET_KEY')){%- br %}
        snowsqlExport = copyStmt{%- br %}
        SFconn = SFConnectionString.cursor()
        maskedExport=SFconn.execute(snowsqlExport).fetchall()
        SFconn.close()
        if str(os.getenv('ACCESS_KEY'))!="": {%- br %}
            snowsqlExport = snowsqlExport.replace(str(os.getenv('ACCESS_KEY')),'*' * len(str(os.getenv('ACCESS_KEY')))){%- br %}
        if str(os.getenv('SECRET_KEY'))!="": {%- br %}
            snowsqlExport = snowsqlExport.replace(str(os.getenv('SECRET_KEY')),'*' * len(str(os.getenv('SECRET_KEY')))){%- br %}
        rowsExported=maskedExport[0][0]{%- br %}
        if maskedExport[0][0] != 0:{%- br %}
            rowsExported = maskedExport[0][0]{%- br %}
            logStream.write("\nExport:    " + snowsqlExport){%- br %}
            logStream.write("\n"+str(rowsExported)+" rows exported"){%- br %}
            print("1"){%- br %}
            print("\nExport successful. "+str(rowsExported)+" rows exported"){%- br %}
        else:{%- br %}
            logStream.write("\nStatus returned from GET call:"+ getStatus){%- br %}
            if getMessage !="":{%- br %}
                logStream.write("\nMessage returned from GET call: " +getMessage){%- br %}
            print("-2"){%- br %}
            print("\nExport Failed"){%- br %}
            PrintLog(logStream){%- br %}
    logStream.close(){%- br %}
    return(os.path.join(filePath,auditLog),os.path.join(path,file)){%- br %}
try:  {%- br %}
    if os.getenv('WSL_SERVER') ==None: {%- br %}
        runMode = "Windows"
    {%- br %}
    else: {%- br %}
        if os.getenv('WSL_SERVER').find("s3://") == -1: {%- br %}
           runMode = "Windows"{%- br %}
        {%- br %}
        else:{%- br %}
           runMode = "S3"{%- br %}
    {%- br %}
    auditSrcFile=ExportData(runMode){%- br %}
    {%-  if (table.exportInfo.triggerFile.path != "") and ( table.exportInfo.triggerFile.name != "")  %}
    CreateTriggerFile(auditSrcFile[0]){%- br %}
    {%- endif %}
		{%  if (table.exportInfo.compressAfterExport  == true) %}{%- br %}
    ArchiveFiles(auditSrcFile[1],auditSrcFile[0]){%- br %}
    {%- endif %}{%- br %}
    PrintLog(auditSrcFile[0]){%- br %}
    {%- br %}
except:
  print("-2")
  print("export failed")
