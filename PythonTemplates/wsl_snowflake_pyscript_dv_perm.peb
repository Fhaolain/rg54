{# -- TemplateVersion:003 MinVersion:8510 MaxVersion:* TargetType:Snowflake ModelType:DATAVAULT TemplateType:Python                                         -- #}
{# --                                                                                                                                                       -- #}
{# --    (c) WhereScape Ltd 2019. WhereScape Ltd permits you to copy this Template solely for use with the RED software, and to modify this Template        -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : SNOWFLAKE                                                                                                                        -- #}
{# -- Template Name      : wsl_snowflake_pyscript_dv_perm                                                                                                   -- #}
{# -- RED Version        : 8.5.1.0                                                                                                                          -- #}
{# -- Description        : This template creates a SNOWFLAKE procedure using Insert                                                                         -- #}
{# --                      specifically designed for RED data vault permanent tables                                                                        -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{# -- Notes / History                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{% import "wsl_snowflake_utility" %}
{% import "wsl_snowflake_utility_dv_py" %}
{# --                                                            Start of main procedure text                                                               -- #}
#--=============================================================================={%br%}
#-- DBMS Name        :    SNOWFLAKE {{table.dbType.name}}{%br%}
#-- Block Name       :    {{settings.procedureName}}{%br%}
#-- Template         :    {{settings.template.name}}{%br%}
#-- Template Version :    8.5.1.0{%br%}
#-- Description      :    Update the {{table.objectType.name}} table {{table.name}}{%br%}
#-- Generated by     :    {{env.productVersion}}{%br%}
#-- Generated for    :    {{env.licensedTo}}{%br%}
#-- Generated on     :    {{env.currentTimestamp}}{%br%}
#-- Author           :    {{env.userName}}{%br%}
#--=============================================================================={%br%}
#-- Notes / History{%br%}
#--{%br%}


import os{%br%}
import sys{%br%}
import fnmatch{%br%}
sys.path.append('C:\ProgramData\WhereScape\Modules\WslPython'){%br%}
import WslPythonCommon{%br%}
import WslPythonSnowflake{%br%}
ret=WslPythonCommon.HideWindow(){%br%}

#--============================================================================{%br%}
#-- General Variables{%br%}
#--============================================================================{%br%}{%br%}
sequence = os.environ["WSL_SEQUENCE"]{%br%}
jobName = os.environ["WSL_JOB_NAME"]{%br%}
taskName = os.environ["WSL_TASK_NAME"]{%br%}
jobId = os.environ["WSL_JOB_KEY"]{%br%}
taskId = os.environ["WSL_TASK_KEY"]{%br%}
returnMsg = "{{table.name}} updated."{%br%}
status = 1{%br%}

{%- set isSatelliteMultiActiveSequence = false -%}
 {%- if table.objectType == Types.ObjectType.Satellite %}
		{%- from table.columns as multiActiveSeqColumn where multiActiveSeqColumn.keyType.name == "MultiActiveSequence" and multiActiveSeqColumn.sourceTable is empty -%}
			{%- set isSatelliteMultiActiveSequence = true -%}
		{%- endfrom -%}
 {%- endif %}

#--============================================================================{%br%}
#-- Main{%br%}
#--============================================================================{%br%}{%br%}
step = {% counter %}00{%br%}
insertCount = 0{%br%}

{%- for par in settings.parameters %}
  {%- if loop.first %}
{%br%}
#--============================================================================{%br%}
#-- Set Parameter Variables{%br%}
#--============================================================================{%br%}{%br%}
step = {% counter %}00{%br%}{%br%}
  {%- endif %}
{{par}} = WslPythonCommon.WsParameterRead( "{{par}}")[0]{%br%}
{%- endfor %}


{% set timezoneParam = getExtendedProperty( propertyName = "SF_TIMEZONE" ) | trim -%}
{%- if timezoneParam != "" -%}
#--============================================================================{%br%}
#-- Set Timezone{%br%}
#--============================================================================{%br%}{%br%}
step = {% counter %}00{%br%}{%br%}
timeZone = WslPythonCommon.GetExtendedProperty("SF_TIMEZONE","{{table.name}}")
if timeZone and not timeZone.isspace():
    tzSql = "ALTER SESSION SET TIMEZONE = '"+timeZone+"'"
    SnowflakeResult=WslPythonSnowflake.RunSnowflakeRedSQL(tzSql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')),str(os.getenv('WSL_TGT_PWD')),'Failed to alter session timezone to '+str(step),'',step)
    status=SnowflakeResult[1]
    if status<1:
      returnMsg = str(SnowflakeResult[3])
    else:
      returnMsg = str(SnowflakeResult[2])

{% br %}
{% br %}
{%- endif %}

{#- Insert new records #}
if status == 1:
  {{- addBatchLoopSelectClause()}}
{%br%}
  #--============================================================================{%br%}
  #-- Insert new records{%br%}
  #--============================================================================{%br%}
   step = {% counter %}00{%br%}
   sql = """
        INSERT INTO [TABLEOWNER].[{{table.name}}]{%br%}
      {{- addSetInsertTargetColumns(indentString = "      ")}}
    {%- if isSatelliteMultiActiveSequence -%}{%br%}
    SELECT {{addSetInsertColumnsMultiActiveSequenceSatellite()}}
    FROM (
    {%- endif -%}{%br%}
    SELECT {{distinct()}}
  	{%- if isSatelliteMultiActiveSequence -%}{%br%}
	  {{addSetInsertColumnsIncomingRowsMultiActiveSequenceSatellite()}}{%br%}
  	{%- else -%}
    {{addSetInsertColumnsPerm(indentString = "           ")}}
	  {%- endif -%}
    {%- if settings.sourceJoinDetails.join | trim != "" %}
    {{settings.sourceJoinDetails.join}}
    {%- endif %}{%br%}
	  {%- if isSatelliteMultiActiveSequence -%}
	  {%- if settings.sourceJoinDetails.where | trim != "" %}
	  {{settings.sourceJoinDetails.where | trim }}{%br%}
		{%- endif %}
		{%- if settings.batchProcessingField != "" %}
		{{- addBatchLoopWhereClause()}}
		{%- endif %}
	    ) AS incoming_rows{%br%}
	  {%- endif -%}
    {%- if table.objectType == Types.ObjectType.Satellite and isSatelliteMultiActiveSequence %}
    {{addSatMultiActiveSequenceCurrentVersion()}}
  	{%- elseif table.objectType == Types.ObjectType.Satellite %}
  	{{addSatCurrentVersion()}}
    {%- endif %}
    {%- if not isSatelliteMultiActiveSequence -%}
		{%- if settings.sourceJoinDetails.where | trim != "" %}
		{{settings.sourceJoinDetails.where | trim }}{%br%}
		{%- endif %}
		{%- if settings.batchProcessingField != "" %}
		{{- addBatchLoopWhereClause()}}
		{%- endif %}
	  {%- endif %}
    {%- if table.objectType == Types.ObjectType.Hub %}
    {{addHubWhereNotExists()}}
    {%- elseif table.objectType == Types.ObjectType.Link %}
    {{addLinkWhereNotExists()}}
    {%- elseif table.objectType == Types.ObjectType.Satellite and isSatelliteMultiActiveSequence %}
  	{{addMultiActiveSequenceSatWhereNotExists()}}
  	{%- elseif table.objectType == Types.ObjectType.Satellite %}
    {{addSatWhereNotExists()}}
    {%- endif %}
    {%- if settings.sourceJoinDetails.groupBy | trim != "" %}
    {{settings.sourceJoinDetails.groupBy | trim }}{%br%}
    {%- endif %}
    ;{%br%}{%br%}
"""
   SnowflakeResult = WslPythonSnowflake.RunSnowflakeRedSQL(sql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')), str(os.getenv('WSL_TGT_PWD')), 'Failed insert into table  {{table.name}}  step'+ str(step)  , '',step)
   status=SnowflakeResult[1]
   insertCount = insertCount + SnowflakeResult[2]
   if status<1:
      returnMsg = str(SnowflakeResult[3])
   else:
      returnMsg = str(SnowflakeResult[2])
{%br%}
{%br%}

{# --                                             -- #}
{# -- =========================================== -- #}
{# -- Finish Up                                   -- #}
{# -- =========================================== -- #}
{# --                                             -- #}

#--====================================================={%br%}
#-- All Done report the results{%br%}
#--====================================================={%br%}{%br%}

step = {% counter %}00{%br%}{%br%}
#-- WsWrkTask call to updated row counts in Ws_Wrk_Task_Run/Log{%br%}
metaResult=WslPythonCommon.WsWrkTask(0,0,insertCount,0,0,0,0){%br%}
if int(metaResult) < -1:
   status=-2{%br%}
   returnMsg = "Failure executing WsWrkTask. "+ str(insertCount)+" records inserted."{%br%}

if status==1:
  #-- Work out return message
  returnMsg = "{{table.name}} updated.  "{%br%}
  returnMsg +=str(insertCount) + " records inserted.  " {%br%}
print(status){%br%}
print(returnMsg){%br%}
sys.exit(0){%br%}

