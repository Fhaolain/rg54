{# -- TemplateVersion:001 MinVersion:8510 MaxVersion:* TargetType:Snowflake ModelType:DATAVAULT TemplateType:Python                                         -- #}
{# --                                                                                                                                                       -- #}
{# --    (c) WhereScape Inc 2020. WhereScape Inc permits you to copy this Template solely for use with the RED software, and to modify this Template        -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : SNOWFLAKE                                                                                                                        -- #}
{# -- Template Name      : wsl_snowflake_pyscript_dv_stage                                                                                                  -- #}
{# -- RED Version        : 8.5.1.0                                                                                                                          -- #}
{# -- Description        : This template creates a Snowflake procedure using Insert                                                                         -- #}
{# --                      specifically designed for RED data vault stage tables                                                                            -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{# -- Notes / History                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{% fetch table %}
{% set counter = 0 %}
{% import "wsl_snowflake_utility" %}
{% import "wsl_snowflake_utility_dv" %}
{% import "wsl_snowflake_utility_dml_py" %}
{# --
{# --                                                            Start of main procedure text                                                            -- #}
#--=============================================================================={%br%}
#-- DBMS Name        :    SNOWFLAKE {{table.dbType.name}}{%br%}
#-- Block Name       :    {{settings.procedureName}}{%br%}
#-- Template         :    {{settings.template.name}}{%br%}
#-- Template Version :    8.5.1.0{%br%}
#-- Description      :    Update the {{table.objectType.name}} table {{table.name}}{%br%}
#-- Generated by     :    {{env.productVersion}}{%br%}
#-- Generated for    :    {{env.licensedTo}}{%br%}
#-- Generated on     :    {{env.currentTimestamp}}{%br%}
#-- Author           :    {{env.userName}}{%br%}
#--=============================================================================={%br%}
#-- Notes / History{%br%}
#--{%br%}

import os{%br%}
import sys{%br%}
import fnmatch{%br%}
sys.path.append('C:\ProgramData\WhereScape\Modules\WslPython'){%br%}
import WslPythonCommon{%br%}
import WslPythonSnowflake{%br%}
ret=WslPythonCommon.HideWindow(){%br%}

#--============================================================================{%br%}
#-- General Variables{%br%}
#--============================================================================{%br%}{%br%}
sequence = os.environ["WSL_SEQUENCE"]{%br%}
jobName = os.environ["WSL_JOB_NAME"]{%br%}
taskName = os.environ["WSL_TASK_NAME"]{%br%}
jobId = os.environ["WSL_JOB_KEY"]{%br%}
taskId = os.environ["WSL_TASK_KEY"]{%br%}
returnMsg = "{{table.name}} updated."{%br%}
status = 1{%br%}

#--============================================================================{%br%}
#-- Main{%br%}
#--============================================================================{%br%}{%br%}
step = {% counter %}00{%br%}
{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
deleteCount = 0{%br%}
{%- endif %}
insertCount = 0{%br%}

{%- for par in settings.parameters %}
  {%- if loop.first %}
{%br%}
#--============================================================================{%br%}
#-- Set Parameter Variables{%br%}
#--============================================================================{%br%}{%br%}
step = {% counter %}00{%br%}{%br%}
  {%- endif %}
{{par}} = WslPythonCommon.WsParameterRead( "{{par}}")[0][0]{%br%}
{%- endfor %}

{% set timezoneParam = getExtendedProperty( propertyName = "SF_TIMEZONE" ) | trim -%}
{%- if timezoneParam != "" -%}
#--============================================================================{%br%}
#-- Set Timezone{%br%}
#--============================================================================{%br%}{%br%}
step = {% counter %}00{%br%}{%br%}
timeZone = WslPythonCommon.GetExtendedProperty("SF_TIMEZONE","{{table.name}}")
if timeZone and not timeZone.isspace():
    tzSql = "ALTER SESSION SET TIMEZONE = '"+timeZone+"'"
    SnowflakeResult=WslPythonSnowflake.RunSnowflakeRedSQL(tzSql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')),str(os.getenv('WSL_TGT_PWD')),'Failed to alter session timezone to '+str(step),'',step)
    status=SnowflakeResult[1]
		if status<1:
      returnMsg = str(SnowflakeResult[3])
    else:
      returnMsg = str(SnowflakeResult[2])
{% br %}
{% br %}
{%- endif %}

{%- if settings.deleteBeforeInsert %}
  {%- if settings.deleteBeforeInsertTruncate %}{%br%}
if status == 1:
{%br%}
#--============================================================================{%br%}
#-- Truncate existing records{%br%}
#--============================================================================{%br%}{%br%}
  step = {% counter %}00{%br%}{%br%}
  sql = "TRUNCATE TABLE [TABLEOWNER].[{{table.name}}];"{%br%}{%br%}

  SnowflakeResult =WslPythonSnowflake.RunSnowflakeRedSQL(sql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')), str(os.getenv('WSL_TGT_PWD')), 'Failed truncating table {{table.name}} step '+str(step) , '',step)
  returnMsg = str(SnowflakeResult[2]){%br%}
  status=SnowflakeResult[1]
  if status<1:
      returnMsg = str(SnowflakeResult[3])
  else:
      returnMsg = str(SnowflakeResult[2])
  {%br%}
  {%- else %}{%br%}
if status==1:
{%br%}
#--============================================================================{%br%}
#-- Delete existing records{%br%}
#--============================================================================{%br%}{%br%}
  step = {% counter %}00{%br%}{%br%}
  sql = """
  DELETE FROM [TABLEOWNER].[{{table.name}}]{%br%}
  {%- if settings.deleteWhereClause | trim != "" %}  {{settings.deleteWhereClause}}{%br%}{%- endif %}
  ;{%br%}
"""
  SnowflakeResult =WslPythonSnowflake.RunSnowflakeRedSQL(sql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')), str(os.getenv('WSL_TGT_PWD')), 'Failed deleting table {{table.name}} step '+str(step) , '',step)
  deleteCount = SnowflakeResult[2]
  status=SnowflakeResult[1]
  if status<1:
      returnMsg = str(SnowflakeResult[3])
  else:
      returnMsg = str(SnowflakeResult[2]){%br%}
  {%- endif %}
{%- endif %}

if status==1:
{%br%}
#--============================================================================{%br%}
#-- Insert new records{%br%}
#--============================================================================{%br%}{%br%}
  step = {% counter %}00{%br%}{%br%}
  sql = """
  INSERT INTO [TABLEOWNER].[{{table.name}}]{%br%}
  {{- addSetInsertTargetColumns(indentString = "  ")}}
  SELECT {{distinct()}} {{addSetInsertColumns(indentString = "       ")}}
  {%- if table.sourceJoinDetails.join | trim != "" %}  {{table.sourceJoinDetails.join}}{%br%} {%- endif %}
  {%- if table.sourceJoinDetails.where | trim != "" %}  {{table.sourceJoinDetails.where | trim }}{%br%} {%- endif %}
  {%- if table.sourceJoinDetails.groupBy | trim != "" %}  {{table.sourceJoinDetails.groupBy | trim }}{%br%} {%- endif %}
  ;{%br%}{%br%}
"""
  SnowflakeResult = WslPythonSnowflake.RunSnowflakeRedSQL(sql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')), str(os.getenv('WSL_TGT_PWD')), 'Failed insert into table  {{table.name}}  step'+ str(step)  , '',step)
  status=SnowflakeResult[1]
  if status<1:
      returnMsg = str(SnowflakeResult[3])
  else:
      returnMsg = str(SnowflakeResult[2])
  insertCount = insertCount + SnowflakeResult[2]{%br%}
{%br%}{%br%}
#--====================================================={%br%}
#-- All Done report the results{%br%}
#--====================================================={%br%}{%br%}
step = {% counter %}00{%br%}{%br%}
#-- WsWrkTask call to updated row counts in Ws_Wrk_Task_Run/Log{%br%}
{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
metaResult=WslPythonCommon.WsWrkTask(0,0,0,insertCount,deleteCount,0,0){%br%}
{%- else %}
metaResult=WslPythonCommon.WsWrkTask(0,0,0,insertCount,0,0,0){%br%}
{%- endif %}
if int(metaResult) < -1:
   status=-2{%br%}
   returnMsg = "Failure executing WsWrkTask. "+ str(insertCount)+" records inserted."{%br%}

if status==1:
  #-- Work out return message
  returnMsg = "{{table.name}} updated.  "{%br%}
  returnMsg +=str(insertCount) + " records inserted.  " {%br%}
  {%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
  returnMsg +=str(deleteCount) + " records deleted.  "{%br%}
  {%- endif %}
print(status){%br%}
print(returnMsg){%br%}
