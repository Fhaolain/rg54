{# -- TemplateVersion:003 MinVersion:8310 MaxVersion:* TargetType:Snowflake ModelType:STAR,ODS,NORMAL TemplateType:Python                                   -- #}
{# --                                                                                                                                                       -- #}
{# --    (c) WhereScape Ltd 2019. WhereScape Ltd permits you to copy this Template solely for use with the RED software, and to modify this Template        -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : SNOWFLAKE                                                                                                                        -- #}
{# -- Template Name      : wsl_snowflake_pyscript_hist                                                                                                      -- #}
{# -- RED Version        : 8.4.1.0                                                                                                                          -- #}
{# -- Description        : This template creates a Snowflake procedure specifically                                                                         -- #}
{# --                      specifically designed for all RED non-stage tables                                                                               -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{# -- Notes / History                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{% fetch table %}
{% set counter = 0 %}
{% set dssDeleteTime = "DSS_DELETE_TIME" %}
{% set dssDeleteFlag = "DSS_DELETE_FLAG" %}
{% import "wsl_snowflake_utility_dml_py" %}
{% import "wsl_snowflake_utility" %}
{# --                                                            Start of main procedure text                                                               -- #}
#--=============================================================================={%br%}
#-- DBMS Name        :    SNOWFLAKE {{table.dbType.name}}{%br%}
#-- Block Name       :    {{settings.procedureName}}{%br%}
#-- Template         :    {{settings.template.name}}{%br%}
#-- Template Version :    8.4.1.0{%br%}
#-- Description      :    Update the {{table.objectType.name}} table {{table.name}}{%br%}
#-- Generated by     :    {{env.productVersion}}{%br%}
#-- Generated for    :    {{env.licensedTo}}{%br%}
#-- Generated on     :    {{env.currentTimestamp}}{%br%}
#-- Author           :    {{env.userName}}{%br%}
#--=============================================================================={%br%}
#-- Notes / History{%br%}
#--{%br%}

import os{%br%}
import sys{%br%}
import fnmatch{%br%}
sys.path.append('C:\ProgramData\WhereScape\Modules\WslPython'){%br%}
import WslPythonCommon{%br%}
import WslPythonSnowflake{%br%}
ret=WslPythonCommon.HideWindow(){%br%}

#--============================================================================{%br%}
#-- General Variables{%br%}
#--============================================================================{%br%}{%br%}
sequence = os.environ["WSL_SEQUENCE"]{%br%}
jobName = os.environ["WSL_JOB_NAME"]{%br%}
taskName = os.environ["WSL_TASK_NAME"]{%br%}
jobId = os.environ["WSL_JOB_KEY"]{%br%}
taskId = os.environ["WSL_TASK_KEY"]{%br%}
returnMsg = "{{table.name}} updated."{%br%}
status = 1{%br%}

#--============================================================================{%br%}
#-- Main{%br%}
#--============================================================================{%br%}{%br%}
step = {% counter %}00{%br%}
{#- Work out if we are doing logical deletes -#}
{%- set dssDeleteTimePresent = false -%}
{%- set dssDeleteFlagPresent = false -%}
{%- from table.columns as column where column.name == dssDeleteTime -%}
  {% set dssDeleteTimePresent = true %}
{%- endfrom -%}
{%- from table.columns as column where column.name == dssDeleteFlag -%}
  {% set dssDeleteFlagPresent = true %}
{%- endfrom -%}
{%- from table.columns as column where column.name == dssDeleteTime or column.name == dssDeleteFlag -%}
logicalDeleteCount = 0{%br%}
{%- endfrom -%}
{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
deleteCount = 0{%br%}
{%- endif %}
mergeCount = 0{%br%}

{%- for par in settings.parameters %}
  {%- if loop.first %}
{%br%}
#--============================================================================{%br%}
#-- Set Parameter Variables{%br%}
#--============================================================================{%br%}
step = {% counter %}00{%br%}{%br%}
  {%- endif %}
{{par}} = WslPythonCommon.WsParameterRead ("{{par}}")[0][0]{%br%}
{%- endfor %}
{% set timezoneParam = getExtendedProperty( propertyName = "SF_TIMEZONE" ) | trim -%}
{%- if timezoneParam != "" -%}
#--============================================================================{%br%}
#-- Set Timezone{%br%}
#--============================================================================{%br%}
step = {% counter %}00{%br%}{%br%}
timeZone = WslPythonCommon.GetExtendedProperty("SF_TIMEZONE","{{table.name}}"){% br %}
if timeZone and not timeZone.isspace():
    tzSql = "ALTER SESSION SET TIMEZONE = '"+timeZone+"'"
    SnowflakeResult=WslPythonSnowflake.RunSnowflakeRedSQL(tzSql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')),str(os.getenv('WSL_TGT_PWD')),'Failed to alter session timezone to '+str(step),'',step)
    status=SnowflakeResult[1]
    if status<1:
      returnMsg = str(SnowflakeResult[3])
    else:
      returnMsg = str(SnowflakeResult[2])
{% br %}
{%- endif %}{% br %}

{%- if settings.deleteBeforeInsert %}
  {%- if settings.deleteBeforeInsertTruncate %}{%br%}
if status==1:
{%br%}
  #--============================================================================{%br%}
  #-- Truncate existing records{%br%}
  #--============================================================================{%br%}
  step = {% counter %}00{%br%}{%br%}
  sql = "TRUNCATE TABLE [TABLEOWNER].[{{table.name}}];"{%br%}
  SnowflakeResult =WslPythonSnowflake.RunSnowflakeRedSQL(sql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')), str(os.getenv('WSL_TGT_PWD')), 'Failed truncating table {{table.name}} step '+str(step) , '',step)
  returnMsg = str(SnowflakeResult[2]){%br%}
  status=SnowflakeResult[1]
  if status<1:
   returnMsg = str(SnowflakeResult[3])
  else:
   returnMsg += str(SnowflakeResult[2])
  {%br%}
  {%- else %}{%br%}
if status==1:
{%br%}
  #--============================================================================{%br%}
  #-- Delete existing records{%br%}
  #--============================================================================{%br%}
  step = {% counter %}00{%br%}{%br%}
  sql = """DELETE FROM [TABLEOWNER].[{{table.name}}]{%br%}
  {%- if settings.deleteWhereClause | trim != "" %}  {{settings.deleteWhereClause}}{%br%}{%- endif %}
  ;{%br%}
"""
  SnowflakeResult =WslPythonSnowflake.RunSnowflakeRedSQL(sql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')), str(os.getenv('WSL_TGT_PWD')), 'Failed deleting table {{table.name}} step '+str(step) , '',step)
  deleteCount = SnowflakeResult[2]
  status=SnowflakeResult[1]
  if status<1:
   returnMsg = str(SnowflakeResult[3])
  else:
   returnMsg = str(SnowflakeResult[2]){%br%}
  {%- endif %}
{%- endif %}

{%- if settings.insertZeroKeyRecord %}
  {% from table.columns as column where column.artificial %}
    {% if loop.first %}{%br%}
if status==1:
{%br%}
#--============================================================================{%br%}
#-- Refresh zero key records{%br%}
#--============================================================================{%br%}{%br%}
  step = {% counter %}00{%br%}{%br%}
  sql ="""MERGE INTO [TABLEOWNER].[{{table.name}}]{%br%}
  USING ({%br%}
    SELECT {{defaultColumnsSnowflake()}}
    FROM   DUAL{%br%}
    ) AS src{%br%}
  ON {{getArtificialKey()}} = 0{%br%}
  WHEN MATCHED THEN UPDATE{%br%}
  SET{{- addMergeUpdateColumns(alias = "src")}}
  WHEN NOT MATCHED THEN INSERT{%br%}
  {{addSetInsertTargetColumns(includeIdentity = true)}}
  ){%br%}
  VALUES
  ({{- addSetInsertColumnsSnowflake(addArtificialKey = true, alias = "src", zeroKeyInsert = true, indent = "  ", addColumnName = false, ignoreDssColumns = true,includeIdentity = true)}}
  ){%br%}
  ;{%br%}
"""

  SnowflakeResult =WslPythonSnowflake.RunSnowflakeRedSQL(sql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')), str(os.getenv('WSL_TGT_PWD')), ' "Failed zero key merge into table {{table.name}} step '+str(step) , '',step)
  mergeCount = mergeCount + SnowflakeResult[2]
  returnMsg = SnowflakeResult[2]{%br%}
    {%- endif -%}
  {%- endfrom -%}
{%- endif %}

{%- if dssDeleteTimePresent or dssDeleteFlagPresent -%}
if status==1:
#--============================================================================{%br%}
#-- Ensure there is Source Data before performing a logical delete {%br%}
#--============================================================================{%br%}{%br%}
  step = {% counter %}00{%br%}{%br%}
  sql = """ {%- br %}
  SELECT COUNT(*) {%- br %}
  {%- for joinLine in (table.sourceJoinDetails.join | lines)%}  {{joinLine}}{%br%}{%- endfor%}
  ;{%br%}
""" {%- br %}
  SourceCount = WslPythonSnowflake.RunSnowflakeRedSQL(sql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')), str(os.getenv('WSL_TGT_PWD')), ' "Failed batch distinct select from source tables  {{table.name}} step '+str(step) , '',step)
   for row in SnowflakeResult[4]:{%br%}
    if row[0] >0: {%br%}
#--============================================================================{%br%}
#-- Perform Logical Deletes{%br%}
#--============================================================================{%br%}{%br%}
      step = {% counter %}00{%br%}{%br%}
      sql = """
      UPDATE [TABLEOWNER].[{{table.name}}]{%br%}
      {%- if dssDeleteTimePresent and dssDeleteFlagPresent %}
      SET    {{dssDeleteTime}} = CAST(CURRENT_TIMESTAMP AS TIMESTAMP){%br%}
           , {{dssDeleteFlag}} = 'Y'{%br%}
      {%- elseif dssDeleteTimePresent %}
      SET    {{dssDeleteTime}} = CAST(CURRENT_TIMESTAMP AS TIMESTAMP){%br%}
      {%- elseif dssDeleteFlagPresent %}
      SET    {{dssDeleteFlag}} = 'Y'{%br%}
      {%- endif -%}
      {%- from table.columns as column where column.currentFlag or column.dssEndDate %}
        {%- if column.currentFlag %}
           , {{column.name}} = 'N'{%br%}
        {%- elseif column.dssEndDate %}
           , {{column.name}} = {{settings.changeDetectionEndExpiring}}{%br%}
        {%- endif %}
      {%- endfrom %}
      WHERE NOT EXISTS ( {%br%}
        SELECT 1{%br%}
      {%- for joinLine in (table.sourceJoinDetails.join | lines)%}        {{joinLine | trim}}{%br%}{%- endfor%}
        {{addWhereJoinToTarget()}}{%br%}
        ){%br%}
      {%- if dssDeleteFlagPresent %}
      AND   {{dssDeleteFlag}} = 'N'{%br%}
      {%- elseif dssDeleteTimePresent %}
      AND   {{dssDeleteTime}} IS NULL{%br%}
      {%- endif -%}
      {%- from table.columns as column where column.artificial %}
      AND   {{column.name}} <> 0{%br%}
      {%- endfrom %}
      ;{%br%}
"""
	    SnowflakeResult = WslPythonSnowflake.RunSnowflakeRedSQL(sql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')), str(os.getenv('WSL_TGT_PWD')), ' Failed logical delete in table {{table.name}} step'+ str(step)  , '',step)
      logicalDeleteCount = logicalDeleteCount + SnowflakeResult[1]
      returnMsg = SnowflakeResult[2]{%br%}
    {%br%}
  {%br%}
{%br%}
{%- endif %}

{%- if settings.batchProcessingField != "" %}
  {%- set batchIndent = "  " %}
{%- else %}
  {%- set batchIndent = "" %}
{%- endif %}

if status==1:
{%br%}
  {%- set dssFlag = false %}
  {%- from table.columns as currFlag where currFlag.currentFlag %}
    {%- set dssFlag = true %}
  {%- endfrom %}
	{{- addBatchLoopSelectClause()}}
  {{batchIndent}}#--============================================================================{%br%}
  {{batchIndent}}#-- Refresh data{%br%}
  {{batchIndent}}#--============================================================================{%br%}{%br%}
  {{batchIndent}}step = {% counter %}00{%br%}{%br%}
  {{batchIndent}}sql = """
  {{batchIndent}}MERGE INTO [TABLEOWNER].[{{table.name}}]{%br%}
  {{batchIndent}}USING ({%br%}
  {#-                             -#}
  {#- V E R S I O N   1   R O W S -#}
  {#-                              #}
    {{batchIndent}}-- NEW BUSINESS KEY VALUES THAT WILL EACH CREATE A VERSION 1 ROW{%br%}
  {{- addNewRowSelect ( indent = "    " + batchIndent ) -}}
  {{- addFromClause ( indent = "    " + batchIndent ) -}}
  {{- addJoinToTarget ( joinType = "LEFT OUTER", indent = "    " + batchIndent ) -}}
  {{- addMaxKeyJoin ( indent = "    " + batchIndent ) -}}
  {{- addWhereClause ( indent = "    " + batchIndent ) -}}
  {%- if table.sourceJoinDetails.where | trim != "" %}{{batchIndent}}    AND {% else %}{{batchIndent}}    WHERE {% endif %}
  {%- from table.columns as bk where bk.businessKey -%}
    {%- if not loop.first -%}{{batchIndent}}    AND {% endif -%}
    {{- table.name}}.{{bk.name}} IS NULL{% br %}
  {%- endfrom %}
  {{- addBatchLoopWhereClause(dssFlag = dssFlag)}}
  {{- addGroupByClause ( indent = "    " + batchIndent ) -}}
  {#-                                 -#}
  {#- N E W   R O W   V E R S I O N S -#}
  {#-                                  #}
    {{batchIndent}}UNION ALL{% br %}
    {{batchIndent}}-- NEW VERSIONS OF EXISTING BUSINESS KEY ROWS{%br%}
  {{- addVersionedRowSelect ( indent = "    " + batchIndent ) -}}
  {{- addFromClause ( indent = "    " + batchIndent ) -}}
  {{- addJoinToTarget ( joinType = "INNER", indent = "    " + batchIndent ) -}}
  {{- addMaxKeyJoin ( indent = "    " + batchIndent ) -}}
  {{- addWhereClause ( indent = "    " + batchIndent ) -}}
  {%- if table.sourceJoinDetails.where | trim != "" %}{{batchIndent}}    AND {% else %}{{batchIndent}}    WHERE {% endif %}
  {%- from table.columns as currFlag where currFlag.currentFlag %}{{ table.name }}.{{ currFlag.name }} = 'Y'{% br %}{% endfrom %}
  {#- WHERE SLOWLY CHANGING ROWS HAVE CHANGED #}
  {{- addType2TrackedWhere ( indent = "    " + batchIndent, whereType = "AND", compareOperator = "<>", compareType = "OR ", nullSupport = settings.nullSupport ) }}
  {{- addBatchLoopWhereClause(dssFlag = dssFlag)}}
  {{- addGroupByClause ( indent = "    " + batchIndent ) }}
  {#-                           -#}
  {#- E X P I R I N G   R O W S -#}
  {#-                            #}
    {{batchIndent}}UNION ALL{% br %}
    {{batchIndent}}-- CURRENT ROWS THAT NEED TO BE EXPIRED{%br%}
  {{- addType2ExpiringRowSelect ( indent = "    " + batchIndent ) -}}
  {{- addFromClause ( indent = "    " + batchIndent ) -}}
  {{- addJoinToTarget ( joinType = "INNER", indent = "    " + batchIndent ) -}}
  {{- addWhereClause ( indent = "    " + batchIndent ) -}}
  {#- WHERE CURRENT FLAG -#}
  {%- if table.sourceJoinDetails.where | trim != "" %}{{batchIndent}}    AND {% else %}{{batchIndent}}    WHERE {% endif -%}
  {%- from table.columns as column where column.currentFlag %}{{ table.name }}.{{ column.name }} = 'Y'{% br %}{% endfrom %}
  {#- WHERE SLOWLY CHANGING ROWS HAVE CHANGED #}
  {{- addType2TrackedWhere ( indent = "    " + batchIndent, whereType = "AND", compareOperator = "<>", compareType = "OR ", nullSupport = settings.nullSupport ) -}}
  {{- addBatchLoopWhereClause(dssFlag = dssFlag)}}
  {{- addGroupByClause ( indent = "    " + batchIndent ) }}
  {#-                         -#}
  {#- C H A N G E D   R O W S -#}
  {#-                         -#}
  {#- ARE THERE ANY UNTRACKED COLUMNS? -#}
  {%- set untracked = false -%}
  {%- from table.columns as untrackedCol where not ( untrackedCol.slowlyChanging or untrackedCol.businessKey or untrackedCol.dss or untrackedCol.artificial or untrackedCol.name == dssDeleteTime ) -%}
    {%- if loop.first -%}
      {%- set untracked = true -%}
    {%- endif -%}
  {%- endfrom -%}
  {%- if untracked %}
    {{batchIndent}}UNION ALL{% br %}
    {{batchIndent}}-- ROWS WHERE ONLY NON_TRACKED FIELDS HAVE CHANGED{%br%}
    {{- addChangedRowSelect ( indent = "    " + batchIndent ) -}}
    {{- addFromClause ( indent = "    " + batchIndent ) -}}
    {{- addJoinToTarget ( joinType = "INNER", indent = "    " + batchIndent ) -}}
    {{- addWhereClause ( indent = "    " + batchIndent ) -}}
    {#- WHERE CURRENT FLAG #}
    {%- if table.sourceJoinDetails.where | trim != "" %}{{batchIndent}}    AND {% else %}{{batchIndent}}    WHERE {% endif -%}
    {%- from table.columns as column where column.currentFlag %}
      {{- table.name }}.{{ column.name }} = 'Y'{% br %}
    {%- endfrom %}
    {#- WHERE SLOWLY CHANGING ROWS HAVE NOT CHANGED #}
    {{- addType2TrackedWhere ( indent = "    " + batchIndent, whereType = "AND", compareOperator = "=", compareType = "AND", nullSupport = settings.nullSupport ) -}}
    {#- WHERE UNTRACKED COLUMNS HAVE CHANGED #}
    {{- addType2UntrackedWhere ( indent = "    " + batchIndent, whereType = "AND", compareOperator = "<>", compareType = "OR ", nullSupport = settings.nullSupport ) -}}
    {{- addBatchLoopWhereClause(dssFlag = dssFlag)}}
    {{- addGroupByClause ( indent = "    " + batchIndent ) -}}
  {%- endif %}
  {{batchIndent}}) AS src{%br%}
  {{batchIndent}}{{addMergeJoinCondition(alias = "src", indent = batchIndent+"  ")}}
  {{batchIndent}}WHEN MATCHED THEN UPDATE{%br%}
  {{batchIndent}}SET{{- addMergeUpdateColumns(alias = "src", indent = batchIndent+"    ")}}
  {{batchIndent}}WHEN NOT MATCHED THEN INSERT{%br%}
  {{batchIndent}}{{addSetInsertTargetColumns(indent = batchIndent)}}
  {{batchIndent}}){%br%}
  {{batchIndent}}VALUES{%br%}
  {{batchIndent}}({{- addSetInsertColumnsSnowflake(addArtificialKey = true, alias = "src", indent = batchIndent+"  ", addColumnName = false, ignoreDssColumns = true)}}
  {{batchIndent}}){%br%}
  {{batchIndent}};{%br%}
"""

  SnowflakeResult =WslPythonSnowflake.RunSnowflakeRedSQL(sql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')), str(os.getenv('WSL_TGT_PWD')), ' "Failed zero key merge into table {{table.name}} step '+str(step) , '',step)
  mergeCount = mergeCount + SnowflakeResult[2]
  returnMsg = SnowflakeResult[2]{%br%}
{{batchIndent}}{%br%}
{%- if settings.batchProcessingField != "" %}
{%- endif %}

#--====================================================={%br%}
#-- All Done report the results{%br%}
#--====================================================={%br%}{%br%}
step = {% counter %}00{%br%}{%br%}
#-- WsWrkTask call to updated row counts in Ws_Wrk_Task_Run/Log{%br%}
{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
metaResult=WslPythonCommon.WsWrkTask(0,0,0,mergeCount,deleteCount,0,0){%br%}
{%- else %}
metaResult=WslPythonCommon.WsWrkTask(0,0,0,mergeCount,0,0,0){%br%}
{%- endif %}
if int(metaResult) < -1:
   status=-2{%br%}
   returnMsg = "Failure executing WsWrkTask. "+ str(insertCount)+" records merged."{%br%}

#-- Work out return message{%br%}
if status==1:
{%br%}
  returnMsg = "{{table.name}} updated.  "{%br%}
  returnMsg +=str(mergeCount) + " records merged.  " {%br%}
  {%- if dssDeleteTimePresent or dssDeleteFlagPresent %}
  $return_Msg += str(logicalDeleteCount)+" records logically deleted.  "{%br%}
  {%- endif %}
  {%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
  returnMsg +=str(deleteCount) + " records deleted.  "{%br%}
  {%- endif %}
print(status){%br%}
print(returnMsg){%br%}
