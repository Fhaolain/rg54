{# -- TemplateVersion:001 MinVersion:8510 MaxVersion:* TargetType:Snowflake ModelType:* TemplateType:Python                                                  -- #}
{#                                                                                                                                                           -- #}
{# --    (c) WhereScape Inc 2020. WhereScape Inc permits you to copy this Template solely for use with the RED software, and to modify this Template         -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.          -- #}
{# --                                                                                                                                                        -- #}
{# -- =============================================================================                                                                          -- #}
{# --                                                                                                                                                        -- #}
{# -- DBMS Name          : Snowflake                                                                                                                         -- #}
{# -- Template Name      : wsl_snowflake_pyscript_load                                                                                                       -- #}
{# -- RED Version        : 8.5.1.0                                                                                                                           -- #}
{# -- Description        : This template creates a Snowflake script specifically                                                                             -- #}
{# --                      specifically designed for all RED load tables                                                                                     -- #}
{# --                                                                                                                                                        -- #}
{# -- =============================================================================                                                                          -- #}
{# --                                                                                                                                                        -- #}
{# --                                                                                                                                                        -- #}
{#  Notes / History                                                                                                                                          -- #}
{%- set dssRecordSrc = "DSS_RECORD_SOURCE" -%}{%- br %}
#=============================================================================={%- br %}
# DBMS Name        :    SNOWFLAKE {{table.dbType.name}}{%- br %}
# Template         :    {{settings.template.name}}{%- br %}
# Template Version :    8.5.1.0{%- br %}
# Description      :    Load {{table.name}}{%- br %}
# Generated by     :    {{env.productVersion}}{%- br %}
# Generated for    :    {{env.licensedTo}}{%- br %}
# Generated on     :    {{env.currentTimestamp}}{%- br %}
# Author           :    {{env.userName}}{%- br %}
#=============================================================================={%- br %}
# Notes / History{%- br %}
#{%- br %}
import os{%br%}
import re{%br%}
import gzip{%br%}
import shutil{%br%}
import sys{%br%}
from datetime import datetime{%br%}
import glob{%br%}
import pyodbc{%br%}
import snowflake.connector{%br%}
import time{%br%}
sys.path.append('C:\ProgramData\WhereScape\Modules\WslPython'){%br%}
import WslPythonCommon{%br%}

WslPythonCommon.HideWindow(){%br%}

def PrintLog(fileAud):{%br%}
    with open(fileAud, 'r') as write_to_console:{%br%}
     print(write_to_console.read()){%br%}


def ReplaceWslTags(stuff):{%br%}

    if '$SEQUENCE$' in stuff:{%br%}
        stuff = stuff.replace('$SEQUENCE$',str(os.environ["WSL_SEQUENCE"])){%br%}
    if re.findall(r'\$(.+?)\$',stuff)!=[]:{%br%}
        # If stuff contains two or more $s and the $SEQUENCE$ string is not detected{%br%}
        # or has already been replaced then we assume a date{%br%}
            suppliedFormat = re.findall(r'\$(.+?)\$',stuff)[0]{%br%}
            dateFormat = suppliedFormat.replace('YYYY','%Y').replace('MMM','%b').replace('MM','%m').replace('DD','%d').replace('HH','%H').replace('MI','%M').replace('SS','%S'){%br%}
            dateString = datetime.today().strftime(dateFormat){%br%}
            replaceString = '$' + suppliedFormat + '$'{%br%}
            stuff = stuff.replace(replaceString,dateString){%br%}
    if stuff.find('$') != -1:{%br%}
       os.environ["warn"] = True{%br%}
       print("Unclosed '$' tag in " +stuff){%br%}
       print("Unclosed '$' will be removed"){%br%}
       stuff = stuff.replace('\$',''){%br%}
    return stuff.strip(){%br%}

{% if (table.loadInfo.archiveFile.path != "") or (table.loadInfo.archiveFile.name != "") and (table.loadInfo.sourceConnectionType.name == "Windows") %}
# File archiving function for windows file loads
def ArchiveFiles(files, runMode,logStream): {%- br %}
    ArchivePath = r'{{ table.loadInfo.archiveFile.path }} '.replace("\ ","").strip(){%- br %}
    ArchiveName = '{{ table.loadInfo.archiveFile.name }}'{%- br %}
{%- br %}
    if runMode != "S3" and runMode != "AZ":{%- br %}
        if ArchivePath =="":{%- br %}
            ArchivePath = os.path.dirname(files[0]){%- br %}
        if len(files) > 1:{%- br %}
            if( ArchivePath !=""):{%- br %}
                if(ArchiveName !=""):{%- br %}
                   logStream.write("Files will be moved but not renamed\n"){%- br %}
                   logStream.write("Renaming is not supported for multi file loads\n"){%- br %}
            dir = ReplaceWslTags(ArchivePath){%- br %}
            if not os.path.exists(dir):
                   os.makedirs(dir)
            for file in files:{%- br %}
                    try:{%- br %}
                        ret=shutil.move(file,ArchivePath){%- br %}
                        logStream.write(file+" moved to "+dir+"\n"){%- br %}
                    except:{%- br %}
                        logStream.write("Failed to move " + file + " to " + ArchivePath+"\n"){%- br %}
        else:{%- br %}
            try:{%- br %}
                dir = ReplaceWslTags(ArchivePath){%- br %}
                if not os.path.exists(dir):
                       os.makedirs(dir)
                fil = ReplaceWslTags(ArchiveName){%- br %}
                path = os.path.join(dir, fil){%- br %}
                ret=shutil.move(files[0],path){%- br %}
                logStream.write("\nSource file moved to " + path+"\n"){%- br %}
            except:{%- br %}
                logStream.write("\nFailed to move " + files[0] + " to " + path+"\n"){%- br %}
{%- br %}
{%- endif %}


{% if (table.loadInfo.triggerArchiveFile.path != "") or (table.loadInfo.triggerArchiveFile.name != "") and (table.loadInfo.sourceConnectionType.name == "Windows") %}
# File archiving function for windows trigger file
def ArchiveTrigger({%- br %}
        files{%- br %}
       ,logStream{%- br %}
    ):{%- br %}
    ArchivePath = r'{{ table.loadInfo.triggerArchiveFile.path }} '.replace("\ ","").strip(){%- br %}
    ArchiveName = '{{ table.loadInfo.triggerArchiveFile.name }}'{%- br %}

    if runMode != "S3" and runMode != "AZ":{%- br %}
        if ArchivePath =="":{%- br %}
            ArchivePath = os.path.dirname(files[0]){%- br %}
        if len(files) > 1:{%- br %}
            if( ArchivePath !=""):{%- br %}
                if(ArchiveName !=""):{%- br %}
                   logStream.write("Files will be moved but not renamed\n"){%- br %}
                   logStream.write("Renaming is not supported for multi file loads\n"){%- br %}
            dir = ReplaceWslTags(ArchivePath){%- br %}
            if not os.path.exists(dir):
                os.makedirs(dir)
            for file in files:{%- br %}
                    try:{%- br %}
                        ret=shutil.move(file,ArchivePath){%- br %}
                        logStream.write(file+" moved to "+dir+"\n"){%- br %}
                    except:{%- br %}
                        logStream.write("Failed to move " + file + " to " + ArchivePath+"\n")
        else:{%- br %}
            try:{%- br %}
                dir = ReplaceWslTags(ArchivePath){%- br %}
                if not os.path.exists(dir):
                       os.makedirs(dir)
                fil = ReplaceWslTags(ArchiveName){%- br %}
                path = os.path.join(dir, fil){%- br %}
                ret=shutil.move(files[0],path){%- br %}
                logStream.write("Trigger file moved to " + path+"\n"){%- br %}
            except:{%- br %}
                logStream.write("Failed to move " + files[0] + " to " + path+"\n"){%- br %}
{%- br %}
{%- endif %}

def GzipFile({%br%}
        inFile="No input file specified",{%br%}
        outFile=".gz",{%br%}
        removeOriginal=True{%br%}
    ):{%br%}
    if outFile!=".gz":{%br%}
      with open(inFile, 'rb') as f_in:{%br%}
        with gzip.open(outFile+".gz", 'wb') as f_out:{%br%}
            shutil.copyfileobj(f_in, f_out){%br%}
      outNewFile=outFile+".gz"{%br%}
    else:{%br%}
       with open(inFile, 'rb') as f_in:{%br%}
        with gzip.open(os.path.splitext(inFile)[0]+outFile, 'wb') as f_out:{%br%}
            shutil.copyfileobj(f_in, f_out){%br%}
       outNewFile=(inFile+outFile){%br%}
    if removeOriginal==True:{%br%}
        os.remove(inFile){%br%}
    return (outNewFile){%br%}

def LoadData(runMode):{%br%}
  try:
    #Set variables from extended properties{%br%}
    os.environ["DEBUG"]              = WslPythonCommon.GetExtendedProperty("SF_DEBUG_MODE",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["ACCESS_KEY"]         = WslPythonCommon.GetExtendedProperty("SF_ACCESS_KEY",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["SECRET_KEY"]         = WslPythonCommon.GetExtendedProperty("SF_SECRET_KEY",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["SEND_FILES_ZIPPED"]  = WslPythonCommon.GetExtendedProperty("SF_SEND_FILES_ZIPPED",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["FILE_FORMAT"]        = WslPythonCommon.GetExtendedProperty("SF_FILE_FORMAT",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["SNOWSQL_ACCOUNT"]    = WslPythonCommon.GetExtendedProperty("SF_SNOWSQL_ACCOUNT",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["SNOWSQL_DATABASE"]   = WslPythonCommon.GetExtendedProperty("SF_SNOWSQL_DATABASE",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["SNOWSQL_SCHEMA"]     = WslPythonCommon.GetExtendedProperty("SF_SNOWSQL_SCHEMA",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["SNOWSQL_WAREHOUSE"]  = WslPythonCommon.GetExtendedProperty("SF_SNOWSQL_WAREHOUSE",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["UNICODE_SUPPORT"]    = WslPythonCommon.GetExtendedProperty("SF_UNICODE_SUPPORT",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["UNLOAD_DELIM"]       = WslPythonCommon.GetExtendedProperty("SF_UNLOAD_DELIMITER",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["UNLOAD_ENC"]         = WslPythonCommon.GetExtendedProperty("SF_UNLOAD_ENCLOSED_BY",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["UNLOAD_ESC"]         = WslPythonCommon.GetExtendedProperty("SF_UNLOAD_ESCAPE_CHAR",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["SPLIT_THRESHOLD"]    = WslPythonCommon.GetExtendedProperty("SF_SPLIT_THRESHOLD",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["FILE_COUNT"]         = WslPythonCommon.GetExtendedProperty("SF_SPLIT_COUNT",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["TIMEZONE"]           = WslPythonCommon.GetExtendedProperty("SF_TIMEZONE",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["FILE_TYPE"]          = WslPythonCommon.GetExtendedProperty("SF_FILE_TYPE",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["EXTERNAL_STAGE"]     = WslPythonCommon.GetExtendedProperty("SF_EXTERNAL_STAGE",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["AZ_SAS_TOKEN"]       = WslPythonCommon.GetExtendedProperty("SF_AZURE_SAS_TOKEN",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["AZ_ENCRYPTION_TYPE"] = WslPythonCommon.GetExtendedProperty("SF_AZURE_ENCRYPTION_TYPE",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["AZ_ENCRYPTION_KEY"]  = WslPythonCommon.GetExtendedProperty("SF_AZURE_ENCRYPTION_KEY",str(os.environ["WSL_LOAD_TABLE"])){%br%}

    #Set defaults to variables if not set from extended properties{%br%}
    if os.environ["UNICODE_SUPPORT"]!="TRUE":{%br%}
        os.environ["UNICODE_SUPPORT"] = "FALSE"{%br%}

    if os.environ["SEND_FILES_ZIPPED"]!="TRUE":{%br%}
        os.environ["SEND_FILES_ZIPPED"] = "FALSE"{%br%}

    if os.environ["FILE_COUNT"]== 1:{%br%}
        os.environ["FILE_COUNT"]= 1{%br%}

    if os.environ["UNLOAD_DELIM"]=="":{%br%}
        os.environ["UNLOAD_DELIM"] = "|"{%br%}

    if os.environ["UNLOAD_ENC"]=="":{%br%}
        os.environ["UNLOAD_ENC"] = '"'{%br%}

    if os.environ["UNLOAD_ESC"]=="":{%br%}
        os.environ["UNLOAD_ESC"] = "#"{%br%}

    if os.environ["FILE_TYPE"]=="":{%br%}
        os.environ["FILE_TYPE"] = "CSV"{%br%}

    if os.environ["FILE_FORMAT"]=="":{%br%}
        os.environ["FILE_FORMAT"] = "FMT_RED_CSV_SKIP_GZIP_COMMA"{%br%}

    unicode = False{% br %}
    if str(os.getenv('UNICODE_SUPPORT'))== "TRUE":{% br %}
       unicode = True{% br %}
    if str(os.getenv('FILE_COUNT'))=="None":{% br %}
      fileCount=0{% br %}
    else:{% br %}
      fileCount=int(str(os.getenv('FILE_COUNT'))){% br %}

    if str(os.getenv('SPLIT_THRESHOLD'))=="None":{% br %}
      splitThresholdCount=0{% br %}
    else:{% br %}
      splitThresholdCount=int(str(os.getenv('SPLIT_THRESHOLD'))){% br %}

    #Set environment variables for snowflake credentials{%br%}
    os.environ["SNOWSQL_USER"] = os.environ["WSL_TGT_USER"]{%br%}
    os.environ["SNOWSQL_PWD"]  = os.environ["WSL_TGT_PWD"]{%br%}

    # Work out full file format name{%- br %}
    FILE_FORMAT_FULL=WslPythonCommon.GetFileFormatFullName( os.environ["FILE_FORMAT"] )
    os.environ["fileFormatFullName"] = ""
    if FILE_FORMAT_FULL != "":
         os.environ["fileFormatFullName"] = FILE_FORMAT_FULL+"."+os.environ["FILE_FORMAT"]
    else:
      os.environ["fileFormatFullName"] = os.environ["FILE_FORMAT"]

    filePath = os.environ["WSL_WORKDIR"]{%br%}
    auditLog=str(os.environ["WSL_LOAD_TABLE"])+"_"+str(os.getenv('WSL_SEQUENCE'))+".txt"{%br%}
    logStream = open(os.path.join(filePath,auditLog), 'a+'){%br%}

  except Exception as exceptionError:{%br%}
   raise{%br%}
  try:
    if str(os.getenv('DEBUG'))== "TRUE":{%br%}
         logStream.write("=================== LOAD OPTIONS ===================\n"){%br%}
         logStream.write("Specified Load Table:        " + str(os.environ["WSL_LOAD_TABLE"])+'\n'){%br%}
         logStream.write("Specified Work Dir:          " + str(os.getenv('WSL_WORKDIR'))+'\n'){%br%}
         logStream.write("Specified Sequence:          " + str(os.getenv('WSL_SEQUENCE'))+'\n'){%br%}
         logStream.write("Specified Metadata ODBC DSN: " + str(os.getenv('WSL_META_DSN'))+'\n'){%br%}
         logStream.write("Specified Metadata Username: " + str(os.getenv('WSL_META_USER'))+'\n'){%br%}
         logStream.write("Specified Metadata Password: " + ('*'*len(str(os.getenv('WSL_META_PWD'))))+'\n'){%br%}
         logStream.write("")
         if runMode == 'S3':{%br%}
             logStream.write("=================== CONNECTION OPTIONS ==================="+'\n'){%br%}
             logStream.write("Access Key:                  " +  ('*'*len(str(os.getenv('ACCESS_KEY'))))+'\n'){%br%}
             logStream.write("Secret Key:                  " +  ('*'*len(str(os.getenv('SECRET_KEY'))))+'\n'){%br%}
             logStream.write(""){%br%}

         elif runMode == "AZ":{%br%}
             logStream.write("=================== CONNECTION OPTIONS ==================="+'\n'){%br%}
             logStream.write("SAS Token:                          " +  ('*'*len(str(os.getenv('AZ_SAS_TOKEN'))))+'\n'){%br%}
             logStream.write("Encryption Method:                  " +  str(os.getenv('AZ_ENCRYPTION_TYPE'))+'\n'){%br%}
             logStream.write("Encryption Key:                     " +  ('*'*len(str(os.getenv('AZ_ENCRYPTION_KEY'))))+'\n'){%br%}
             logStream.write(""){%br%}

         logStream.write("=================== MODES ==================="+'\n'){%br%}
         logStream.write("Specified Debug Mode:        " + str(os.getenv('DEBUG'))+'\n'){%br%}
         logStream.write("Specified Run Mode:          " + runMode+'\n'){%br%}
         logStream.write("Unicode Extract:             " + str(os.getenv('UNICODE_SUPPORT'))+'\n'){%br%}
         logStream.write(""){%br%}

         if runMode == 'Database':{%br%}
             logStream.write("=================== SOURCE TABLE INFO ==================="+'\n'){%br%}
             logStream.write("Source Schema:               " + str(os.getenv('WSL_SRC_SCHEMA'))+'\n'){%br%}
             logStream.write("Source Tables:               " + "address"+'\n'){%br%}
             logStream.write("Source Where:                " + ""+'\n'){%br%}
             logStream.write(""+'\n'){%br%}
             logStream.write("=================== SOURCE DB INFO ==================="+'\n'){%br%}
             logStream.write("ODBC Source DSN:             " + str(os.getenv('WSL_SRC_DSN'))+'\n'){%br%}
             logStream.write("ODBC Source Username:        " + str(os.getenv('WSL_SRC_USER'))+'\n'){%br%}
             logStream.write("ODBC Source Password:        " + ('*'*len(str(os.getenv('WSL_SRC_PWD'))))+'\n'){%br%}
             logStream.write(""){%br%}

         logStream.write("=================== EXTENDED PROPERTIES ==================="+'\n'){%br%}
         logStream.write("SF_SNOWSQL_ACCOUNT:       " + str(os.getenv('SNOWSQL_ACCOUNT'))+'\n'){%br%}
         logStream.write("SF_SNOWSQL_WAREHOUSE:     " + str(os.getenv('SNOWSQL_WAREHOUSE'))+'\n'){%br%}
         logStream.write("SF_SNOWSQL_DATABASE:      " + str(os.getenv('SNOWSQL_DATABASE'))+'\n'){%br%}
         logStream.write("SF_SNOWSQL_SCHEMA:        " + str(os.getenv('SNOWSQL_SCHEMA'))+'\n'){%br%}
         logStream.write("SF_FILE_FORMAT:           " + str(os.getenv('FILE_FORMAT'))+'\n'){%br%}
         logStream.write("SF_SEND_FILES_ZIPPED:     " + str(os.getenv('SEND_FILES_ZIPPED'))+'\n'){%br%}
         logStream.write("SF_UNLOAD_DELIMITER:      " + str(os.getenv('UNLOAD_DELIM'))+'\n'){%br%}
         logStream.write("SF_UNLOAD_ENCLOSED_BY:    " + str(os.getenv('UNLOAD_ENC'))+'\n'){%br%}
         logStream.write("SF_UNLOAD_ESCAPE_CHAR:    " + str(os.getenv('UNLOAD_ESC'))+'\n'){%br%}
         logStream.write("SF_SPLIT_THRESHOLD:       " + str(os.getenv('SPLIT_THRESHOLD'))+'\n'){%br%}
         logStream.write("SF_SPLIT_COUNT:           " + str(os.getenv('FILE_COUNT'))+'\n'){%br%}
         logStream.write("SF_TIMEZONE:              " + str(os.getenv('TIMEZONE'))+'\n'){%br%}
         logStream.write("SF_FILE_TYPE:             " + str(os.getenv('FILE_TYPE'))+'\n'){%br%}
         logStream.write("SF_EXTERNAL_STAGE:        " + str(os.getenv('EXTERNAL_STAGE'))+'\n'){%br%}
         logStream.write("SF_AZURE_SAS_TOKEN:       " + str(os.getenv('AZ_SAS_TOKEN'))+'\n'){%br%}
         logStream.write("SF_AZURE_ENCRYPTION_TYPE: " + str(os.getenv('AZ_ENCRYPTION_TYPE'))+'\n'){%br%}
         logStream.write("SF_AZURE_ENCRYPTION_KEY:  " + str(os.getenv('AZ_ENCRYPTION_KEY'))+'\n'){%br%}
         logStream.write(""){%br%}
    {%- br %}
    {% if (table.loadInfo.sourceConnectionType.name == "ODBC") or (table.loadInfo.sourceConnectionType.name == "Database") -%}
    fileDat = "wsl"+str(os.environ["WSL_LOAD_TABLE"])+str(os.getenv('WSL_SEQUENCE')){%br%}
    {%- br %}
    logStream.write("================= EXTRACT SQL =====================\n"){%br%}
    {%- set empty = "" %}
    extractSql = """
    SELECT
      {%- from table.columns as column where (column.sourceTable is defined or column.sourceColumn is defined or column.transformType.code == "D") %}
        {%- if not loop.first %}    , {% else %} {% endif %}
        {%- if column.transformType.code != "A" %}
          {{- column.source }}
        {%- else %}
          {%- if column.sourceTable is defined %}
            {%- fetch column.sourceTable %}
            {{- column.sourceTable.name }}.
          {%- endif %}
          {%- if column.sourceColumn is defined %}
            {{- column.sourceColumn.name }}
          {%- endif %}
        {%- endif %}
        {%- br %}
      {%- endfrom %}
    {%- if table.loadInfo.sourceTables != "" -%}FROM """+str(os.getenv('WSL_SRC_SCHEMA'))+""".{{ table.loadInfo.sourceTables }} {{table.loadInfo.sourceTables }}{%- br %}{% endif %}
    {%- from table.loadInfo.whereAndGroupByClauses | lines as whereLine %}
		 {{ whereLine }}{% br %}
    {%- endfrom %}
"""{%- br %}
    {%- br %}

    logStream.write(extractSql)

    if str(os.getenv('DEBUG'))== "TRUE":{% br %}
       logStream.write("BEGIN create of data file from source system: "+str(datetime.now())+'\n'){% br %}


    rowCount = WslPythonCommon.GetDataToFile(extractSql,str(os.getenv('WSL_SRC_DSN')),str(os.getenv('WSL_SRC_USER')),str(os.getenv('WSL_SRC_PWD')),os.path.join(filePath,fileDat),str(os.getenv('UNLOAD_DELIM')), fileCount, splitThresholdCount, True, unicode, str(os.getenv('UNLOAD_ENC')), str(os.getenv('UNLOAD_ESC'))){% br %}
    if rowCount[0]== -2:
       logStream.write("An error has occurred: : " + rowCount[1]+"\n"+rowCount[2])
       raise Exception(rowCount[2])
    elif rowCount[0]==1 and  rowCount[1]< 1:
      logStream.write("Source query returned 0 rows"+'\n')
      print("1")
      print("Source query returned 0 rows"+'\n')
      PrintLog(logStream)

    if str(os.getenv('DEBUG')) == "TRUE":
       logStream.write("END create of data file from source system: "+str(datetime.now())+'\n'){% br %}


    #For multiple input files add file name to list
    dataFiles = []{% br %}
    for f in glob.iglob(os.path.join(filePath,fileDat)+'*.txt'): {% br %}
        dataFiles.append(f){% br %}
    {%- else %}
    {% br %}
    fileDat = "{{ table.loadInfo.sourceFile.name }}"
    fileHeader ="{{ table.loadInfo.sourceFile.headerLine }}"
    newName=""
    if runMode == "Windows" and str(os.getenv('EXTERNAL_STAGE')) =="":
        filePath = r"{{ table.loadInfo.sourceFile.path }} ".replace("\ ","").strip(){%- br %} {%- br %}
        loadFile = os.path.join("{{ table.loadInfo.sourceFile.path }} ".replace("\ ","").strip(),fileDat){%- br %}
        {%- if table.loadInfo.triggerFile.name|trim != "" %}
        triggerFile = os.path.join( r'{{ table.loadInfo.triggerFile.path }} '.replace("\ ","").strip(), '{{ table.loadInfo.triggerFile.name }}'){% br %}
        {%- endif %}
        {% br %}
        {%- if table.loadInfo.wait %}
        # Wait Timer Check
        # If a wait time specified then loop looking for the file
        # or trigger file to arrive until the wait time expires.
        {% br %}
        {%- if table.loadInfo.triggerFile.name|trim != "" %}
        waitForFileName = triggerFile{% br %}
        {%- else %}
        waitForFileName = loadFile{% br %}
        {%- endif %}
        waitForSeconds = {{ table.loadInfo.waitSeconds }}{% br %}
        timeToWait = waitForSeconds
        timeCounter ={{ table.loadInfo.waitSeconds }}{% br %}
        while not os.path.exists(waitForFileName):
            time.sleep(1)
            timeCounter += 1
            if timeCounter > timeToWait:break
        # Finished our wait loop. See if we have the file
        {% br %}
        {%- endif %}
        # File Check
        {% if table.loadInfo.triggerFile.name|trim != "" %}{% br %}
        fileCheck = triggerFile{% br %}
        {%- else -%}
        fileCheck = loadFile{% br %}
        {%- endif -%}{% br %}
        dataFiles = []{% br %}
        for f in glob.iglob(os.path.join(filePath,fileDat)):{% br %}
            dataFiles.append(f){% br %}
        {% if table.loadInfo.triggerFile.name|trim != "" %}{% br %}
        if os.path.exists(fileCheck)==False:{%- br %}
            {%- if table.loadInfo.waitAction is defined %}
              {%- if table.loadInfo.waitAction.name == "Warning" %}
              print("-1"){%- br %}
              {%- elseif table.loadInfo.waitAction.name == "Error" %}
              print("-2"){%- br %}
              {%- elseif table.loadInfo.waitAction.name == "Fatal Error" %}
              print("-3"){%- br %}
              {%- elseif table.loadInfo.waitAction.name == "Success" %}
              print("1"){%- br %}
              {%- endif %}
            {%- else %}
              print("-1")
            {%- endif %}
              print("File "+ fileCheck +" was not found. "){%- br %}
              logStream.close(){%- br %}
              PrintLog(os.path.join(str(os.environ["WSL_WORKDIR"]),auditLog)){%- br %}
              sys.exit(){%- br %}
              {%- else -%}{%- br %}
        if len(dataFiles)==0:{%- br %}
            {%- if table.loadInfo.waitAction is defined %}
              {%- if table.loadInfo.waitAction.name == "Warning" %}
              print("-1"){%- br %}
              {%- elseif table.loadInfo.waitAction.name == "Error" %}
              print("-2"){%- br %}
              {%- elseif table.loadInfo.waitAction.name == "Fatal Error" %}
              print("-3"){%- br %}
              {%- elseif table.loadInfo.waitAction.name == "Success" %}
              print("1"){%- br %}
              {%- endif %}
            {%- else %}
              print("-1")
            {%- endif %}
              print("File "+ fileCheck +" was not found. "){%- br %}
              logStream.close(){%- br %}
              PrintLog(os.path.join(str(os.environ["WSL_WORKDIR"]),auditLog)){%- br %}
              sys.exit(){%- br %}
        {%- endif -%}
        {%- br %}
        sourceFiles=[]{% br %}
        sourceFiles.extend(dataFiles){% br %}
        rowCount = 0 {%- br %}
        dataFilesCopy = dataFiles
        dataFiles=[]
        originalDat = fileDat
        for sourceFile in dataFilesCopy:
            rowCount = 0
            if os.environ["UNICODE_SUPPORT"]=="TRUE":
             with open(sourceFile, 'r', encoding='utf-8') as f:
              for line in f:
                rowCount += 1
            else:
             with open(sourceFile, 'r') as f:
              for line in f:
                rowCount += 1
            if fileHeader=="true":
                rowCount =rowCount-1
            cleanedDat = originalDat.replace("*","")
            if int(os.environ["FILE_COUNT"]) > 1:
                filePath = os.environ["WSL_WORKDIR"]
                if rowCount > os.environ["SPLIT_THRESHOLD"]:
                    fileToSplit = sourceFile
                    i=0
                    while i < os.environ["FILE_COUNT"]:
                        threeDigits = str(i)
                        newName = sourceFile.replace(cleanedDat,cleanedDat + "_" + os.environ["WSL_SEQUENCE"] + "-" + os.environ["WSL_TASK_KEY"] + "_p" + threeDigits)
                        splitPath =os.path.join( os.environ["WSL_WORKDIR"],newName)
                        dataFiles.append(splitPath)
                        swl.append(sw)
                        if os.environ["DEBUG"]== "TRUE":
                            logStream.write("Source file '$(Get-Item $sourceFile).Name' Part ${threeDigits}: $splitPath")
                        i=i+1
                    swNum = 0
                    if fileHeader == "true":
                        headerLine = fileToSplit.readline()
                        for sw in swl:
                          sw.writelines(headerLine)
                    while True:
                        line = fileToSplit.readline().strip()
                        if line=="":
                           break
                        if swNum >=os.environ["FILE_COUNT"]:
                            swNum = 0
                        swl[swNum].writelines(line);
                        swNum=swNum+1
                else:
                    newName = sourceFile.replace(cleanedDat,cleanedDat + "_" + os.environ["WSL_SEQUENCE"]+ "-" + os.environ["WSL_TASK_KEY"] + "_p000")
                    notSplitPath = os.path.join(os.environ["WSL_WORKDIR"],newName)
                    sourceFile=notSplitPath
                    dataFiles.append(notSplitPath)
                    if os.environ["DEBUG"] == "TRUE":
                        logStream.write("Source file "+sourceFile+" Part 000: "+notSplitPath)
                fileDat = cleanedDat + "_" + os.environ["WSL_SEQUENCE"] + "-" + os.environ["WSL_TASK_KEY"] + "*"
            else:
              dataFiles.append(sourceFile)
    else: {%- br %}
        filePath = s3Prefix{%- br %}
        if filePath.endswith('\\')==False:{%- br %}
            filePath =filePath+ '\\'{%- br %}
        {%- br %}
    {%- endif %}
    if runMode != "S3" and runMode != "AZ" and os.environ["EXTERNAL_STAGE"] =="":{% br %}
     sourcePath = filePath{% br %}
     x=0{% br %}
     while x< len(dataFiles):{% br %}
        originalName = dataFiles[x]{% br %}
        if os.environ["SEND_FILES_ZIPPED"] == "TRUE":{% br %}
           {%- if table.loadInfo.sourceConnectionType.name == "Windows" %}{% br %}
           noPath=os.path.basename(dataFiles[x]){% br %}
           if int(os.environ["FILE_COUNT"]) < 2:
              noPath = noPath.replace(cleanedDat,cleanedDat + "_" + os.environ["WSL_SEQUENCE"] + "-" + os.environ["WSL_TASK_KEY"]){% br %}
           dataFiles[x]=GzipFile(dataFiles[x],os.path.join(os.environ["WSL_WORKDIR"],noPath),False){% br %}
           {%- else %}
           dataFiles[x]=GzipFile(dataFiles[x],'.gz',True){% br %}
           {%- endif %}{% br %}
           {%- if table.loadInfo.sourceConnectionType.name == "Windows" %}{% br %}
           filePath = os.environ["WSL_WORKDIR"]{% br %}
           logStream.write("File "+originalName+" GZipped to " + noPath+" prior to upload\n"){% br %}
           {%- else %}
           logStream.write("File "+ originalName +" GZipped to"+ dataFiles[x] +" prior to upload\n") {% br %}
           {%- endif %}
        x=x+1 {% br %}
     {%- if table.loadInfo.sourceConnectionType.name == "Windows" %}
     if int(os.environ["FILE_COUNT"]) < 2:
        if os.environ["SEND_FILES_ZIPPED"] == "TRUE": {% br %}
           fileDat = cleanedDat + "_" + os.environ["WSL_SEQUENCE"] + "-" + os.environ["WSL_TASK_KEY"] + "*"
        {%- br %}
     {%- endif %}
    {%- br %}
    logStream.write("================= LOAD =================\n"){% br %}
    SFConnectionString = snowflake.connector.connect({% br %}
                user=str(os.getenv('WSL_TGT_USER')),{% br %}
                password=str(os.getenv('WSL_TGT_PWD')),{% br %}
                account=os.environ["SNOWSQL_ACCOUNT"],{% br %}
                warehouse=os.environ["SNOWSQL_WAREHOUSE"],{% br %}
                database=os.environ["SNOWSQL_DATABASE"],{% br %}
                schema=os.environ["SNOWSQL_SCHEMA"]{% br %}
                ){% br %}
    if os.environ["EXTERNAL_STAGE"] =="": {% br %}
       externalStageName="@~/WSL-"+str(os.getenv('WSL_SEQUENCE'))+"-"+str(os.getenv('WSL_TASK_KEY'))+" t" {% br %}
    else: {% br %}
       externalStageName="@"+os.environ["EXTERNAL_STAGE"] +"/"+fileDat+" t" {% br %}
    if (runMode != "S3" and runMode != "AZ") or os.environ["EXTERNAL_STAGE"] !="":{% br %}
        if runMode != "S3" and runMode != "AZ" and os.environ["EXTERNAL_STAGE"] =="":{% br %}
            removeSQL = "remove @~/WSL-"+str(os.getenv('WSL_SEQUENCE'))+"-"+str(os.getenv('WSL_TASK_KEY'))+"*"+";"{% br %}
            SFconn = SFConnectionString.cursor(){% br %}
            SFconn.execute(removeSQL){% br %}
            SFconn.close(){% br %}
            logStream.write(os.path.join(filePath,fileDat))
            if os.environ["SEND_FILES_ZIPPED"] == "TRUE":{% br %}
               putSQL = "PUT "+"file://" +os.path.join(filePath,fileDat)+"*.gz"+" @~/WSL-"+str(os.getenv('WSL_SEQUENCE'))+"-"+str(os.getenv('WSL_TASK_KEY'))+";"{% br %}
            else:{% br %}
               putSQL = "PUT "+"file://" +os.path.join(filePath,fileDat)+"*"+" @~/WSL-"+str(os.getenv('WSL_SEQUENCE'))+"-"+str(os.getenv('WSL_TASK_KEY'))+";"{% br %}
            SFconn = SFConnectionString.cursor(){% br %}
            SFconn.execute(putSQL){% br %}
            SFconn.close()
            if str(os.getenv('DEBUG'))== "TRUE":{% br %}
                 logStream.write("\nBEGIN PUT of files matching" +filePath+fileDat+" : "+str(datetime.now())+'\n'){% br %}
            logStream.write("\nPUT:\n"){% br %}
            logStream.write(putSQL){% br %}
            logStream.write("\n"){% br %}
            if str(os.getenv('DEBUG'))== "TRUE":{% br %}
                logStream.write("\nEND PUT of files matching " +fileDat+" : "+str(datetime.now())+'\n'){% br %}
{% br %}
 {%- set noindent = "" %}
        if os.environ["TIMEZONE"] !="":{% br %}
            tzStmt = "ALTER SESSION SET TIMEZONE ="+"'"+str(os.environ["TIMEZONE"]) +"'"+ ";`r`n"{% br %}
            logStream.write("\nSET TIMEZONE:"){% br %}
            logStream.write(tzStmt){% br %}
            SFconn = SFConnectionString.cursor(){% br %}
            SFconn.execute(tzStmt){% br %}
            SFconn.close(){% br %}
{% br %}
        if os.environ["FILE_TYPE"]== "CSV":{% br %}
            copyStatement ="""
            COPY INTO """+str(os.environ["WSL_LOAD_FULLNAME"])+"""
            ({{ noindent }}
              {%- for col in table.columns %}
               {%- if not loop.first %}
            , {{ noindent }}
                {%- endif %}
            {{- noindent }}{{ col.name }}{%- br %}
              {%- endfor %}
            ){%- br %}
            FROM ({%- br %}{% set csvPos = 0 %}
              SELECT {% for col in table.columns %}
                {%- if not loop.first %}                       , {% endif %}
                {%- if (table.loadInfo.sourceConnectionType.name == "Windows") and (col.name == dssRecordSrc ) %}METADATA$FILENAME
                {%- elseif col.transformType.code == "A" %}{{ col.source }}
                {%- else %}
                  {%- if table.loadInfo.sourceConnectionType.name == "Windows" %}{%- fetch col.sourceColumn -%}t.${{ (col.sourceColumn.name).Replace("COL","") }}
                  {%- else %}{% set csvPos = csvPos + 1 %}t.${{ csvPos }}
                  {%- endif %}
                {%- endif %}{% br %}
              {%- endfor %}
              FROM """+externalStageName+"""
            ){%- br %}
            FILE_FORMAT = '"""+os.environ["fileFormatFullName"] +"'"
            {%- if table.loadInfo.fileLoaderOptions != "" %}
            {{ table.loadInfo.fileLoaderOptions }}{%- br %}
            {%- endif %}

        else:{%- br %}
          copyStatement = """
          COPY INTO """+str(os.environ["WSL_LOAD_FULLNAME"])+"""
          FROM"""+ " @~/WSL"+str(os.getenv('WSL_SEQUENCE'))+"-"+str(os.getenv('WSL_TASK_KEY'))+"""
          FILE_FORMAT = '"""+os.environ["fileFormatFullName"] +"'"

        maskedLoad = copyStatement{%- br %}

        logStream.write("\nCOPY:\n")
        logStream.write(maskedLoad){%- br %}
        if str(os.getenv('DEBUG'))== "TRUE":{%- br %}
            logStream.write("\nBEGIN COPY INTO" +"'"+ str(os.environ["WSL_LOAD_FULLNAME"]) +"'" +" : "+str(datetime.now())+'\n'){%- br %}
        SFconn = SFConnectionString.cursor(){%- br %}
        loadResult=SFconn.execute(copyStatement).fetchall(){%- br %}
        if str(os.getenv('DEBUG'))== "TRUE":{%- br %}
            logStream.write("\nEND COPY INTO "+"'"+ str(os.environ["WSL_LOAD_FULLNAME"]) +"'" +" : "+str(datetime.now())+'\n'){%- br %}
        SFconn.close(){%- br %}
        checkStatus=0{%- br %}
        rowsLoaded=0{%- br %}
        checkFlag=0{%- br %}
        logStream.write("\nFile                                            " + "Status         " + "Rows Parsed        "+"Rows Loaded  \n"){%- br %}
        logStream.write("------------------------------------------------" + "---------------" + "-------------------"+"-------------------  \n"){%- br %}
        while len(loadResult)> checkStatus:{%- br %}
                if loadResult[checkStatus][5] == 0:{%- br %}
                    rowsLoaded = rowsLoaded + loadResult[checkStatus][3] {%- br %}
                else:  {%- br %}
                    checkFlag=1 {%- br %}
                logStream.write(str(loadResult[checkStatus][0])+"       "+str(loadResult[checkStatus][1])+"       "+str(loadResult[checkStatus][2])+"       "+str(loadResult[checkStatus][3])+"       \n"){%- br %}
                checkStatus = checkStatus+1   {%- br %}
        if checkFlag==0:    {%- br %}
            logStream.write(str(rowsLoaded) +" rows loaded.\n"){%- br %}
            try:
                #-- WsWrkTask call to updated row counts in Ws_Wrk_Task_Run/Log{%- br %}
                metaResult=WslPythonCommon.WsWrkTask(0,0,0,rowsLoaded,0,0,0){%- br %}
            except:{%- br %}
                logStream.write("Failed to update task row count"){%- br %}
            print("1"){%- br %}
            print("Load successful. "+str(rowsLoaded)+" rows loaded"){%- br %}
            if str(os.getenv('DEBUG'))== "FALSE":{%- br %}
            {%- if table.loadInfo.sourceConnectionType.name != "Windows" %}
                x=0{%- br %}
                while x< len(dataFiles):{%- br %}
                    os.remove(str(dataFiles[x]).split(".")[0]+".gz"){%- br %}
                    x=x+1{%- br %}
            {%- else %}{%- br %}
              if os.environ["EXTERNAL_STAGE"] =="":
                if os.environ["SEND_FILES_ZIPPED"] == "TRUE" or int(os.environ["FILE_COUNT"]) >1:{%- br %}
                    if fileDat[-1]=="*":
                        x=0{%- br %}
                        while x< len(glob.glob(os.path.join(filePath,fileDat))):{%- br %}
                            os.remove(glob.glob(os.path.join(filePath,fileDat))[x]){%- br %}
                            x=x+1{%- br %}
                    else:{%- br %}
                        os.remove(os.path.join(filePath,fileDat)){%- br %}
            {%- endif %}{%- br %}
                SFconn = SFConnectionString.cursor(){%- br %}
                SFconn.execute(removeSQL){%- br %}
                SFconn.close(){%- br %}
            else: {%- br %}
                logStream.write("Temporary data files not removed as debug mode is enabled"){%- br %}
        else:{%- br %}
            logStream.write("-2"){%- br %}
            logStream.write("Load failed"){%- br %}
            PrintLog(os.path.join(filePath,auditLog)){%- br %}
        {%- if (table.loadInfo.archiveFile.path != "") or (table.loadInfo.archiveFile.name != "") and (table.loadInfo.sourceConnectionType.name == "Windows") %}
        ArchiveFiles(sourceFiles,runMode,logStream){%- br %}
        {%- endif %}
        {%- if (table.loadInfo.triggerArchiveFile.path != "") or (table.loadInfo.triggerArchiveFile.name != "") and (table.loadInfo.sourceConnectionType.name == "Windows") %}
        ArchiveTrigger([os.path.join('{{ table.loadInfo.triggerFile.path }} '.replace("\ ","").strip(),'{{ table.loadInfo.triggerFile.name }}')],logStream){%- br %}
        {%- endif %}
    elif runMode == "S3":{%- br %}
            if os.environ["TIMEZONE"] !="":{%- br %}
                tzStmt = "ALTER SESSION SET TIMEZONE ="+"'"+str(os.environ["TIMEZONE"]) +"'"+ ";`r`n"{%- br %}
                logStream.write("\nSET TIMEZONE:"){%- br %}
                logStream.write(tzStmt){%- br %}
                SFconn = SFConnectionString.cursor(){%- br %}
                SFconn.execute(tzStmt){%- br %}
                SFconn.close(){%- br %}
            copyStatement = """{%- br %}
            COPY INTO """+str(os.environ["WSL_LOAD_FULLNAME"])+"""
            FROM"""+ " @~/WSL"+str(os.getenv('WSL_SEQUENCE'))+"-"+str(os.getenv('WSL_TASK_KEY'))+" CREDENTIALS = (AWS_KEY_ID="+str(os.getenv('ACCESS_KEY'))+ " AWS_SECRET_KEY="+str(os.getenv('SECRET_KEY'))+") "+"""
            FILE_FORMAT = """+"'"+os.environ["fileFormatFullName"] +"'"{%- br %}
            maskedLoad = copyStatement{%- br %}
            if str(os.getenv('ACCESS_KEY')) !="":{%- br %}
                maskedLoad = maskedLoad.replace(str(os.getenv('ACCESS_KEY')),'*'* len(str(os.getenv('ACCESS_KEY')))){%- br %}

            if str(os.getenv('SECRET_KEY')) !="":{%- br %}
                maskedLoad = maskedLoad.replace(str(os.getenv('SECRET_KEY')),'*'* len(str(os.getenv('SECRET_KEY')))){%- br %}

            logStream.write("\nCOPY:\n"){%- br %}
            logStream.write(maskedLoad){%- br %}
            logStream.write(""){%- br %}
            if str(os.getenv('DEBUG'))== "TRUE":{%- br %}
                logStream.write("\nBEGIN COPY INTO" +"'"+ str(os.environ["WSL_LOAD_FULLNAME"]) +"'" +" : "+str(datetime.now())+'\n'){%- br %}
            SFconn = SFConnectionString.cursor(){%- br %}
            loadResult=SFconn.execute(copyStatement).fetchall(){%- br %}
            if str(os.getenv('DEBUG'))== "TRUE":{%- br %}
                logStream.write("\nEND COPY INTO "+"'"+ str(os.environ["WSL_LOAD_FULLNAME"]) +"'" +" : "+str(datetime.now())+'\n'){%- br %}
            checkStatus=0{%- br %}
            rowsLoaded=0{%- br %}
            checkFlag=0{%- br %}
            logStream.write("\nFile                                            " + "Status         " + "Rows Parsed        "+"Rows Loaded  \n"){%- br %}
            logStream.write("------------------------------------------------" + "---------------" + "-------------------"+"-------------------  \n"){%- br %}
            while len(loadResult)> checkStatus:{%- br %}
                if loadResult[checkStatus][5] == 0:{%- br %}
                    rowsLoaded = rowsLoaded + loadResult[checkStatus][3] {%- br %}
                else: {%- br %}
                    checkFlag=1 {%- br %}
                logStream.write(str(loadResult[checkStatus][0])+"       "+str(loadResult[checkStatus][1])+"       "+str(loadResult[checkStatus][2])+"       "+str(loadResult[checkStatus][3])+"       \n"){%- br %}
                checkStatus = checkStatus+1  {%- br %}
            if checkFlag==0:  {%- br %}
                logStream.write(str(rowsLoaded) +" rows loaded.\n"){%- br %}
                try:{%- br %}
                #-- WsWrkTask call to updated row counts in Ws_Wrk_Task_Run/Log
                    metaResult=WslPythonCommon.WsWrkTask(0,0,0,rowsLoaded,0,0,0){%- br %}
                except:{%- br %}
                    logStream.write("Failed to update task row count"){%- br %}
                print("1"){%- br %}
                print("Load successful. "+str(rowsLoaded)+" rows loaded"){%- br %}
                if str(os.getenv('DEBUG'))== "FALSE":{%- br %}
                   x=0{%- br %}
                   while x< len(dataFiles):{%- br %}
                    os.remove(os.path.splitext(str(dataFiles[x]))[0]+".gz"){%- br %}
                    x=x+1{%- br %}
                   SFconn = SFConnectionString.cursor(){%- br %}
                   SFconn.execute(removeSQL){%- br %}
                   SFconn.close(){%- br %}
                else: {%- br %}
                  logStream.write("Temporary data files not removed as debug mode is enabled"){%- br %}
            else:{%- br %}
              logStream.write("-2"){%- br %}
              logStream.write("Load failed"){%- br %}
              PrintLog(os.path.join(filePath,auditLog)){%- br %}
    else:{%- br %}
        if os.environ["TIMEZONE"] !="":{%- br %}
                tzStmt = "ALTER SESSION SET TIMEZONE ="+"'"+str(os.environ["TIMEZONE"]) +"'"+ ";`r`n"{%- br %}
                logStream.write("\nSET TIMEZONE:"){%- br %}
                logStream.write(tzStmt){%- br %}
                SFconn = SFConnectionString.cursor(){%- br %}
                SFconn.execute(tzStmt){%- br %}
                SFconn.close(){%- br %}
        copyStatement = """
        COPY INTO """+str(os.environ["WSL_LOAD_FULLNAME"])+"""
        FROM"""+ " @~/WSL"+str(os.getenv('WSL_SEQUENCE'))+"-"+str(os.getenv('WSL_TASK_KEY'))+"  CREDENTIALS = (AZURE_SAS_TOKEN="+str(os.getenv('AZ_SAS_TOKEN'))+"  ENCRYPTION = (TYPE="+str(os.getenv('AZ_ENCRYPTION_TYPE'))+" MASTER_KEY="+"'"+str(os.getenv('AZ_ENCRYPTION_KEY'))+"'"+"FILE_FORMAT = "+"'"+str(os.getenv('FILE_FORMAT'))+"'"{%- br %}
        maskedLoad = copyStatement{%- br %}
        if str(os.getenv('AZ_SAS_TOKEN')) !="":{%- br %}
            maskedLoad = maskedLoad.replace(str(os.getenv('AZ_SAS_TOKEN')),'*'* len(str(os.getenv('AZ_SAS_TOKEN')))){%- br %}

        if str(os.getenv('AZ_ENCRYPTION_KEY')) !="":{%- br %}
            maskedLoad = maskedLoad.replace(str(os.getenv('AZ_ENCRYPTION_KEY')),'*'* len(str(os.getenv('AZ_ENCRYPTION_KEY')))){%- br %}

        logStream.write("\nCOPY:\n"){%- br %}
        logStream.write(maskedLoad){%- br %}
        logStream.write(""){%- br %}
        if str(os.getenv('DEBUG'))== "TRUE":{%- br %}
            logStream.write("\nBEGIN COPY INTO" +"'"+ str(os.environ["WSL_LOAD_FULLNAME"]) +"'" +" : "+str(datetime.now())+'\n'){%- br %}
        SFconn = SFConnectionString.cursor(){%- br %}
        loadResult=SFconn.execute(copyStatement).fetchall(){%- br %}
        SFconn.close(){%- br %}
        if str(os.getenv('DEBUG'))== "TRUE":{%- br %}
            logStream.write("\nEND COPY INTO "+"'"+ str(os.environ["WSL_LOAD_FULLNAME"]) +"'" +" : "+str(datetime.now())+'\n') {%- br %}
        checkStatus=0{%- br %}
        rowsLoaded=0{%- br %}
        checkFlag=0{%- br %}
        logStream.write("\nFile                                            " + "Status         " + "Rows Parsed        "+"Rows Loaded  \n"){%- br %}
        logStream.write("------------------------------------------------" + "---------------" + "-------------------"+"-------------------  \n"){%- br %}
        while len(loadResult)> checkStatus:{%- br %}
                if loadResult[checkStatus][5] == 0:{%- br %}
                    rowsLoaded = rowsLoaded + loadResult[checkStatus][3] {%- br %}
                else:  {%- br %}
                    checkFlag=1
                logStream.write(str(loadResult[checkStatus][0])+"       "+str(loadResult[checkStatus][1])+"       "+str(loadResult[checkStatus][2])+"       "+str(loadResult[checkStatus][3])+"       \n"){%- br %}
                checkStatus = checkStatus+1    {%- br %}
        if checkFlag==0:    {%- br %}
            logStream.write(str(rowsLoaded) +" rows loaded.\n"){%- br %}
            try:{%- br %}
                #-- WsWrkTask call to updated row counts in Ws_Wrk_Task_Run/Log
                metaResult=WslPythonCommon.WsWrkTask(0,0,0,rowsLoaded,0,0,0){%- br %}
            except Exception as exceptionError:{%- br %}
                logStream.write("Failed to update task row count"){%- br %}
                logStream.write(exceptionError.args){%- br %}
                logStream.write(exceptionError){%- br %}
            print("1"){%- br %}
            print("Load successful. "+str(rowsLoaded)+" rows loaded"){%- br %}
            if str(os.getenv('DEBUG'))== "FALSE":{%- br %}
                x=0{%- br %}
                while x< len(dataFiles):{%- br %}
                    os.remove(os.path.splitext(str(dataFiles[x]))[0]+".gz"){%- br %}
                    x=x+1{%- br %}
                SFconn = SFConnectionString.cursor(){%- br %}
                SFconn.execute(removeSQL){%- br %}
                SFconn.close(){%- br %}
            else: {%- br %}
                logStream.write("Temporary data files not removed as debug mode is enabled"){%- br %}
        else:{%- br %}
            logStream.write("-2"){%- br %}
            logStream.write("Load failed"){%- br %}
            PrintLog(os.path.join(filePath,auditLog)){%- br %}
    logStream.close(){%- br %}
    return os.path.join(str(os.environ["WSL_WORKDIR"]),auditLog){%- br %}
  except Exception as exceptionError:
    logStream.write("An error has occurred: : " + repr( exceptionError))
		 # Get a list of all the files created by load
    fileList = glob.glob(os.path.join(str(os.environ["WSL_WORKDIR"]),"*"+fileDat+"*"))
     # Iterate over the list of filepaths & remove each file.
    logStream.write("\nRolling back all files created")
    for filePath in fileList:
      try:
        os.remove(filePath)
        logStream.write("\nFile Deleted : " +filePath)
      except:
        logStream.write("\nError while deleting file : "+ filePath)
    logStream.close()
    raise Exception(repr( exceptionError))

try: {%- br %}
   {%- br %}
    {% if (table.loadInfo.sourceConnectionType.name == "ODBC") or (table.loadInfo.sourceConnectionType.name == "Database") -%}
    runMode = "Database"{%- br %}
    {%- else -%}
    s3Prefix = WslPythonCommon.GetExtendedProperty("SF_S3_BUCKET_PREFIX",str(os.environ["WSL_LOAD_TABLE"])){%- br %}
    if s3Prefix=="": {%- br %}
        runMode = "Windows"{% br %}
    {%- br %}
    elif s3Prefix.startsWith("s3://"):{%- br %}
        runMode = "S3"{%- br %}
    {%- br %}
    else:
        runMode = "AZ"
    {%- endif %}
		{%- br %}
    auditFile=LoadData(runMode){%- br %}
    PrintLog(auditFile){%- br %}
except Exception as exceptionError:{%- br %}
  print("-2"){%- br %}
  print("Load Failed"){%- br %}
  print(exceptionError.args){%- br %}
