{# -- TemplateVersion:001 MinVersion:8410 MaxVersion:* TargetType:Snowflake ModelType:STAR TemplateType:Python                                              -- #}
{# --                                                                                                                                                       -- #}
{# --    (c) WhereScape Ltd 2019. WhereScape Ltd permits you to copy this Template solely for use with the RED software, and to modify this Template        -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : SNOWFLAKE                                                                                                                        -- #}
{# -- Template Name      : wsl_snowflake_pyscript_stage                                                                                                     -- #}
{# -- RED Version        : 8.4.1.0                                                                                                                          -- #}
{# -- Description        : This template creates a Snowflake procedure using Insert                                                                         -- #}
{# --                      specifically designed for RED stage tables                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{# -- Notes / History                                                                                                                                       -- #}
{# -- 				                                                                                                                                              -- #}
{% fetch table %}
{% set counter = 0 %}
{% import "wsl_snowflake_utility_dml_py" %}
{% import "wsl_snowflake_utility" %}
{# --                                                            Start of main procedure text                                                               -- #}
#--=============================================================================={%br%}
#-- DBMS Name        :    SNOWFLAKE {{table.dbType.name}}{%br%}
#-- Block Name       :    {{settings.procedureName}}{%br%}
#-- Template         :    {{settings.template.name}}{%br%}
#-- Template Version :    8.4.1.0{%br%}
#-- Description      :    Update the {{table.objectType.name}} table {{table.name}}{%br%}
#-- Generated by     :    {{env.productVersion}}{%br%}
#-- Generated for    :    {{env.licensedTo}}{%br%}
#-- Generated on     :    {{env.currentTimestamp}}{%br%}
#-- Author           :    {{env.userName}}{%br%}
#--=============================================================================={%br%}
#-- Notes / History{%br%}
#--{%br%}

import os{%br%}
import sys{%br%}
import fnmatch{%br%}
sys.path.append('C:\ProgramData\WhereScape\Modules\WslPython'){%br%}
import WslPythonCommon{%br%}
import WslPythonSnowflake{%br%}
ret=WslPythonCommon.HideWindow(){%br%}
#--============================================================================{%br%}
#-- General Variables{%br%}
#--============================================================================{%br%}
sequence = os.environ["WSL_SEQUENCE"]{%br%}
jobName = os.environ["WSL_JOB_NAME"]{%br%}
taskName = os.environ["WSL_TASK_NAME"]{%br%}
jobId = os.environ["WSL_JOB_KEY"]{%br%}
taskId = os.environ["WSL_TASK_KEY"]{%br%}
returnMsg = "{{table.name}} updated."{%br%}
status = 1{%br%}
#--============================================================================{%br%}
#-- Main{%br%}
#--============================================================================{%br%}
step = {% counter %}00{%br%}
{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
deleteCount = 0{%br%}
{%- endif %}
insertCount = 0{%br%}
{%- for par in settings.parameters %}
  {%- if loop.first %}
{%br%}
#--============================================================================{%br%}
#-- Set Parameter Variables{%br%}
#--============================================================================{%br%}
step = {% counter %}00{%br%}{%br%}
  {%- endif %}
{{par}} = WslPythonCommon.WsParameterRead ("{{par}}")[0][0]{%br%}
{%- endfor %}
{% set timezoneParam = getExtendedProperty( propertyName = "SF_TIMEZONE" ) | trim -%}
{%- if timezoneParam != "" -%}
#--============================================================================{%br%}
#-- Set Timezone{%br%}
#--============================================================================{%br%}
step = {% counter %}00{%br%}{%br%}
timeZone = WslPythonCommon.GetExtendedProperty("SF_TIMEZONE","{{table.name}}"){% br %}
if timeZone and not timeZone.isspace():
    tzSql = "ALTER SESSION SET TIMEZONE = '"+timeZone+"'"
    SnowflakeResult=WslPythonSnowflake.RunSnowflakeRedSQL(tzSql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')),str(os.getenv('WSL_TGT_PWD')),'Failed to alter session timezone to '+str(step),'',step)
    status=SnowflakeResult[1]
    if status<1:
      returnMsg = str(SnowflakeResult[3])
    else:
      returnMsg = str(SnowflakeResult[2])
{% br %}
{%- endif %}{% br %}
{# --                                             -- #}
{# -- =========================================== -- #}
{# -- Deletes and Truncates                       -- #}
{# -- =========================================== -- #}
{# --                                             -- #}
{%- if settings.deleteBeforeInsert %}
  {%- if settings.deleteBeforeInsertTruncate %}{%br%}
if status==1:
{%br%}
#--============================================================================{%br%}
#-- Truncate existing records{%br%}
#--============================================================================{%br%}
  step = {% counter %}00{%br%}{%br%}
  sql = "TRUNCATE TABLE [TABLEOWNER].[{{table.name}}];"{%br%}
  SnowflakeResult =WslPythonSnowflake.RunSnowflakeRedSQL(sql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')), str(os.getenv('WSL_TGT_PWD')), 'Failed truncating table {{table.name}} step '+str(step) , '',step)
  returnMsg = str(SnowflakeResult[2]){%br%}
  status=SnowflakeResult[1]
  if status<1:
   returnMsg = str(SnowflakeResult[3])
  else:
   returnMsg += str(SnowflakeResult[2])
  {%br%}
  {%- else %}{%br%}
if status==1:
{%br%}
#--============================================================================{%br%}
#-- Delete existing records{%br%}
#--============================================================================{%br%}
  step = {% counter %}00{%br%}{%br%}
  sql = """
  DELETE FROM [TABLEOWNER].[{{table.name}}]{%br%}
  {%- if settings.deleteWhereClause | trim != "" %}  {{settings.deleteWhereClause}}{%br%}{%- endif %}
  ;{%br%}
"""
  SnowflakeResult =WslPythonSnowflake.RunSnowflakeRedSQL(sql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')), str(os.getenv('WSL_TGT_PWD')), 'Failed deleting table {{table.name}} step '+str(step) , '',step)
  deleteCount = SnowflakeResult[2]
  status=SnowflakeResult[1]
  if status<1:
   returnMsg = str(SnowflakeResult[3])
  else:
   returnMsg = str(SnowflakeResult[2]){%br%}
  {%- endif %}
{%- endif %}
{# --                                             -- #}
{# -- =========================================== -- #}
{# -- Auto adds                                   -- #}
{# -- =========================================== -- #}
{# --                                             -- #}
{%- set missingBkStatus="W" %}
{%- for rel in table.relations %}
  {%- if rel.autoAddUnmatchedBusinessKeys %}
    {%- if rel.noWarningForUnmatchedBusinessKeys %}
      {%- set missingBkStatus="I" %}
    {%- else %}
      {%- set missingBkStatus="W" %}
    {%- endif %}
    {%- fetch rel.fks[0].toTable %}
    {%- set dimTable = rel.fks[0].toTable %}
    {%- set dimTableOrig = dimTable %}
    {%- set dimTableName = dimTable.name %}
    {%- if dimTable.subType == "D" or dimTable.subType == "P" or dimTable.subType == "V" %}
      {%- if dimTable.subType == "V" %}
        {%- set vcNotFound = true %}
        {%- for vc in dimTable.columns %}
          {%- fetch vc.sourceTable -%}
          {%- if vc.sourceTable.name is defined and vcNotFound %}
            {%- set dimTable = objectsByName[vc.sourceTable.name] %}
            {%- set vcNotFound = false %}
          {%- endif %}
        {%- endfor %}
      {%- endif %}
if status == 1:
{%br%}
#--============================================================================{%br%}
#--= Build sql for finding missing dimension keys for dimension {{ dimTableName }}{%br%}
#--============================================================================{%br%}
  step = {% counter %}00{%br%}{%br%}
  sql_select = """{% br %}
      {%- for fk in rel.fks %}
        {%- fetch fk.fromTable %}
        {%- fetch fk.fromColumn %}
        {%- fetch fk.toColumn %}
        {%- fetch fk.toColumn.sourceColumn %}
        {%- set bkSourceAlias = fk.toColumn.name %}
        {%- if dimTableOrig.subType == "V" %}
          {%- set bkSourceAlias = fk.toColumn.sourceColumn.name %}
        {%- endif %}
        {%- if loop.first %}  SELECT
        {%- else %}       ,
        {%- endif %} {{ fk.fromTable.name }}.{{ fk.fromColumn.name }} AS {{ bkSourceAlias }}{% br %}
      {%- endfor %}
      {%- for joinLine in (table.sourceJoinDetails.join | lines)%}  {{joinLine}}{%br%}{%- endfor%}
      {%- for whereLine in (table.sourceJoinDetails.where | trim | lines)%}  {{whereLine}}{%br%}{%- endfor%}
      {%- for groupByLine in (table.sourceJoinDetails.groupBy | trim | lines)%}  {{groupByLine}}{%br%}{%- endfor%}
  EXCEPT{% br %}
      {%- from dimTable.columns as dimCol where dimCol.businessKey %}
        {%- if loop.first %}  SELECT
        {%- else %}       ,
        {%- endif %} {{ dimTable.name }}.{{ dimCol.name }} AS {{ dimCol.name }}{% br %}
      {%- endfrom %}
  FROM [TABLEOWNER].[{{ dimTable.name }}] {{ dimTable.name }} {% br %}
"""{%br%}
      {%- if rel.detailLogForUnmatchedBusinessKeys %}
#--============================================================================{%br%}
#--= Log messages for auto adds to dimension {{ dimTableName }}{%br%}
#--============================================================================{%br%}
  step = {% counter %}00{%br%}
  sql = sql_select + " ORDER BY 1"
  SnowflakeResult =WslPythonSnowflake.RunSnowflakeRedSQL(sql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')), str(os.getenv('WSL_TGT_PWD')), 'Failed to log missing dimension keys for {{ dimTableName }} at step '+str(step) , '',step)
  status=SnowflakeResult[1]
  if status<1:
   returnMsg = str(SnowflakeResult[3])
  else:
   returnMsg = str(SnowflakeResult[2])
  for row in SnowflakeResult[3]:{%br%}
		newvar = WslPythonCommon.WsWrkError ("{{missingBkStatus}}", "Auto added " + "{{dimTableName }} row:"+ row[0] ,'AUTO_ADD') {%br%}
  {%br%}
      {%- endif %}
if status==1:
{%br%}
#--============================================================================{%br%}
#--= Insert missing dimension keys for dimension {{ dimTableName }}{%br%}
#--============================================================================{%br%}
  step = {% counter %}00{%br%}{%br%}
  sql = """
  INSERT INTO [TABLEOWNER].[{{ dimTable.name }}]{% br %}
      {%- from dimTable.columns as dimCol where dimCol.artificial or dimCol.businessKey or dimCol.dss or (dimCol.name == dssDeleteTime) %}
        {%- if loop.first %}  (
        {%- else %}  ,
        {%- endif %} {{ dimCol.name }}{% br %}
      {%- endfrom %}
  ){% br %}
      {%- from dimTable.columns as dimCol where dimCol.artificial or dimCol.businessKey or dimCol.dss or (dimCol.name == dssDeleteTime) %}
        {%- if loop.first %}  SELECT
        {%- else %}       ,
        {%- endif %}
        {%- if dimCol.artificial %}
          {%- from dimTable.columns as dimBk where dimBk.businessKey %}
            {%- if loop.first %} ROW_NUMBER() OVER(ORDER BY src.{{ dimBk.name }}) + COALESCE(maxkey.maxkey,0) AS DIM_KEY
            {%- endif %}
          {%- endfrom %}
        {%- elseif dimCol.businessKey %} src.{{ dimCol.name }} AS {{ dimCol.name }}
        {%- else %} CAST(CURRENT_TIMESTAMP AS {{ dimCol.fullDataType }}) AS {{ dimCol.name }}
        {%- endif %}
        {%- br %}
      {%- endfrom %}
  FROM (
    """+sql_select+"""
  ) AS src{% br %}
        {%- from dimTable.columns as dimCol where dimCol.artificial %}
  CROSS JOIN (
    SELECT MAX({{ dimCol.name }}) AS maxkey FROM [TABLEOWNER].[{{ dimTable.name }}]{% br %}
  ) AS maxkey{% br %}
      {%- endfrom %}
  ;{% br %}
"""
  SnowflakeResult =WslPythonSnowflake.RunSnowflakeRedSQL(sql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')), str(os.getenv('WSL_TGT_PWD')), 'Failed to insert missing dimension keys into {{ dimTableName }} at step '+str(step) , '',step)
  status=SnowflakeResult[1]
  if status<1:
   returnMsg = str(SnowflakeResult[3])
  else:
   returnMsg = str(SnowflakeResult[2])
  dimInsertCount = SnowflakeResult[1]
  returnMsg = SnowflakeResult[2]{%br%}

  if dimInsertCount > 0: {%br%}
		newvar = WslPythonCommon.WsWrkAudit ("{{missingBkStatus}}", "Step "+ step + "{{dimTableName }}"+ dimInsertCount +" rows auto added" ,'','')  {%br%}
    {%- endif %}
  {%- endif %}
{%- endfor %}
{# --                                             -- #}
{# -- =========================================== -- #}
{# -- Load data                                   -- #}
{# -- =========================================== -- #}
{# --                                             -- #}
if status==1:
{%br%}
#--============================================================================{%br%}
#-- Insert new records{%br%}
#--============================================================================{%br%}
  step = {% counter %}00{%br%}{%br%}
  sql = """
  INSERT INTO [TABLEOWNER].[{{table.name}}]{%br%}
  {{addSetInsertTargetColumns()}}
  ){%br%}
  SELECT{{distinct() -}}{{- addSetInsertColumnsSnowflake(addArtificialKey = true)}}
  {%- for joinLine in (table.sourceJoinDetails.join | lines)%}  {{joinLine}}{%br%}{%- endfor%}
  {{- addDimensionJoins(indent = "  ")}}
  {%- for whereLine in (table.sourceJoinDetails.where | trim | lines)%}  {{whereLine}}{%br%}{%- endfor%}
  {%- for groupByLine in (table.sourceJoinDetails.groupBy | trim | lines)%}  {{groupByLine}}{%br%}{%- endfor%}
  ;{%br%}
"""
  SnowflakeResult = WslPythonSnowflake.RunSnowflakeRedSQL(sql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')), str(os.getenv('WSL_TGT_PWD')), 'Failed insert into table  {{table.name}}  step '+ str(step)  , '',step)
  status=SnowflakeResult[1]
  if status<1:
   returnMsg = str(SnowflakeResult[3])
  else:
   returnMsg += str(SnowflakeResult[2])
  insertCount = insertCount + SnowflakeResult[2]{%br%}
{# --                                             -- #}
{# -- =========================================== -- #}
{# -- Report missed dimension lookups             -- #}
{# -- =========================================== -- #}
{# --                                             -- #}
{%- set dimTable="X" %}
{%- set dimKeyColumn="X" %}
{%- set missingBkStatus="W" %}
{%- for rel in table.relations %}
  {%- for fk in rel.fks %}
    {%- fetch fk.toTable %}
    {%- set dimTable=fk.toTable.name %}
    {%- from fk.toTable.columns as column where column.artificial %}
      {%- set dimKeyColumn=column.name %}
    {%- endfrom %}
  {%- endfor %}
  {%- if rel.noWarningForUnmatchedBusinessKeys %}
    {%- set missingBkStatus="I" %}
  {%- else %}
    {%- set missingBkStatus="W" %}
  {%- endif %}
if status==1:
{%br%}
#--====================================================={%br%}
#-- Check {{dimTable}} for bad key joins{%br%}
#--====================================================={%br%}{%br%}
  step = {% counter %}00{%br%}{%br%}
  sql = """
  SELECT COUNT(*) {%br%}
  FROM [TABLEOWNER].[{{table.name}}] {%br%}
  WHERE {{dimKeyColumn}} = 0 {%br%}
"""
  SnowflakeResult = WslPythonSnowflake.RunSnowflakeRedSQL(sql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')), str(os.getenv('WSL_TGT_PWD')), ' Failed to count zero key rows at step'+ str(step)  , '',step)
  status=SnowflakeResult[1]
  if status<1:
     returnMsg = str(SnowflakeResult[3])
  else:
     returnMsg += str(SnowflakeResult[2])
  for row in SnowflakeResult[4]:{%br%}
   if row[0] >0:
      newvar = WslPythonCommon.WsWrkAudit ("{{missingBkStatus}}", str(row[0]) + "rows that could not be matched to {{dimTable}}" ,'','')
    {%br%}
{%- endfor %}
{# --                                             -- #}
{# -- =========================================== -- #}
{# -- Details of missing dimension lookups        -- #}
{# -- =========================================== -- #}
{# --                                             -- #}
{%- for rel in table.relations %}
  {%- if rel.noWarningForUnmatchedBusinessKeys %}
    {%- set missingBkStatus="I" %}
  {%- else %}
    {%- set missingBkStatus="W" %}
  {%- endif %}
  {%- fetch rel.fks[0].toTable %}
  {%- if rel.detailLogForUnmatchedBusinessKeys and not rel.autoAddUnmatchedBusinessKeys %}
    {%- set dimTable = rel.fks[0].toTable %}
    {%- set dimTableOrig = dimTable %}
    {%- set dimTableName = dimTable.name %}
    {%- if dimTable.subType == "D" or dimTable.subType == "P" or dimTable.subType == "V" %}
      {%- if dimTable.subType == "V" %}
        {%- set vcNotFound = true %}
        {%- for vc in dimTable.columns %}
          {%- fetch vc.sourceTable -%}
          {%- if vc.sourceTable.name is defined and vcNotFound %}
            {%- set dimTable = objectsByName[vc.sourceTable.name] %}
            {%- set vcNotFound = false %}
          {%- endif %}
        {%- endfor %}
      {%- endif %}
if status==1:
{%br%}
#--============================================================================{%br%}
#--= Log messages for unmatched dimension keys in {{ dimTableName }}{%br%}
#--============================================================================{%br%}
  step = {% counter %}00{%br%}{%br%}
  sql = """{% br %}
      {%- for fk in rel.fks %}
        {%- fetch fk.fromTable %}
        {%- fetch fk.fromColumn %}
        {%- fetch fk.toColumn %}
        {%- fetch fk.toColumn.sourceColumn %}
        {%- set bkSourceAlias = fk.toColumn.name %}
        {%- if dimTableOrig.subType == "V" %}
          {%- set bkSourceAlias = fk.toColumn.sourceColumn.name %}
        {%- endif %}
        {%- if loop.first %}  SELECT
        {%- else %}       ,
        {%- endif %} {{ fk.fromTable.name }}.{{ fk.fromColumn.name }} AS {{ bkSourceAlias }}{% br %}
      {%- endfor %}
      {%- for joinLine in (table.sourceJoinDetails.join | lines)%}  {{joinLine}}{%br%}{%- endfor%}
      {%- for whereLine in (table.sourceJoinDetails.where | trim | lines)%}  {{whereLine}}{%br%}{%- endfor%}
      {%- for groupByLine in (table.sourceJoinDetails.groupBy | trim | lines)%}  {{groupByLine}}{%br%}{%- endfor%}
  EXCEPT{% br %}
      {%- from dimTable.columns as dimCol where dimCol.businessKey %}
        {%- if loop.first %}  SELECT
        {%- else %}       ,
        {%- endif %} {{ dimTable.name }}.{{ dimCol.name }} AS {{ dimCol.name }}{% br %}
      {%- endfrom %}
  FROM [TABLEOWNER].[{{ dimTable.name }}] {{ dimTable.name }} {% br %}
  ORDER BY 1
"""{%br%}{%br%}
   SnowflakeResult = WslPythonSnowflake.RunSnowflakeRedSQL(sql,str(os.getenv('WSL_TGT_DSN')),str(os.getenv('WSL_TGT_USER')), str(os.getenv('WSL_TGT_PWD')), ' Failed to log missing dimension keys for {{ dimTableName }} at step'+ str(step)  , '',step)
   status=SnowflakeResult[1]
   if status<1:
     returnMsg = str(SnowflakeResult[3])
   else:
     returnMsg = str(SnowflakeResult[2])
   for row in SnowflakeResult[4]:{%br%}
   if row[0] >0: {%br%}
     	newvar = WslPythonCommon.WsWrkAudit ("{{missingBkStatus}}", row[0] + "rows that could not be matched to {{dimTable}}"" ,'',''){%br%}
    {%- endif %}
  {%- endif %}
{%- endfor %}
{# --                                             -- #}
{# -- =========================================== -- #}
{# -- Finish Up                                   -- #}
{# -- =========================================== -- #}
{# --                                             -- #}
#--====================================================={%br%}
#-- All Done report the results{%br%}
#--====================================================={%br%}

step = {% counter %}00{%br%}{%br%}
#-- WsWrkTask call to updated row counts in Ws_Wrk_Task_Run/Log{%br%}
{%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
metaResult=WslPythonCommon.WsWrkTask(0,0,0,insertCount,deleteCount,0,0){%br%}
{%- else %}
metaResult=WslPythonCommon.WsWrkTask(0,0,0,insertCount,0,0,0){%br%}
{%- endif %}
if int(metaResult) < -1:
  status=-2{%br%}
  returnMsg = "Failure executing WsWrkTask. "+ str(insertCount)+" records inserted."{%br%}

if status==1:
   #-- Work out return message
   returnMsg = "{{table.name}} updated.  "{%br%}
   returnMsg +=str(insertCount) + " records inserted.  " {%br%}
   {%- if settings.deleteBeforeInsert and not settings.deleteBeforeInsertTruncate %}
   returnMsg +=str(deleteCount) + " records deleted.  "{%br%}
   {%- endif %}
print(status){%br%}
print(returnMsg){%br%}


