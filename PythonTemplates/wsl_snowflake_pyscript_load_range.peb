{# -- TemplateVersion:001 MinVersion:8510 MaxVersion:* TargetType:Snowflake ModelType:* TemplateType:Python                                                 -- #}
{# --                                                                                                                                                       -- #}
{# --    (c) Wherescape Ltd 2020. WhereScape Ltd permits you to copy this Template solely for use with the RED software, and to modify this Template        -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : Snowflake                                                                                                                        -- #}
{# -- Template Name      : wsl_snowflake_pyscript_load_range                                                                                                -- #}
{# -- RED Version        : 8.5.1.0                                                                                                                          -- #}
{# -- Description        : This template creates a Snowflake script specifically                                                                            -- #}
{# --                      designed for range table loads                                                                                                   -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{#  Notes / History                                                                                                                                         -- #}
{# --                                                                                                                                                       -- #}
{%- import "wsl_snowflake_utility" -%}
{%- set PilotTable = getExtendedProperty( propertyName = "RANGE_PILOT_TABLE" ) | trim %}
{%- set crLfReplaced = getExtendedProperty( propertyName = "RANGE_CR_LF_REPLACED" ) | trim %}
#=============================================================================={%- br %}
# DBMS Name        :    SNOWFLAKE {{table.dbType.name}}{%- br %}
# Template         :    {{settings.template.name}}{%- br %}
# Template Version :    8.5.1.0{%- br %}
# Description      :    Range Driven Data Load for {{table.name}}{%- br %}
# Generated by     :    {{env.productVersion}}{%- br %}
# Generated for    :    {{env.licensedTo}}{%- br %}
# Generated on     :    {{env.currentTimestamp}}{%- br %}
# Author           :    {{env.userName}}{%- br %}
#=============================================================================={%- br %}
# Notes / History{%- br %}
#{%- br %}

import os{%br%}
import re{%br%}
import gzip{%br%}
import shutil{%br%}
import sys{%br%}
from datetime import datetime{%br%}
import glob{%br%}
import pyodbc{%br%}
import snowflake.connector{%br%}
import time{%br%}
import threading{%br%}
from threading import Thread, Event{%br%}
sys.path.append('C:\ProgramData\WhereScape\Modules\WslPython'){%br%}
import WslPythonCommon{%br%}
import WslPythonSnowflake{%br%}
WslPythonCommon.HideWindow(){%br%}
TotalRows = 0{% br %}
{%br%}
def PrintLog(fileAud,fileErr):{%br%}
    try:
        with open(fileAud, 'r') as write_to_console:{%br%}
            print(write_to_console.read()){%br%}
        if str(os.getenv('DEBUG'))!= "TRUE":
            os.remove(fileAud)
        with open(fileErr, 'r') as write_to_console:{%br%}
            print(write_to_console.read()){%br%}
        if str(os.getenv('DEBUG'))!= "TRUE":
            os.remove(fileErr)
    except Exception as inst:
                        print(inst.args)
{%- br %}
def GzipFile({%br%}
        inFile="No input file specified",{%br%}
        outFile=".gz",{%br%}
        removeOriginal=True{%br%}
    ):{%br%}
    if outFile!=".gz":{%br%}
      with open(inFile, 'rb') as f_in:{%br%}
        with gzip.open(outFile+".gz", 'wb') as f_out:{%br%}
            shutil.copyfileobj(f_in, f_out){%br%}
      outNewFile=outFile+".gz"{%br%}
    else:{%br%}
       with open(inFile, 'rb') as f_in:{%br%}
        with gzip.open(os.path.splitext(inFile)[0]+outFile, 'wb') as f_out:{%br%}
            shutil.copyfileobj(f_in, f_out){%br%}
       outNewFile=(inFile+outFile){%br%}
    if removeOriginal==True:{%br%}
        os.remove(inFile){%br%}
    return (outNewFile){%br%}

def JobScript({% br %}
        {%- if PilotTable != "" %}
        batch,{% br %}
        {%- endif %}
        id = 0{% br %}
    ):{% br %}
    threadAud = os.path.join(os.environ["WSL_WORKDIR"], str(os.environ["WSL_LOAD_TABLE"])+"_"+str(os.getenv('WSL_SEQUENCE'))+"_THREAD_"+str(id)+".aud")
    threadErr = os.path.join(os.environ["WSL_WORKDIR"], str(os.environ["WSL_LOAD_TABLE"])+"_"+str(os.getenv('WSL_SEQUENCE'))+"_THREAD_"+str(id)+".err")
    audStream = open(threadAud, 'a+'){% br %}
    errStream = open(threadErr, 'a+'){% br %}

    unicode = True
    if str(os.getenv('UNICODE_SUPPORT'))== "TRUE":
       unicode = True
    {%- if PilotTable != "" %}

    batchStatusSql ="""SELECT STATUS
    FROM """+os.environ["RANGE_SCHEMA"]+"."+os.environ["PILOT_TABLE"]+"""
    WHERE BATCH_NUMBER ="""+ str(batch[0]){% br %}

    bst = WslPythonSnowflake.RunSnowflakeRedSQL(batchStatusSql,str(os.environ["rangeTableDsn"]),str(os.environ["rangeTableUser"]), str(os.environ["rangeTablePwd"]),'' , '',''){% br %}

    if bst[1] == "P":
        audStream.write("\nBatch " +str(batch[0]) +" is in a paused state. Skipping")
        errStream.write("\nBatch "+str(batch[0])+" is in a paused state. Skipping")
        print (1)
        PrintLog(threadAud)
        PrintLog(threadErr)

    audStream.write("Now loading batch: "+str(batch[0])+"\n"){% br %}
    errStream.write("Now loading batch: "+str(batch[0])+"\n"){% br %}
    batchUpdateSql = """UPDATE """+os.environ["RANGE_SCHEMA"]+"."+os.environ["PILOT_TABLE"]+"""
      SET STATUS = 'R'
        , THREAD_NUMBER = """+str(id)+"""
        , START_EXTRACT_TIMESTAMP = """+os.environ["RANGE_CURR_DATE"]+"""
      WHERE BATCH_NUMBER = """+str(batch[0])
    bst=WslPythonSnowflake.RunSnowflakeRedSQL(batchUpdateSql,str(os.environ["rangeTableDsn"]),str(os.environ["rangeTableUser"]), str(os.environ["rangeTablePwd"]),'' , '','')

    {%- endif %}

    fileDat = "wsl"+os.environ["WSL_LOAD_TABLE"]+os.environ["WSL_SEQUENCE"]{%- if PilotTable != "" %}+"_BATCH_"+str(batch[0]){% endif %}+".dat"
    utlCtl=  os.path.join(os.environ["WSL_WORKDIR"],  "wsl"+os.environ["WSL_LOAD_TABLE"]+os.environ["WSL_SEQUENCE"]{%- if PilotTable != "" %}+"_BATCH_"+str(batch[0]){% endif %}+".ctl")
    utlVar =os.path.join(os.environ["WSL_WORKDIR"],  "wsl"+os.environ["WSL_LOAD_TABLE"]+os.environ["WSL_SEQUENCE"]{%- if PilotTable != "" %}+"_BATCH_"+str(batch[0]){% endif %}+".var")
    utlAud =os.path.join(os.environ["WSL_WORKDIR"],  "wsl"+os.environ["WSL_LOAD_TABLE"]+os.environ["WSL_SEQUENCE"]{%- if PilotTable != "" %}+"_BATCH_"+str(batch[0]){% endif %}+".utlaud")
    utlErr = os.path.join(os.environ["WSL_WORKDIR"],  "wsl"+os.environ["WSL_LOAD_TABLE"]+os.environ["WSL_SEQUENCE"]{%- if PilotTable != "" %}+"_BATCH_"+str(batch[0]){% endif %}+".utlerr")

    extractSQL = """
SELECT {%- from table.columns as column %}
                                          {%- if not loop.first %}                                      ,{% endif %}
                                          {%- if column.datatype == "varchar" or column.datatype == "char"  %}{% endif %}
                                          {%- if column.transform | trim == "" or column.transformType.code == "A" %}
                                            {%- if column.sourceTable.name is defined and column.sourceColumn.name is defined %} {{ column.sourceTable.name }}.{{ column.sourceColumn.name }}
                                            {%- elseif column.source is defined and column.transformType.code != "A" %} {{column.source}}
                                            {%- else %} ' '
                                            {%- endif %}
                                          {%- elseif column.transformType.code != "A" %} {{ column.transform }}
                                          {%- else %} ' '
                                          {%- endif %}
                                          {%- if column.datatype == "varchar" or column.datatype == "char"  %}{% endif %}{% br %}
                                        {%- endfrom %}
                                       {%- if table.loadInfo.sourceTables != "" %}
                                 FROM """+os.environ["WSL_SRC_SCHEMA"]+""".{{ table.loadInfo.sourceTables }}{%- br -%}
                                       {%- endif -%}
                                       {%- from table.loadInfo.whereAndGroupByClauses | trim | lines as whereLine %}                                 {{whereLine}}{% br %}{% endfrom -%}
"""{%- br -%}
    {%- if PilotTable != "" -%}{% br %}
    if((str(batch[1]) != "NULL") and  (str(batch[2]) == "NULL")):{% br %}
         extractSQL =extractSQL+{% if table.loadInfo.whereAndGroupByClauses == "" %}"                                 WHERE """{% else %}"AND"{% endif %}+ os.environ["BATCH_OVERRIDE"]+""" > """+str(batch[1]){% br %}
    elif (str(batch[1])) != "NULL":{% br %}
        extractSQL =extractSQL+{% if table.loadInfo.whereAndGroupByClauses == "" %}"                                 WHERE """{% else %}"AND"{% endif %}+ os.environ["BATCH_EXPRESSION"]+""" BETWEEN """+str(batch[1])+" AND "+ str(batch[2]){% br %}
    else:{% br %}
        extractSQL =extractSQL+{% if table.loadInfo.whereAndGroupByClauses == "" %}"                                 WHERE """{% else %}"AND"{% endif %}+ os.environ["BATCH_EXPRESSION"]+""" IS NULL"""{% br %}
   {%- endif %}

    if str(os.getenv('DEBUG'))== "TRUE":{% br %}
        errStream.write("================== EXTRACT SQL STATEMENT ==================\n"){%- br %}
        errStream.write(extractSQL.replace("                                 ","")){%- br %}
        errStream.write(""){%- br %}


    extractSQL = extractSQL.replace("                                 ","")

    unicode = True{% br %}
    if str(os.getenv('EXTRACT_CHAR_SET')).find("UTF")!= -1:{% br %}
       unicode = True{% br %}
    if str(os.getenv('DEBUG'))== "TRUE":{% br %}
       errStream.write("\nBEGIN create of data file from source system: "+str(datetime.now())+'\n'){% br %}
    fileFull = os.path.join(os.environ["WSL_WORKDIR"],fileDat)
    rowCount = WslPythonCommon.GetDataToFile(extractSQL,str(os.getenv('WSL_SRC_DSN')),str(os.getenv('WSL_SRC_USER')),str(os.getenv('WSL_SRC_PWD')),fileFull,str(os.getenv('UNLOAD_DELIM')), 0, 0, True, unicode, os.environ["UNLOAD_ENCLOSED"], os.environ["UNLOAD_ESCAPE"]){% br %}
    if str(os.getenv('DEBUG')) == "TRUE":
       errStream.write("\nEND create of data file from source system: "+str(datetime.now())+'\n'){% br %}

    {%- if PilotTable != "" %}{% br %}{% br %}
    batchUpdateSql ="""UPDATE """+os.environ["RANGE_SCHEMA"]+"."+os.environ["PILOT_TABLE"]+"""
      SET START_PUT_TIMESTAMP ="""+os.environ["RANGE_CURR_DATE"]+"""
        , EXTRACT_DURATION_SECONDS = """+os.environ["EXTRACT_SECS"]+"""
      WHERE BATCH_NUMBER =  """+str(batch[0])
    udt =WslPythonSnowflake.RunSnowflakeRedSQL(batchUpdateSql,str(os.environ["rangeTableDsn"]),str(os.environ["rangeTableUser"]), str(os.environ["rangeTablePwd"]),'' , '','')
    {%- endif %}

    if str(os.getenv('UNLOAD_GZIP'))== "TRUE":
        try:
            input =  os.path.join(os.environ["WSL_WORKDIR"],fileDat){%- br %}
            output = ".gz"{%- br %}
            if str(os.getenv('DEBUG'))== "TRUE":
                output=GzipFile(input,output,False)
            else:
                output=GzipFile(input,output,True)
                errStream.write("\n=============== DATA FILE COMPRESSION ===============\n")
                errStream.write("Data file gzipped to: "+output)
                errStream.write("")
            fileDat = fileDat + ".gz"
        except Exception as inst:
                        audStream.write(inst.args)
                        errStream.write(inst.args)
                        print -2
                        PrintLog(threadAud,threadErr)

    SFConnectionString = snowflake.connector.connect({% br %}
                user=str(os.getenv('WSL_TGT_USER')),{% br %}
                password=str(os.getenv('WSL_TGT_PWD')),{% br %}
                account=os.environ["SNOWSQL_ACCOUNT"],{% br %}
                warehouse=os.environ["SNOWSQL_WAREHOUSE"],{% br %}
                database=os.environ["SNOWSQL_DATABASE"],{% br %}
                schema=os.environ["SNOWSQL_SCHEMA"]{% br %}
                ){% br %}

    removeSQL = "remove @~/WSL-"+"wsl"+os.environ["WSL_LOAD_TABLE"]+os.environ["WSL_SEQUENCE"]+"_BATCH_"+str(batch[0])+"*"+";"{% br %}
    SFconn = SFConnectionString.cursor(){% br %}
    SFconn.execute(removeSQL){% br %}
    SFconn.close(){% br %}
    putSQL = "PUT "+"file://" +os.path.join(os.environ["WSL_WORKDIR"],"wsl"+os.environ["WSL_LOAD_TABLE"]+os.environ["WSL_SEQUENCE"]+"_BATCH_"+str(batch[0]))+"* @~;"{% br %}
    SFconn = SFConnectionString.cursor(){% br %}
    SFconn.execute(putSQL){% br %}
    SFconn.close(){% br %}
    if str(os.getenv('DEBUG')) == "TRUE":
        errStream.write("\n=================== FILE UPLOAD ===================")
        errStream.write(putSQL)

    currentRetry = 0{% br %}
    lastSnowSQLCode = 0{% br %}
    lastexitcode=0{% br %}
    while lastexitcode != 0 and currentRetry < os.getenv('MAX_RETRIES'):{% br %}
        currentRetry = currentRetry +1{% br %}
        audStream.write("\nData file upload failed, retrying. Current retries: "+str(currentRetry)+". Max retries: "+os.environ('MAX_RETRIES')){% br %}
        errStream.write("\nData file upload failed, retrying. Current retries: "+str(currentRetry)+". Max retries: "+os.environ('MAX_RETRIES')){% br %}
        {%- if PilotTable != "" %}{% br %}
        batchUpdateSql ="""UPDATE """+os.environ["RANGE_SCHEMA"]+"."+os.environ["PILOT_TABLE"]+"""{% br %}
          SET RETRY_COUNT = """+str(currentRetry)+"""
          WHERE BATCH_NUMBER ="""+str(batch[0])
        udt=WslPythonSnowflake.RunSnowflakeRedSQL(batchUpdateSql,str(os.environ["rangeTableDsn"]),str(os.environ["rangeTableUser"]), str(os.environ["rangeTablePwd"]),'' , '',''){% br %}

        {%- endif %}

        removeSQL = "remove @~/WSL-"+"wsl"+os.environ["WSL_LOAD_TABLE"]+os.environ["WSL_SEQUENCE"]+"_BATCH_"+str(batch[0])+"*"+";"
        SFconn = SFConnectionString.cursor()
        SFconn.execute("\n"+removeSQL)
        SFconn.close()

        putSQL = "PUT "+"file://" +os.path.join(os.environ["WSL_WORKDIR"],fileDat)+"* @~;"#+" @~/WSL-"+str(os.getenv('WSL_SEQUENCE'))+"-"+str(os.getenv('WSL_TASK_KEY'))+";"
        SFconn = SFConnectionString.cursor()
        SFconn.execute(putSQL)
        SFconn.close()
        lastexitcode=0
        lastSnowSQLCode = lastexitcode
        if str(os.getenv('DEBUG')) == "TRUE":
            errStream.write(putSQL)

    if lastSnowSQLCode != 0:
        audStream.write("\nData file upload failed. Retry limit exhausted. Aborting thread")
        errStream.write("\nData file upload failed. Retry limit exhausted. Aborting thread")
        errStream.write(putSQL)
        print( -2)
        PrintLog(threadAud,threadErr)
        print("\nData file upload failed. Retry limit exhausted. Aborting thread")

    {%- if PilotTable != "" %}{% br %}{% br %}
    batchUpdateSql = """UPDATE """+os.environ["RANGE_SCHEMA"]+"."+os.environ["PILOT_TABLE"]+"""
      SET START_LOAD_TIMESTAMP ="""+os.environ["RANGE_CURR_DATE"]+"""
        , PUT_DURATION_SECONDS ="""+os.environ["PUT_SECS"]+"""
    WHERE BATCH_NUMBER =  """+str(batch[0])

    udt=WslPythonSnowflake.RunSnowflakeRedSQL(batchUpdateSql,str(os.environ["rangeTableDsn"]),str(os.environ["rangeTableUser"]), str(os.environ["rangeTablePwd"]),'' , '','')

    {%- endif %}

    PURGE = "TRUE"{% br %}
    if str(os.getenv('DEBUG')) == "TRUE":{% br %}
        PURGE = "FALSE"{% br %}

    {%- set crLfList = crLfReplaced.split(",") %}{% br %}
    copyStmt = """COPY INTO """+ os.environ["WSL_LOAD_FULLNAME"]+"""
    FROM ({%- br %}{% set csvPos = 0 %}
      SELECT {% for col in table.columns %}
               {%- if not loop.first %}           , {% endif %}
               {%- if crLfList contains col.name %}REPLACE(REPLACE({%- endif %}
               {%- if col.transformType.code == "A" %}{{ col.source }}
               {%- else %}
                 {%- set csvPos = csvPos + 1 %}t.${{ csvPos }}
               {%- endif %}
               {%- if crLfList contains col.name %},'~~0A~~',CHAR(10)),'~~0D~~',CHAR(13)){%- endif %}
               {%- br %}
             {%- endfor %}
      FROM @~/wsl"""+os.environ["WSL_LOAD_TABLE"]+os.environ["WSL_SEQUENCE"]+"_BATCH_"+str(batch[0])+""".dat t
    ){% br %}
    PATTERN = '.*'{%- br %}
    FILE_FORMAT = """+str(os.getenv('FILE_FORMAT'))+"""
    PURGE = """+PURGE{% br %}

    {%- if table.loadInfo.fileLoaderOptions != "" %}    {{ table.loadInfo.fileLoaderOptions }}{%- br %}
    {%- endif %}


    if str(os.getenv('DEBUG')) == "TRUE":
        errStream.write("\n=================== IMPORT SQL ===================")
        errStream.write(copyStmt)
        errStream.write("")


    try:
        SFconn = SFConnectionString.cursor(){%- br %}
        loadResult=SFconn.execute(copyStmt).fetchall(){%- br %}
        SFconn.close(){%- br %}
    except Exception as inst:
        print(inst.args)
        if str(os.getenv('DEBUG')) == "TRUE":
            errStream.write("\n=================== IMPORT SQL ===================")
            errStream.write(copyStmt)
            errStream.write("")
        print(-2)
        PrintLog(threadAud,threadErr)
    checkStatus=0{%- br %}
    rowsLoaded=0{%- br %}
    checkFlag=0{%- br %}
    errStream.write("\nFile                                            " + "Status         " + "Rows Parsed        "+"Rows Loaded  \n"){%- br %}
    errStream.write("------------------------------------------------" + "---------------" + "-------------------"+"-------------------  \n"){%- br %}
    while len(loadResult)> checkStatus:{%- br %}
        if loadResult[checkStatus][5] == 0:{%- br %}
             rowsLoaded = rowsLoaded + loadResult[checkStatus][3] {%- br %}
        else:  {%- br %}
             checkFlag=1 {%- br %}
        errStream.write(str(loadResult[checkStatus][0])+"       "+str(loadResult[checkStatus][1])+"       "+str(loadResult[checkStatus][2])+"       "+str(loadResult[checkStatus][3])+"       \n"){%- br %}
        checkStatus = checkStatus+1   {%- br %}
    if checkFlag==0:    {%- br %}
        errStream.write(str(rowsLoaded) +" rows loaded.\n"){%- br %}
        try:
         #-- WsWrkTask call to updated row counts in Ws_Wrk_Task_Run/Log{%- br %}
            metaResult=WslPythonCommon.WsWrkTask(0,0,0,rowsLoaded,0,0,0){%- br %}
        except:{%- br %}
                errStream.write("Failed to update task row count"){%- br %}
        print("1"){%- br %}
        print("Load successful. "+str(rowsLoaded)+" rows loaded"){%- br %}
        if str(os.getenv('DEBUG'))== "FALSE":{%- br %}
            {%- if table.loadInfo.sourceConnectionType.name != "Windows" %}
                x=0{%- br %}
                while x< len(dataFiles):{%- br %}
                    os.remove(str(dataFiles[x]).split(".")[0]+".gz"){%- br %}
                    x=x+1{%- br %}
            {%- else %}{%- br %}
              if os.environ["EXTERNAL_STAGE"] =="":
                if os.environ["SEND_FILES_ZIPPED"] == "TRUE" or int(os.environ["FILE_COUNT"]) >1:{%- br %}
                    if fileDat[-1]=="*":
                        x=0{%- br %}
                        while x< len(glob.glob(os.path.join(os.environ["WSL_WORKDIR"],fileDat))):{%- br %}
                            os.remove(glob.glob(os.path.join(os.environ["WSL_WORKDIR"],fileDat))[x]){%- br %}
                            x=x+1{%- br %}
                    else:{%- br %}
                        os.remove(os.path.join(os.environ["WSL_WORKDIR"],fileDat)){%- br %}
            {%- endif %}{%- br %}
                SFconn = SFConnectionString.cursor(){%- br %}
                SFconn.execute(removeSQL){%- br %}
                SFconn.close(){%- br %}
        else: {%- br %}
                errStream.write("Temporary data files not removed as debug mode is enabled"){%- br %}
    else:{%- br %}
            errStream.write("-2"){%- br %}
            errStream.write("Load failed"){%- br %}
            #PrintLog(os.path.join(filePath,auditLog)){%- br %}

    {%- if PilotTable != "" %}{%- br %}
    batchUpdateSql = """UPDATE """+os.environ["RANGE_SCHEMA"]+"."+os.environ["PILOT_TABLE"]+"""
      SET STATUS = 'C'
        , END_TIMESTAMP = """+os.environ["RANGE_CURR_DATE"]+"""
        , LOADED_ROWS = """+str(rowsLoaded)+"""
        , LOAD_DURATION_SECONDS = """+str(os.getenv('LOAD_SECS'))+"""
        , TOTAL_DURATION_SECONDS ="""+str(os.getenv('TOTAL_SECS'))+"""
        , ROWS_VALIDATED = CASE WHEN ROW_COUNTER = -1 THEN 'X' WHEN ROW_COUNTER = """+str(rowsLoaded)+""" THEN 'Y' ELSE 'N' END
      WHERE BATCH_NUMBER = """+str(batch[0]){%- br %}

    udt =WslPythonSnowflake.RunSnowflakeRedSQL(batchUpdateSql,str(os.environ["rangeTableDsn"]),str(os.environ["rangeTableUser"]), str(os.environ["rangeTablePwd"]),'' , '',''){%- br %}

    {%- endif %}
    #if str(os.getenv('DEBUG')) == "TRUE":
        #os.remove(os.path.join(os.environ["WSL_WORKDIR"],fileDat))
    print(1)
    PrintLog(threadAud)
    audStream.close()
    errStream.close()
    PrintLog(threadAud,threadErr)

def GetRangeConnDet(
      RANGE_WORK_CONNECTION
):
    sMetaSql = """SELECT dc_odbc_source
           , dc_extract_userid
           , dc_extract_pwd
      FROM   ws_dbc_connect
      WHERE  dc_name =  """+"'"+str(RANGE_WORK_CONNECTION)+"'"

    try:
        SnowflakeResult =WslPythonSnowflake.RunSnowflakeRedSQL(sMetaSql,str(os.getenv('WSL_META_DSN')),str(os.getenv('WSL_META_USER')), str(os.getenv('WSL_META_PWD')), '' , '','')
    except Exception as inst:
                        print("\nGet range table connection query failed")
                        print("-2")
                        logStream.write("Get range table connection query failed")
    if SnowflakeResult[1] == 0:
        logStream.write("No range table connection defined")
        print("-2")
        print("No range table connection defined")
    try:
      rangeTableDsn = str(SnowflakeResult[4][0][0])
      rangeTableUser = str(SnowflakeResult[4][0][1])
      rangeTablePwd = str(SnowflakeResult[4][0][2])
    except Exception as inst:
                        print(inst)
                        print("-2")
    return rangeTableDsn, rangeTableUser, rangeTablePwd

def MAIN(logStream,errStream): {%- br %}
    os.environ["DEBUG"]              = WslPythonCommon.GetExtendedProperty("SF_DEBUG_MODE",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["SNOWSQL_ACCOUNT"]    = WslPythonCommon.GetExtendedProperty("SF_SNOWSQL_ACCOUNT",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["SNOWSQL_WAREHOUSE"]  = WslPythonCommon.GetExtendedProperty("SF_SNOWSQL_WAREHOUSE",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["SNOWSQL_DATABASE"]   = WslPythonCommon.GetExtendedProperty("SF_SNOWSQL_DATABASE",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["SNOWSQL_USER"]       = os.getenv('WSL_TGT_USER'){%br%}
    os.environ["SNOWSQL_SCHEMA"]     = WslPythonCommon.GetExtendedProperty("SF_SNOWSQL_SCHEMA",str(os.environ["WSL_LOAD_TABLE"]))
    os.environ["SNOWSQL_PWD"]        = os.getenv('WSL_TGT_PWD'){%br%}
    os.environ["FILE_FORMAT"]        = WslPythonCommon.GetExtendedProperty("SF_FILE_FORMAT",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["UNLOAD_GZIP"]        = WslPythonCommon.GetExtendedProperty("SF_SEND_FILES_ZIPPED",str(os.environ["WSL_LOAD_TABLE"])){%br%}
   {%- from table.extendedPropertyValuesByName as entry where entry.key == "RANGE_BATCH_EXPRESSION" %}    os.environ["BATCH_EXPRESSION"]  = "{{entry.value}}" {%- br %}{%- endfrom %}
    {%- from table.extendedPropertyValuesByName as entry where entry.key == "RANGE_BATCH_INCREMENTAL_OVERRIDE" %}    os.environ["BATCH_OVERRIDE"]   = "{{entry.value}}" {%- br %}{%- endfrom %}
    os.environ["PILOT_TABLE"]       = WslPythonCommon.GetExtendedProperty("RANGE_PILOT_TABLE",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["UNLOAD_DELIM"]      = WslPythonCommon.GetExtendedProperty("SF_UNLOAD_DELIMITER",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["UNLOAD_ENCLOSED"]   = WslPythonCommon.GetExtendedProperty("SF_UNLOAD_ENCLOSED_BY",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["UNLOAD_ESCAPE"]     = WslPythonCommon.GetExtendedProperty("SF_UNLOAD_ESCAPE_CHAR",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["MAX_RETRIES"]       = WslPythonCommon.GetExtendedProperty("RANGE_UPLOAD_MAX_RETRIES",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["UNICODE_SUPPORT"]= WslPythonCommon.GetExtendedProperty("SF_UNICODE_SUPPORT",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    THREAD_COUNT            =  WslPythonCommon.GetExtendedProperty("RANGE_THREAD_COUNT",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    THREAD_ERRORS           =  WslPythonCommon.GetExtendedProperty("RANGE_MAX_THREAD_FAILURES",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    THREAD_FAIL_ACTION      =  WslPythonCommon.GetExtendedProperty("RANGE_FAIL_ON_THREAD_FAILURE",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["EXTRACT_CHAR_SET"]  = WslPythonCommon.GetExtendedProperty("RANGE_EXTRACT_CHARSET",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    os.environ["MAX_ROW_LENGTH"]    = WslPythonCommon.GetExtendedProperty("RANGE_MAX_ROW_LENGTH",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    CR_LF_REPLACED          = "{{crLfReplaced}}"
    os.environ["RANGE_LOCATION"] = WslPythonCommon.GetExtendedProperty("RANGE_WORK_TABLE_LOCATION",str(os.environ["WSL_LOAD_TABLE"])){%br%}
    RANGE_WORK_CONNECTION = WslPythonCommon.GetExtendedProperty("RANGE_WORK_CONNECTION",str(os.environ["WSL_LOAD_TABLE"])){%br%}

    if os.environ["UNLOAD_GZIP"]!="TRUE":
        os.environ["UNLOAD_GZIP"] = "FALSE"

    if os.environ["UNLOAD_DELIM"]=="":
        os.environ["UNLOAD_DELIM"] = "|"

    if os.environ["UNLOAD_ENCLOSED"]=="None":
        os.environ["UNLOAD_ENCLOSED"] = '"'

    if os.environ["UNLOAD_ESCAPE"]=="":
        os.environ["UNLOAD_ESCAPE"] = "#"

    if os.environ["FILE_FORMAT"]=="":
        os.environ["FILE_FORMAT"] = "FMT_RED_CSV_SKIP_GZIP_COMMA"

    unicode = True
    if str(os.getenv('UNICODE_SUPPORT'))== "TRUE":
       unicode = True
    try:
        logStream = open(fileAud, 'a+')
        errStream = open(fileErr, 'a+')
    except Exception as inst:
        print(inst.args)
    {%- br %}
    if str(os.getenv('DEBUG')) == "TRUE": {%- br %}
        errStream.write("\n=================== LOAD OPTIONS ==================="){%- br %}
        errStream.write("\nSpecified Load Table:             " + os.getenv('WSL_LOAD_TABLE')){%- br %}
        errStream.write("\nSpecified Work Dir:               " + os.environ["WSL_WORKDIR"]){%- br %}
        errStream.write("\nSpecified Sequence:               " + os.environ["WSL_SEQUENCE"]){%- br %}
        errStream.write("\nSpecified Metadata ODBC DSN:      " + os.environ["WSL_META_DSN"]){%- br %}
        errStream.write("\nSpecified Metadata Username:      " + str(os.getenv('WSL_META_USER'))){%- br %}
        errStream.write("\nSpecified Metadata Password:      " + ('*'*len(str(os.getenv('WSL_META_PWD'))))+'\n'){%br%}
        errStream.write("\n"){%- br %}
        errStream.write("\n=================== SOURCE TABLE INFO ==================="){%- br %}
        errStream.write("\nSource Schema:                    " + os.environ["WSL_SRC_SCHEMA"]){%- br %}
        errStream.write("\nSource Tables:                    " + "{{ table.loadInfo.sourceTables }}"){%- br %}
        errStream.write("\nSource Where:                     " + "{{ table.loadInfo.whereAndGroupByClauses.Replace('"','""') }}"){%- br %}
        errStream.write("\n"){%- br %}
        errStream.write("\n=================== SOURCE DB INFO ==================="){%- br %}
        errStream.write("\nODBC Source DSN:                  " + os.environ["WSL_SRC_DSN"]){%- br %}
        errStream.write("\nODBC Source Username:             " +  (str(os.getenv('WSL_SRC_USER')))){%- br %}
        errStream.write("\nODBC Source Password:             " +('*'*len(str(os.getenv('WSL_SRC_PWD'))))+'\n'){%- br %}
        errStream.write("\n"){%- br %}
        errStream.write("\n=================== EXTENDED PROPERTIES ==================="){%- br %}
        errStream.write("\nSF_DEBUG_MODE:                    " + os.environ["DEBUG"]){%- br %}
        errStream.write("\nSF_SNOWSQL_ACCOUNT:               " + os.environ["SNOWSQL_ACCOUNT"]){%- br %}
        errStream.write("\nSF_SNOWSQL_WAREHOUSE:             " + os.environ["SNOWSQL_WAREHOUSE"]){%- br %}
        errStream.write("\nSF_SNOWSQL_DATABASE:              " + os.environ["SNOWSQL_DATABASE"]){%- br %}
        errStream.write("\nSF_FILE_FORMAT:                   " + os.environ["FILE_FORMAT"]){%- br %}
        errStream.write("\nSF_SEND_FILES_ZIPPED:             " + os.environ["UNLOAD_GZIP"]){%- br %}
        errStream.write("\nSF_UNLOAD_DELIMITER:              " + os.environ["UNLOAD_DELIM"]){%- br %}
        errStream.write("\nSF_UNLOAD_ENCLOSED_BY:            " + os.environ["UNLOAD_ENCLOSED"]){%- br %}
        errStream.write("\nSF_UNLOAD_ESCAPE_CHAR:            " + os.environ["UNLOAD_ESCAPE"]){%- br %}
        errStream.write("\nRANGE_BATCH_EXPRESSION:           " + os.environ["BATCH_EXPRESSION"]){%- br %}
        errStream.write("\nRANGE_BATCH_INCREMENTAL_OVERRIDE: " + os.environ["BATCH_OVERRIDE"]){%- br %}
        errStream.write("\nRANGE_PILOT_TABLE:                " + os.environ["PILOT_TABLE"]){%- br %}
        errStream.write("\nRANGE_THREAD_COUNT:               " + THREAD_COUNT){%- br %}
        errStream.write("\nRANGE_MAX_THREAD_FAILURES:        " + THREAD_ERRORS){%- br %}
        errStream.write("\nRANGE_UPLOAD_MAX_RETRIES:         " + os.environ["MAX_RETRIES"]){%- br %}
        errStream.write("\nRANGE_EXTRACT_CHARSET:            " + os.environ["EXTRACT_CHAR_SET"]){%- br %}
        errStream.write("\nRANGE_MAX_ROW_LENGTH:             " + os.environ["MAX_ROW_LENGTH"]){%- br %}
        errStream.write("\nRANGE_CR_LF_REPLACED:             " + CR_LF_REPLACED){%- br %}
        errStream.write("\nRANGE_WORK_TABLE_LOCATION:        " + os.environ["RANGE_LOCATION"]){%- br %}
        errStream.write("\nRANGE_WORK_CONNECTION:            " + RANGE_WORK_CONNECTION){%- br %}
        errStream.write("\n"){%- br %}
    {%- br %}
    {%- br %}

    if  os.environ["RANGE_LOCATION"] == "SNOWFLAKE":
        os.environ["RANGE_SCHEMA"] = os.environ["WSL_LOAD_SCHEMA"]
        os.environ["RANGE_CURR_DATE"] = "CAST(CURRENT_TIMESTAMP AS TIMESTAMP)"
        os.environ["EXTRACT_SECS"] = "TIMESTAMPDIFF('SECOND',START_EXTRACT_TIMESTAMP,CAST(CURRENT_TIMESTAMP AS TIMESTAMP))"
        os.environ["PUT_SECS"] = "TIMESTAMPDIFF('SECOND',START_PUT_TIMESTAMP,CAST(CURRENT_TIMESTAMP AS TIMESTAMP))"
        os.environ["LOAD_SECS"] = "TIMESTAMPDIFF('SECOND',START_LOAD_TIMESTAMP,CAST(CURRENT_TIMESTAMP AS TIMESTAMP))"
        os.environ["TOTAL_SECS"] = "TIMESTAMPDIFF('SECOND',START_EXTRACT_TIMESTAMP,CAST(CURRENT_TIMESTAMP AS TIMESTAMP))"
        os.environ["rangeTableDsn"] = os.environ["WSL_TGT_DSN"]
        os.environ["rangeTableUser"] = os.environ["WSL_TGT_USER"]
        os.environ["rangeTablePwd"] = os.environ["WSL_TGT_PWD"]
    else:
        os.environ["RANGE_SCHEMA"] = "dbo"
        os.environ["RANGE_CURR_DATE"] = "GETDATE()"
        os.environ["EXTRACT_SECS"] = "DATEDIFF(SECOND,START_EXTRACT_TIMESTAMP,GETDATE())"
        os.environ["PUT_SECS"] = "DATEDIFF(SECOND,START_PUT_TIMESTAMP,GETDATE())"
        os.environ["LOAD_SECS"] = "DATEDIFF(SECOND,START_LOAD_TIMESTAMP,GETDATE())"
        os.environ["TOTAL_SECS"] = "DATEDIFF(SECOND,START_EXTRACT_TIMESTAMP,GETDATE())"
        rangeConn = GetRangeConnDet(RANGE_WORK_CONNECTION)
        os.environ["rangeTableDsn"]  = rangeConn[0]
        os.environ["rangeTableUser"] = rangeConn[1]
        os.environ["rangeTablePwd"]  = rangeConn[2]


    {%- if PilotTable != "" %}{%- br %}
    batchListSql = """SELECT batch_number
           , min_value
           , max_value
      FROM """+os.environ["RANGE_SCHEMA"]+"."+os.environ["PILOT_TABLE"]+"""
      WHERE status IN ('N','R')
      ORDER BY batch_number"""

    try:{%- br %}
         bdt =WslPythonSnowflake.RunSnowflakeRedSQL(batchListSql,str(os.environ["rangeTableDsn"]),str(os.environ["rangeTableUser"]), str(os.environ["rangeTablePwd"]),'' , '','')
    except Exception as inst:{%- br %}
                        logStream.write(inst.args){%- br %}
                        logStream.write("\nLoad failed. Failed to access range table"){%- br %}
                        print("-2"){%- br %}
                        print("\nLoad failed. Failed to access range table"){%- br %}

    if len(bdt[4])==0:
        logStream.write("\nBatch table is empty or all batches are marked as complete")
        print("-1"){%- br %}
        print("Batch table is empty or all batches are marked as complete"){%- br %}

    started_evt = Event(){%- br %}
    if len(bdt[4])==1:{%- br %}
	    t = Thread(target = JobScript, args =(bdt[4][0], 1)){%- br %}
	    t.start() {%- br %}
    i=0{%- br %}
    for batch in bdt[4]:{%- br %}
                i=i+1{%- br %}
                errStream.write('Launching JobScript Thread : '+str(i)+'\n'){%- br %}
                t = Thread(target = JobScript, args =(batch, i)){%- br %}
                t.start(){%- br %}
   {%- br %}
   {%- endif %}
    {%- if PilotTable != "" %}
    batchUpdateSql ="""UPDATE """+os.environ["RANGE_SCHEMA"]+"."+os.environ["PILOT_TABLE"]+"""
      SET STATUS = 'N'
      WHERE STATUS = 'R'
"""{%- br %}
    bdt=WslPythonSnowflake.RunSnowflakeRedSQL(batchUpdateSql,str(os.environ["rangeTableDsn"]),str(os.environ["rangeTableUser"]), str(os.environ["rangeTablePwd"]),'' , '',''){%- br %}
    {%- endif %}
    try:
       WslPythonCommon.WsWrkTask(0,0,0,bdt[2],0,0,0)
    except Exception as inst:
        logStream.write("Call to WsWrkTask failed")
        logStream.write(inst.args)

    if bdt[1]==1:
        logStream.write("\nLoad successful. Total of "+ str(bdt[1]) +"rows loaded")
        print(bdt[1])
        print("\nLoad successful. Total of "+ str(bdt[1]) +" rows loaded")
    elif bdt[1]== -1:
       logStream.write("\nLoad completed with warnings. Total of "+ str(bdt[1]) +"rows loaded")
       print(bdt[1])
    else:
        logStream.write("\nLoad failed. Total of "+str(bdt[1])+" rows loaded")
        print(bdt[1])
        print("\nLoad failed. Total of "+str(bdt[1])+" rows loaded")
    logStream.close()
    errStream.close(){%- br %}

try:
	filePath = os.environ["WSL_WORKDIR"]
	auditLog=  str(os.environ["WSL_LOAD_TABLE"])+"_"+str(os.getenv('WSL_SEQUENCE'))+".aud"
	fileAud = os.path.join(filePath,auditLog)
	errorLog=  str(os.environ["WSL_LOAD_TABLE"])+"_"+str(os.getenv('WSL_SEQUENCE'))+".err"
	fileErr = os.path.join(filePath,errorLog)
	MAIN(fileAud,fileErr)

except Exception as inst:
        print(inst.args)
        print("-2")
        print("\nLoad failed")
PrintLog(fileAud,fileErr)
