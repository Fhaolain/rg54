{# -- TemplateVersion:001 MinVersion:8510 MaxVersion:* TargetType:Snowflake ModelType:* TemplateType:Python                                                 -- #}
{# --                                                                                                                                                       -- #}
{# --    (c) Wherescape Inc 2020. WhereScape Inc permits you to copy this Template solely for use with the RED software, and to modify this Template        -- #}
{# --    for the purposes of using that modified Template with the RED software, but does not permit copying or modification for any other purpose.         -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# -- DBMS Name          : Snowflake                                                                                                                        -- #}
{# -- Template Name      : wsl_snowflake_pyscript_load_range                                                                                                -- #}
{# -- RED Version        : 8.5.1.0                                                                                                                          -- #}
{# -- Description        : This template creates a Snowflake script specifically                                                                            -- #}
{# --                      designed for range table loads                                                                                                   -- #}
{# --                                                                                                                                                       -- #}
{# -- =============================================================================                                                                         -- #}
{# --                                                                                                                                                       -- #}
{# --                                                                                                                                                       -- #}
{#  Notes / History                                                                                                                                         -- #}
{# --                                                                                                                                                       -- #}
{%- import "wsl_snowflake_utility" -%}
{%- set PilotTable = getExtendedProperty( propertyName = "RANGE_PILOT_TABLE" ) | trim %}
{%- set crLfReplaced = getExtendedProperty( propertyName = "RANGE_CR_LF_REPLACED" ) | trim %}
#=============================================================================={%- br %}
# DBMS Name        :    SNOWFLAKE {{table.dbType.name}}{%- br %}
# Template         :    {{settings.template.name}}{%- br %}
# Template Version :    8.5.1.0{%- br %}
# Description      :    Range Driven Data Load for {{table.name}}{%- br %}
# Generated by     :    {{env.productVersion}}{%- br %}
# Generated for    :    {{env.licensedTo}}{%- br %}
# Generated on     :    {{env.currentTimestamp}}{%- br %}
# Author           :    {{env.userName}}{%- br %}
#=============================================================================={%- br %}
# Notes / History{%- br %}
#{%- br %}

import os{%br%}
import re{%br%}
import gzip{%br%}
import shutil{%br%}
import sys{%br%}
from datetime import datetime{%br%}
import glob{%br%}
import pyodbc{%br%}
import time{%br%}
import threading{%br%}
from threading import Thread, Event{%br%}
import queue{%br%}
sys.path.append('C:\ProgramData\WhereScape\Modules\WslPython'){%br%}
import WslPythonCommon{%br%}
import WslPythonSnowflake{%br%}
WslPythonCommon.HideWindow(){%br%}
totalRows = 0{% br %}
threadError = 0{% br %}
{%br%}
def PrintLog(fileAud,fileErr):{%br%}
    try:
     filesize = os.path.getsize(fileAud){%br%}
     if filesize != 0:{%br%}
        with open(fileAud, 'r') as write_to_console:{%br%}
            print(write_to_console.read()){%br%}
        if str(os.environ.get('DEBUG'))!= "TRUE":
            os.remove(fileAud)
     filesize = os.path.getsize(fileErr){%br%}
     if filesize != 0:{%br%}
        with open(fileErr, 'r') as write_to_console:{%br%}
            print(write_to_console.read()){%br%}
        if str(os.environ.get('DEBUG'))!= "TRUE":
            os.remove(fileErr)
    except Exception as inst:
                        print(inst.args)
{%- br %}
def GzipFile({%br%}
        inFile="No input file specified",{%br%}
        outFile=".gz",{%br%}
        removeOriginal=True{%br%}
    ):{%br%}
    if outFile!=".gz":{%br%}
      with open(inFile, 'rb') as f_in:{%br%}
        with gzip.open(outFile+".gz", 'wb') as f_out:{%br%}
            shutil.copyfileobj(f_in, f_out){%br%}
      outNewFile=outFile+".gz"{%br%}
    else:{%br%}
       with open(inFile, 'rb') as f_in:{%br%}
        with gzip.open(os.path.splitext(inFile)[0]+outFile, 'wb') as f_out:{%br%}
            shutil.copyfileobj(f_in, f_out){%br%}
       outNewFile=(inFile+outFile){%br%}
    if removeOriginal==True:{%br%}
        os.remove(inFile){%br%}
    return (outNewFile){%br%}

def JobScript({% br %}
        {%- if PilotTable != "" %}
        batch,{% br %}
        {%- endif %}
        id,{% br %}
        queueObject
    ):{% br %}
   try:
    threadAud = os.path.join(os.environ.get('WSL_WORKDIR',''), str(os.environ.get('WSL_LOAD_TABLE',''))+"_"+str(os.environ.get('WSL_SEQUENCE'))+"_THREAD_"+str(id)+".aud")
    threadErr = os.path.join(os.environ.get('WSL_WORKDIR',''), str(os.environ.get('WSL_LOAD_TABLE',''))+"_"+str(os.environ.get('WSL_SEQUENCE'))+"_THREAD_"+str(id)+".err")
    audStream = open(threadAud, 'a+'){% br %}
    errStream = open(threadErr, 'a+'){% br %}
    global totalRows{% br %}
    global threadError{% br %}
    unicode = False
    if str(os.environ.get('UNICODE_SUPPORT'))== "TRUE":
       unicode = True
    {%- if PilotTable != "" %}

    batchStatusSql ="""SELECT STATUS
    FROM """+os.environ.get('RANGE_SCHEMA','')+"."+os.environ.get('PILOT_TABLE','')+"""
    WHERE BATCH_NUMBER ="""+ str(batch[0]){% br %}

    bst = WslPythonCommon.RunRedSQL(batchStatusSql,str(os.environ.get('rangeTableDsn','')),str(os.environ.get('rangeTableUser','')), str(os.environ.get('rangeTablePwd','')),'' , '',os.environ.get('RANGE_SCHEMA','')+"."+os.environ.get('PILOT_TABLE','')){% br %}

    if bst[4][0][0] == "P":
        audStream.write("\nBatch " +str(batch[0]) +" is in a paused state. Skipping")
        errStream.write("\nBatch "+str(batch[0])+" is in a paused state. Skipping")
        audStream.close()
        errStream.close()
        sys.exit(1)

    errStream.write("Now loading batch: "+str(batch[0])+"\n"){% br %}

    batchUpdateSql = """UPDATE """+os.environ.get('RANGE_SCHEMA','')+"."+os.environ.get('PILOT_TABLE','')+"""
      SET STATUS = 'R'
        , THREAD_NUMBER = """+str(id)+"""
        , START_EXTRACT_TIMESTAMP = """+os.environ.get('RANGE_CURR_DATE','')+"""
      WHERE BATCH_NUMBER = """+str(batch[0])

    bst = WslPythonCommon.RunRedSQL(batchUpdateSql,str(os.environ.get('rangeTableDsn','')),str(os.environ.get('rangeTableUser','')), str(os.environ.get('rangeTablePwd','')),'' , '',os.environ.get('RANGE_SCHEMA','')+"."+os.environ.get('PILOT_TABLE',''))

    {%- endif %}

    fileDat = "wsl"+os.environ.get('WSL_LOAD_TABLE','')+os.environ.get('WSL_SEQUENCE',''){%- if PilotTable != "" %}+"_BATCH_"+str(batch[0])+".dat"{% endif %}





    extractSQL = """
SELECT {%- from table.columns as column %}
                                          {%- if not loop.first %}                                      ,{% endif %}
                                          {%- if column.datatype == "varchar" or column.datatype == "char"  %}{% endif %}
                                          {%- if column.transform | trim == "" or column.transformType.code == "A" %}
                                            {%- if column.sourceTable.name is defined and column.sourceColumn.name is defined %} {{ column.sourceTable.name }}.{{ column.sourceColumn.name }}
                                            {%- elseif column.source is defined and column.transformType.code != "A" %} {{column.source}}
                                            {%- else %} ' '
                                            {%- endif %}
                                          {%- elseif column.transformType.code != "A" %} {{ column.transform }}
                                          {%- else %} ' '
                                          {%- endif %}
                                          {%- if column.datatype == "varchar" or column.datatype == "char"  %}{% endif %}{% br %}
                                        {%- endfrom %}
                                       {%- if table.loadInfo.sourceTables != "" %}
                                 FROM """+os.environ.get('WSL_SRC_SCHEMA','')+""".{{ table.loadInfo.sourceTables }}{%- br -%}
                                       {%- endif -%}
                                       {%- from table.loadInfo.whereAndGroupByClauses | trim | lines as whereLine %}                                 {{whereLine}}{% br %}{% endfrom -%}
"""{%- br -%}
    {%- if PilotTable != "" -%}{% br %}
    if((str(batch[1]) != "NULL") and  (str(batch[2]) == "NULL")):{% br %}
         extractSQL =extractSQL+{% if table.loadInfo.whereAndGroupByClauses == "" %}"                                 WHERE """{% else %}"AND"{% endif %}+ os.environ.get('BATCH_OVERRIDE','')+""" > """+str(batch[1]){% br %}
    elif (str(batch[1])) != "NULL":{% br %}
        extractSQL =extractSQL+{% if table.loadInfo.whereAndGroupByClauses == "" %}"                                 WHERE """{% else %}"AND"{% endif %}+ os.environ.get('BATCH_EXPRESSION','')+""" BETWEEN """+str(batch[1])+" AND "+ str(batch[2]){% br %}
    else:{% br %}
        extractSQL =extractSQL+{% if table.loadInfo.whereAndGroupByClauses == "" %}"                                 WHERE """{% else %}"AND"{% endif %}+ os.environ.get('BATCH_EXPRESSION','')+""" IS NULL"""{% br %}
   {%- endif %}

    if str(os.environ.get('DEBUG',''))== "TRUE":{% br %}
        errStream.write("\n================== EXTRACT SQL STATEMENT ==================\n"){%- br %}
        errStream.write(extractSQL.replace("                                 ","")){%- br %}
        errStream.write(""){%- br %}


    extractSQL = extractSQL.replace("                                 ","")

    unicode = False{% br %}
    if str(os.environ.get('EXTRACT_CHAR_SET')).find("UTF")!= -1:{% br %}
       unicode = True{% br %}
    if str(os.environ.get('DEBUG',''))== "TRUE":{% br %}
       errStream.write("\nBEGIN create of data file from source system: "+str(datetime.now())+'\n'){% br %}
    fileFull = os.path.join(os.environ.get('WSL_WORKDIR',''),fileDat)
    rowCount = WslPythonCommon.GetDataToFile(extractSQL,str(os.environ.get('WSL_SRC_DSN','')),str(os.environ.get('WSL_SRC_USER','')),str(os.environ.get('WSL_SRC_PWD','')),fileFull,str(os.environ.get('UNLOAD_DELIM','')), 0, 0, True, unicode, os.environ.get('UNLOAD_ENCLOSED',''), os.environ.get('UNLOAD_ESCAPE','')){% br %}
    if str(os.environ.get('DEBUG','')) == "TRUE":
       errStream.write("\nEND create of data file from source system: "+str(datetime.now())+'\n'){% br %}

    currentRetry = 0
    lastSnowSQLCode = 0
    lastexitcode=0

    {%- if PilotTable != "" %}{% br %}{% br %}
    batchUpdateSql ="""UPDATE """+os.environ.get('RANGE_SCHEMA','')+"."+os.environ.get('PILOT_TABLE','')+"""
      SET START_PUT_TIMESTAMP ="""+os.environ.get('RANGE_CURR_DATE','')+"""
        , EXTRACT_DURATION_SECONDS = """+os.environ.get('EXTRACT_SECS','')+"""
      WHERE BATCH_NUMBER =  """+str(batch[0])

    udt = WslPythonCommon.RunRedSQL(batchUpdateSql,str(os.environ.get('rangeTableDsn','')),str(os.environ.get('rangeTableUser','')), str(os.environ.get('rangeTablePwd','')),'' , '',os.environ.get('RANGE_SCHEMA','')+"."+os.environ.get('PILOT_TABLE',''))
    {%- endif %}

    if str(os.environ.get('UNLOAD_GZIP',''))== "TRUE":
        try:
            inputFile = fileFull+".txt"{%- br %}
            output = ".gz"{%- br %}
            if str(os.environ.get('DEBUG',''))== "TRUE":
                output=GzipFile(inputFile,output,False)
            else:
                output=GzipFile(inputFile,output,True)
                errStream.write("\n=============== DATA FILE COMPRESSION ===============\n")
                errStream.write("Data file gzipped to: "+output)
                errStream.write("")
            fileDat = fileDat + ".gz"
        except Exception as inst:
                        print(-2){%- br %}
                        threadError=threadError+1{%- br %}
                        errStream.write(str(inst.args)){%- br %}
                        sys.exit(1){%- br %}
    try: {% br %}
        uid=str(os.environ.get('WSL_TGT_USER','')) {% br %}
        pwd=str(os.environ.get('WSL_TGT_PWD','')) {% br %}
        SFConnectionString = "DSN="+str(os.environ.get('WSL_TGT_DSN','')) {% br %}
        if uid and not uid.isspace(): {% br %}
          SFConnectionString += ";UID="+uid {% br %}
        if pwd and not pwd.isspace(): {% br %}
          SFConnectionString += ";PWD="+pwd {% br %}
        SFConnection = pyodbc.connect(SFConnectionString, autocommit=True){% br %}
    except Exception as exceptionError: {% br %}
        print(-2){% br %}
        print("Connection error has occurred: : " + repr( exceptionError)){% br %}
        errStream.write("\nConnection error has occurred: : " + repr( exceptionError)) {% br %}
        sys.exit(){% br %}
    try:{% br %}
     removeSQL = "remove @~/WSL-"+"wsl"+os.environ.get('WSL_LOAD_TABLE','')+os.environ.get('WSL_SEQUENCE','')+"_BATCH_"+str(batch[0])+"*"+";"{% br %}
     try:
             SFCursor = SFConnection.cursor()
             SFCursor.execute(removeSQL)
             SFCursor.close()
     except Exception as exceptionError:
              print(-2)
              print("An error has occurred: : " + repr( exceptionError))
     putSQL =r"PUT 'file://" + (os.path.join(os.environ.get('WSL_WORKDIR',''),"wsl"+os.environ.get('WSL_LOAD_TABLE','')+os.environ.get('WSL_SEQUENCE','')+"_BATCH_"+str(batch[0])).replace(os.sep, '/'))
     if str(os.environ.get('UNLOAD_GZIP',''))== "TRUE":{% br %}
      putSQL = str(putSQL)+r"*.gz' @~;"{% br %}
     else:{% br %}
      putSQL = str(putSQL)+r"*' @~;"{% br %}

     try:
              SFCursor = SFConnection.cursor()
              SFCursor.execute(putSQL)
              SFCursor.close()
     except Exception as exceptionError:
              print(-2)
              print("An error has occurred:PUT Failed " + repr( exceptionError))
              errStream.write("\nAn error has occurred:PUT Failed " + repr( exceptionError))
              sys.exit()

     if str(os.environ.get('DEBUG','')) == "TRUE":
        errStream.write("\n=================== FILE UPLOAD ===================\n")
        errStream.write(putSQL)
    except Exception as e:{% br %}
          currentRetry = 0{% br %}
          lastSnowSQLCode = 0{% br %}
          lastexitcode=1{% br %}

    while lastexitcode != 0 and currentRetry < os.environ.get('MAX_RETRIES',''):{% br %}
        currentRetry = currentRetry +1{% br %}
        audStream.write("\nData file upload failed, retrying. Current retries: "+str(currentRetry)+". Max retries: "+os.environ.get('MAX_RETRIES','')){% br %}
        errStream.write("\nData file upload failed, retrying. Current retries: "+str(currentRetry)+". Max retries: "+os.environ.get('MAX_RETRIES','')){% br %}
        {%- if PilotTable != "" %}{% br %}
        batchUpdateSql ="""UPDATE """+os.environ.get('RANGE_SCHEMA','')+"."+os.environ.get('PILOT_TABLE','')+"""{% br %}
          SET RETRY_COUNT = """+str(currentRetry)+"""
          WHERE BATCH_NUMBER ="""+str(batch[0])
        udt = WslPythonCommon.RunRedSQL(batchUpdateSql,str(os.environ.get('rangeTableDsn','')),str(os.environ.get('rangeTableUser','')), str(os.environ.get('rangeTablePwd','')),'' , '',os.environ.get('RANGE_SCHEMA','')+"."+os.environ.get('PILOT_TABLE','')){% br %}

        {%- endif %}

        removeSQL = "remove @~/WSL-"+"wsl"+os.environ.get('WSL_LOAD_TABLE','')+os.environ.get('WSL_SEQUENCE','')+"_BATCH_"+str(batch[0])+"*"+";"
        try:
             SFCursor = SFConnection.cursor()
             SFCursor.execute(removeSQL)
             SFCursor.close()
        except Exception as exceptionError:
              print(-2)
              print("An error has occurred: : " + repr( exceptionError))
        putSQL =r"PUT 'file://" + os.path.join(os.environ.get('WSL_WORKDIR',''),fileDat).replace(os.sep, '/'){% br %}
        putSQL = str(putSQL)+r"*' @~;"{% br %}
        try:
              SFCursor = SFConnection.cursor()
              SFCursor.execute(putSQL)
              SFCursor.close()
        except Exception as exceptionError:
              print(-2)
              print("An error has occurred:PUT Failed " + repr( exceptionError))
              errStream.write("An error has occurred:PUT Failed " + repr( exceptionError))
              sys.exit()

        lastexitcode=0
        lastSnowSQLCode = lastexitcode
        if str(os.environ.get('DEBUG','')) == "TRUE":
            errStream.write(putSQL)

    if lastSnowSQLCode != 0:
        audStream.write("\nData file upload failed. Retry limit exhausted. Aborting thread")
        errStream.write("\nData file upload failed. Retry limit exhausted. Aborting thread")
        errStream.write(putSQL)
        print( -2)
        threadError=threadError+1
        PrintLog(threadAud,threadErr)
        print("\nData file upload failed. Retry limit exhausted. Aborting thread")

    {%- if PilotTable != "" %}{% br %}{% br %}
    batchUpdateSql = """UPDATE """+os.environ.get('RANGE_SCHEMA','')+"."+os.environ.get('PILOT_TABLE','')+"""
      SET START_LOAD_TIMESTAMP ="""+os.environ.get('RANGE_CURR_DATE','')+"""
        , PUT_DURATION_SECONDS ="""+os.environ.get('PUT_SECS','')+"""
    WHERE BATCH_NUMBER =  """+str(batch[0])

    udt = WslPythonCommon.RunRedSQL(batchUpdateSql,str(os.environ.get('rangeTableDsn','')),str(os.environ.get('rangeTableUser','')), str(os.environ.get('rangeTablePwd','')),'' , '',os.environ.get('RANGE_SCHEMA','')+"."+os.environ.get('PILOT_TABLE',''))

    {%- endif %}

    PURGE = "TRUE"{% br %}
    if str(os.environ.get('DEBUG','')) == "TRUE":{% br %}
        PURGE = "FALSE"{% br %}

    {%- set crLfList = crLfReplaced.split(",") %}{% br %}
    copyStmt = """COPY INTO """+ os.environ.get('WSL_LOAD_FULLNAME','')+"""
    FROM ({%- br %}{% set csvPos = 0 %}
      SELECT {% for col in table.columns %}
               {%- if not loop.first %}           , {% endif %}
               {%- if crLfList contains col.name %}REPLACE(REPLACE({%- endif %}
               {%- if col.transformType.code == "A" %}{{ col.source }}
               {%- else %}
                 {%- set csvPos = csvPos + 1 %}t.${{ csvPos }}
               {%- endif %}
               {%- if crLfList contains col.name %},'~~0A~~',CHAR(10)),'~~0D~~',CHAR(13)){%- endif %}
               {%- br %}
             {%- endfor %}
      FROM @~/wsl"""+os.environ.get('WSL_LOAD_TABLE','')+os.environ.get('WSL_SEQUENCE','')+"_BATCH_"+str(batch[0])+""".dat t
    ){% br %}
    PATTERN = '.*'{%- br %}
    FILE_FORMAT = """+str(os.environ.get('fileFormatFullName',''))+"""
    PURGE = """+PURGE{% br %}

    {%- if table.loadInfo.fileLoaderOptions != "" %}    {{ table.loadInfo.fileLoaderOptions }}{%- br %}
    {%- endif %}


    if str(os.environ.get('DEBUG','')) == "TRUE":
        errStream.write("\n=================== IMPORT SQL ===================\n")
        errStream.write(copyStmt)
        errStream.write("")


    try:
         SFCursor = SFConnection.cursor()
         loadResult=SFCursor.execute(copyStmt).fetchall()
         SFCursor.close()
    except Exception as exceptionError:
            print(-2)
            print("An error has occurred:COPY Failed " + repr( exceptionError)){%- br %}
            errStream.write("An error has occurred: : " + repr( exceptionError)){%- br %}
            if str(os.environ.get('DEBUG','')) == "TRUE":
              errStream.write("\n=================== IMPORT SQL ===================\n")
              errStream.write(copyStmt)
              errStream.write("")
            threadError=threadError+1{%- br %}
            sys.exit(){%- br %}
    try:
     checkStatus=0{%- br %}
     rowsLoaded=0{%- br %}
     checkFlag=0{%- br %}
     errStream.write("\nFile                                            " + "Status         " + "Rows Parsed        "+"Rows Loaded  \n"){%- br %}
     errStream.write("------------------------------------------------" + "---------------" + "-------------------"+"-------------------  \n"){%- br %}
     while len(loadResult)> checkStatus:{%- br %}
        if loadResult[checkStatus][5] == 0:{%- br %}
             rowsLoaded = rowsLoaded + loadResult[checkStatus][3] {%- br %}
        else:  {%- br %}
             checkFlag=1 {%- br %}
        errStream.write(str(loadResult[checkStatus][0])+"       "+str(loadResult[checkStatus][1])+"       "+str(loadResult[checkStatus][2])+"       "+str(loadResult[checkStatus][3])+"       \n"){%- br %}
        checkStatus = checkStatus+1   {%- br %}
     totalRows = totalRows + rowsLoaded{%- br %}
     if checkFlag==0:    {%- br %}
        errStream.write(str(rowsLoaded) +" rows loaded.\n"){%- br %}
        try:
         #-- WsWrkTask call to updated row counts in Ws_Wrk_Task_Run/Log{%- br %}
            metaResult=WslPythonCommon.WsWrkTask(0,0,0,rowsLoaded,0,0,0){%- br %}
        except:{%- br %}
                errStream.write("Failed to update task row count"){%- br %}
     else:{%- br %}
            errStream.write("-2"){%- br %}
            errStream.write("Load failed"){%- br %}
            threadError=threadError+1{%- br %}
    except Exception as exceptionError:{%- br %}
        print("-2"){%- br %}
        print(exceptionError.args){%- br %}
        errStream.write(str(repr(exceptionError))){%- br %}
    {%- if PilotTable != "" %}{%- br %}
    batchUpdateSql = """UPDATE """+os.environ.get('RANGE_SCHEMA','')+"."+os.environ.get('PILOT_TABLE','')+"""
      SET STATUS = 'C'
        , END_TIMESTAMP = """+os.environ.get('RANGE_CURR_DATE','')+"""
        , LOADED_ROWS = """+str(rowsLoaded)+"""
        , LOAD_DURATION_SECONDS = """+str(os.environ.get('LOAD_SECS',''))+"""
        , TOTAL_DURATION_SECONDS ="""+str(os.environ.get('TOTAL_SECS',''))+"""
        , ROWS_VALIDATED = CASE WHEN ROW_COUNTER = -1 THEN 'X' WHEN ROW_COUNTER = """+str(rowsLoaded)+""" THEN 'Y' ELSE 'N' END
      WHERE BATCH_NUMBER = """+str(batch[0]){%- br %}

    udt = WslPythonCommon.RunRedSQL(batchUpdateSql,str(os.environ.get('rangeTableDsn','')),str(os.environ.get('rangeTableUser','')), str(os.environ.get('rangeTablePwd','')),'' , '',os.environ.get('RANGE_SCHEMA','')+"."+os.environ.get('PILOT_TABLE','')){%- br %}

    if str(os.environ.get('DEBUG','')) != "TRUE":{%- br %}
        try:
             SFCursor = SFConnection.cursor()
             SFCursor.execute(removeSQL)
             SFCursor.close()
        except Exception as exceptionError:
              print(-2)
              print("An error has occurred: " + repr( exceptionError))
    else:{%- br %}
        errStream.write("Temporary data files not removed as debug mode is enabled"){%- br %}
    {%- endif %}{%- br %}

    audStream.close(){%- br %}
    errStream.close(){%- br %}
   except Exception as exceptionError:
        print("-2")
        print(exceptionError.args)
        threadError=threadError+1{%- br %}
        queueObject.put(sys.exc_info())

def GetRangeConnDet(
      RANGE_WORK_CONNECTION
):
    sMetaSql = """SELECT dc_odbc_source
           , dc_extract_userid
           , dc_extract_pwd
      FROM   ws_dbc_connect
      WHERE  dc_name =  """+"'"+str(RANGE_WORK_CONNECTION)+"'"

    try:
        rangeTableResult =WslPythonCommon.RunRedSQL(sMetaSql,str(os.environ.get('WSL_META_DSN','')),str(os.environ.get('WSL_META_USER','')), str(os.environ.get('WSL_META_PWD','')), '' , '','')
    except Exception as exceptionError:
                        print("-2")
                        print("\nGet range table connection query failed"+str(repr(exceptionError)))
                        errStream.write("\nGet range table connection query failed"+str(repr(exceptionError)))
    if rangeTableResult[1] == 0:
        errStream.write("No range table connection defined")
        print("-2")
        print("No range table connection defined")
    try:
      rangeTableDsn = str(rangeTableResult[4][0][0])
      rangeTableUser = str(rangeTableResult[4][0][1])
      rangeTablePwd = str(rangeTableResult[4][0][2])
    except Exception as exceptionError:
                        print("-2")
                        print(exceptionError.args)
    return rangeTableDsn, rangeTableUser, rangeTablePwd

def MAIN(logStream,errStream): {%- br %}
    os.environ["DEBUG"]              = WslPythonCommon.GetExtendedProperty("SF_DEBUG_MODE",str(os.environ.get('WSL_LOAD_TABLE',''))){%br%}
    os.environ["FILE_FORMAT"]        = WslPythonCommon.GetExtendedProperty("SF_FILE_FORMAT",str(os.environ.get('WSL_LOAD_TABLE',''))){%br%}
    os.environ["UNLOAD_GZIP"]        = WslPythonCommon.GetExtendedProperty("SF_SEND_FILES_ZIPPED",str(os.environ.get('WSL_LOAD_TABLE',''))){%br%}
   {%- from table.extendedPropertyValuesByName as entry where entry.key == "RANGE_BATCH_EXPRESSION" %}    os.environ["BATCH_EXPRESSION"]  = "{{entry.value}}" {%- br %}{%- endfrom %}
    {%- from table.extendedPropertyValuesByName as entry where entry.key == "RANGE_BATCH_INCREMENTAL_OVERRIDE" %}    os.environ["BATCH_OVERRIDE"]   = "{{entry.value}}" {%- br %}{%- endfrom %}
    os.environ["PILOT_TABLE"]        = WslPythonCommon.GetExtendedProperty("RANGE_PILOT_TABLE",str(os.environ.get('WSL_LOAD_TABLE',''))){%br%}
    os.environ["UNLOAD_DELIM"]       = WslPythonCommon.GetExtendedProperty("SF_UNLOAD_DELIMITER",str(os.environ.get('WSL_LOAD_TABLE',''))){%br%}
    os.environ["UNLOAD_ENCLOSED"]    = WslPythonCommon.GetExtendedProperty("SF_UNLOAD_ENCLOSED_BY",str(os.environ.get('WSL_LOAD_TABLE',''))){%br%}
    os.environ["UNLOAD_ESCAPE"]      = WslPythonCommon.GetExtendedProperty("SF_UNLOAD_ESCAPE_CHAR",str(os.environ.get('WSL_LOAD_TABLE',''))){%br%}
    os.environ["MAX_RETRIES"]        = WslPythonCommon.GetExtendedProperty("RANGE_UPLOAD_MAX_RETRIES",str(os.environ.get('WSL_LOAD_TABLE',''))){%br%}
    os.environ["UNICODE_SUPPORT"]    = WslPythonCommon.GetExtendedProperty("SF_UNICODE_SUPPORT",str(os.environ.get('WSL_LOAD_TABLE',''))){%br%}
    THREAD_COUNT                     = WslPythonCommon.GetExtendedProperty("RANGE_THREAD_COUNT",str(os.environ.get('WSL_LOAD_TABLE',''))){%br%}
    THREAD_ERRORS                    = WslPythonCommon.GetExtendedProperty("RANGE_MAX_THREAD_FAILURES",str(os.environ.get('WSL_LOAD_TABLE',''))){%br%}
    THREAD_FAIL_ACTION               = WslPythonCommon.GetExtendedProperty("RANGE_FAIL_ON_THREAD_FAILURE",str(os.environ.get('WSL_LOAD_TABLE',''))){%br%}
    os.environ["EXTRACT_CHAR_SET"]   = WslPythonCommon.GetExtendedProperty("RANGE_EXTRACT_CHARSET",str(os.environ.get('WSL_LOAD_TABLE',''))){%br%}
    os.environ["MAX_ROW_LENGTH"]     = WslPythonCommon.GetExtendedProperty("RANGE_MAX_ROW_LENGTH",str(os.environ.get('WSL_LOAD_TABLE',''))){%br%}
    CR_LF_REPLACED                   = "{{crLfReplaced}}"
    os.environ["RANGE_LOCATION"]     = WslPythonCommon.GetExtendedProperty("RANGE_WORK_TABLE_LOCATION",str(os.environ.get('WSL_LOAD_TABLE',''))){%br%}
    RANGE_WORK_CONNECTION            = WslPythonCommon.GetExtendedProperty("RANGE_WORK_CONNECTION",str(os.environ.get('WSL_LOAD_TABLE',''))){%br%}

    if os.environ.get('UNLOAD_GZIP','')!="TRUE":
        os.environ["UNLOAD_GZIP"] = "FALSE"

    if os.environ.get('UNLOAD_DELIM','')=="":
        os.environ["UNLOAD_DELIM"] = "|"

    if os.environ.get('UNLOAD_ENCLOSED','')=="":
        os.environ["UNLOAD_ENCLOSED"] = '"'

    if os.environ.get('UNLOAD_ESCAPE','')=="":
        os.environ["UNLOAD_ESCAPE"] = "#"

    if os.environ.get('FILE_FORMAT','')=="":
        os.environ["FILE_FORMAT"] = "FMT_RED_CSV_SKIP_GZIP_COMMA"

    # Work out full file format name{%- br %}
    FILE_FORMAT_FULL=WslPythonCommon.GetFileFormatFullName(os.environ.get('FILE_FORMAT','') )
    os.environ["fileFormatFullName"] = ""
    if FILE_FORMAT_FULL != "":
       os.environ["fileFormatFullName"] = FILE_FORMAT_FULL+"."+os.environ.get('FILE_FORMAT','')
    else:
      os.environ["fileFormatFullName"] = os.environ.get('FILE_FORMAT','')

    global totalRows{% br %}
    global threadError{% br %}
    unicode = True
    if str(os.environ.get('UNICODE_SUPPORT',''))== "TRUE":
       unicode = True

    try:
        logStream = open(fileAud, 'a+')
        errStream = open(fileErr, 'a+')
    except Exception as inst:
        print(inst.args)
    {%- br %}

    if str(os.environ.get('DEBUG','')) == "TRUE": {%- br %}
        errStream.write("\n=================== LOAD OPTIONS ==================="){%- br %}
        errStream.write("\nSpecified Load Table:             " + os.environ.get('WSL_LOAD_TABLE','')){%- br %}
        errStream.write("\nSpecified Work Dir:               " + os.environ.get('WSL_WORKDIR','')){%- br %}
        errStream.write("\nSpecified Sequence:               " + os.environ.get('WSL_SEQUENCE','')){%- br %}
        errStream.write("\nSpecified Metadata ODBC DSN:      " + os.environ.get('WSL_META_DSN','')){%- br %}
        errStream.write("\nSpecified Metadata Username:      " + str(os.environ.get('WSL_META_USER',''))){%- br %}
        errStream.write("\nSpecified Metadata Password:      " + ('*'*len(str(os.environ.get('WSL_META_PWD',''))))+'\n'){%br%}
        errStream.write("\n"){%- br %}
        errStream.write("\n=================== SOURCE TABLE INFO ==================="){%- br %}
        errStream.write("\nSource Schema:                    " + os.environ.get('WSL_SRC_SCHEMA','')){%- br %}
        errStream.write("\nSource Tables:                    " + "{{ table.loadInfo.sourceTables }}"){%- br %}
        errStream.write("\nSource Where:                     " + "{{ table.loadInfo.whereAndGroupByClauses.Replace('"','""') }}"){%- br %}
        errStream.write("\n"){%- br %}
        errStream.write("\n=================== SOURCE DB INFO ==================="){%- br %}
        errStream.write("\nODBC Source DSN:                  " + os.environ.get('WSL_SRC_DSN','')){%- br %}
        errStream.write("\nODBC Source Username:             " +  (str(os.environ.get('WSL_SRC_USER','')))){%- br %}
        errStream.write("\nODBC Source Password:             " +('*'*len(str(os.environ.get('WSL_SRC_PWD',''))))+'\n'){%- br %}
        errStream.write("\n"){%- br %}
        errStream.write("\n=================== EXTENDED PROPERTIES ==================="){%- br %}
        errStream.write("\nSF_DEBUG_MODE:                    " + os.environ.get('DEBUG','')){%- br %}
        errStream.write("\nSF_FILE_FORMAT:                   " + os.environ.get('fileFormatFullName','')){%- br %}
        errStream.write("\nSF_SEND_FILES_ZIPPED:             " + os.environ.get('UNLOAD_GZIP','')){%- br %}
        errStream.write("\nSF_UNLOAD_DELIMITER:              " + os.environ.get('UNLOAD_DELIM','')){%- br %}
        errStream.write("\nSF_UNLOAD_ENCLOSED_BY:            " + os.environ.get('UNLOAD_ENCLOSED','')){%- br %}
        errStream.write("\nSF_UNLOAD_ESCAPE_CHAR:            " + os.environ.get('UNLOAD_ESCAPE','')){%- br %}
        errStream.write("\nRANGE_BATCH_EXPRESSION:           " + os.environ.get('BATCH_EXPRESSION','')){%- br %}
        errStream.write("\nRANGE_BATCH_INCREMENTAL_OVERRIDE: " + os.environ.get('BATCH_OVERRIDE','')){%- br %}
        errStream.write("\nRANGE_PILOT_TABLE:                " + os.environ.get('PILOT_TABLE','')){%- br %}
        errStream.write("\nRANGE_THREAD_COUNT:               " + THREAD_COUNT){%- br %}
        errStream.write("\nRANGE_MAX_THREAD_FAILURES:        " + THREAD_ERRORS){%- br %}
        errStream.write("\nRANGE_UPLOAD_MAX_RETRIES:         " + os.environ.get('MAX_RETRIES','')){%- br %}
        errStream.write("\nRANGE_EXTRACT_CHARSET:            " + os.environ.get('EXTRACT_CHAR_SET','')){%- br %}
        errStream.write("\nRANGE_MAX_ROW_LENGTH:             " + os.environ.get('MAX_ROW_LENGTH','')){%- br %}
        errStream.write("\nRANGE_CR_LF_REPLACED:             " + CR_LF_REPLACED){%- br %}
        errStream.write("\nRANGE_WORK_TABLE_LOCATION:        " + os.environ.get('RANGE_LOCATION','')){%- br %}
        errStream.write("\nRANGE_WORK_CONNECTION:            " + RANGE_WORK_CONNECTION){%- br %}
        errStream.write("\n"){%- br %}
    {%- br %}
    {%- br %}

    if  os.environ.get('RANGE_LOCATION','') == "SNOWFLAKE":{%- br %}
        os.environ["RANGE_SCHEMA"] = os.environ.get('WSL_LOAD_SCHEMA',''){%- br %}
        os.environ["RANGE_CURR_DATE"] = "CAST(CURRENT_TIMESTAMP AS TIMESTAMP)"{%- br %}
        os.environ["EXTRACT_SECS"] = "TIMESTAMPDIFF('SECOND',START_EXTRACT_TIMESTAMP,CAST(CURRENT_TIMESTAMP AS TIMESTAMP))"{%- br %}
        os.environ["PUT_SECS"] = "TIMESTAMPDIFF('SECOND',START_PUT_TIMESTAMP,CAST(CURRENT_TIMESTAMP AS TIMESTAMP))"{%- br %}
        os.environ["LOAD_SECS"] = "TIMESTAMPDIFF('SECOND',START_LOAD_TIMESTAMP,CAST(CURRENT_TIMESTAMP AS TIMESTAMP))"{%- br %}
        os.environ["TOTAL_SECS"] = "TIMESTAMPDIFF('SECOND',START_EXTRACT_TIMESTAMP,CAST(CURRENT_TIMESTAMP AS TIMESTAMP))"{%- br %}
        os.environ["rangeTableDsn"] = os.environ.get('WSL_TGT_DSN',''){%- br %}
        os.environ["rangeTableUser"] = os.environ.get('WSL_TGT_USER',''){%- br %}
        os.environ["rangeTablePwd"] = os.environ.get('WSL_TGT_PWD',''){%- br %}
    else:
        os.environ["RANGE_SCHEMA"] = "dbo"{%- br %}
        os.environ["RANGE_CURR_DATE"] = "GETDATE()"{%- br %}
        os.environ["EXTRACT_SECS"] = "DATEDIFF(SECOND,START_EXTRACT_TIMESTAMP,GETDATE())"{%- br %}
        os.environ["PUT_SECS"] = "DATEDIFF(SECOND,START_PUT_TIMESTAMP,GETDATE())"{%- br %}
        os.environ["LOAD_SECS"] = "DATEDIFF(SECOND,START_LOAD_TIMESTAMP,GETDATE())"{%- br %}
        os.environ["TOTAL_SECS"] = "DATEDIFF(SECOND,START_EXTRACT_TIMESTAMP,GETDATE())"{%- br %}
        rangeConn = GetRangeConnDet(RANGE_WORK_CONNECTION){%- br %}
        os.environ["rangeTableDsn"]  = rangeConn[0]{%- br %}
        os.environ["rangeTableUser"] = rangeConn[1]{%- br %}
        os.environ["rangeTablePwd"]  = rangeConn[2]{%- br %}


    {%- if PilotTable != "" %}{%- br %}
    batchListSql = """SELECT batch_number
           , min_value
           , max_value
      FROM """+os.environ.get('RANGE_SCHEMA','')+"."+os.environ.get('PILOT_TABLE','')+"""
      WHERE status IN ('N','R')
      ORDER BY batch_number"""

    try:
         bdt = WslPythonCommon.RunRedSQL(batchListSql,str(os.environ.get('rangeTableDsn','')),str(os.environ.get('rangeTableUser','')), str(os.environ.get('rangeTablePwd','')),'' , '',os.environ.get('RANGE_SCHEMA','')+"."+os.environ.get('PILOT_TABLE',''))
         if(bdt[1] == -2):
            print(-2)
            print("Load failed. Failed to access range table")
            logStream.write("-2 \nLoad failed. Failed to access range table")
            print(bdt[3])
            logStream.write(repr(bdt[3]))
            sys.exit(1)
         if (len(bdt[4]) == 0):
            print(-1)
            print("Batch table is empty or all batches are marked as completed")
            logStream.write("-1 \nBatch table is empty or all batches are marked as complete")
            sys.exit(1)
         for i in range(0,len(bdt[4])):
             for j in range(i+1,len(bdt[4])):
                if bdt[4][i][0] == bdt[4][j][0]:
                  print(-2)
                  print("Range table contains duplicate batch numbers."+str(bdt[4][j][0]))
                  logStream.write("-2 \nRange table contains duplicate batch numbers")
                  sys.exit(1)
    except Exception as inst:
                        logStream.write(inst.args)
                        print("-2")
                        print("\nLoad failed.")
                        sys.exit(1)
    try:
     queueObject=queue.Queue()
     threads = []
     #start threads
     if len(bdt[4])==1:
      errStream.write('\nSingle JobScript Thread')
      thread = Thread(target = JobScript, args = (bdt[4][0], 1,queueObject))
      thread.start()
      threads.append( thread )
     else:
      i=0
      try:
       for batch in bdt[4]:
         i=i+1
         while(True):
          #check maximum threads fail count
          if(threadError > int(THREAD_ERRORS)):
            THREAD_FAIL_ACTION = "TRUE"
            break
          #check maximum threads running
          if ( threading.active_count()< int(THREAD_COUNT )):
           errStream.write('Launching JobScript Thread : '+str(i)+'\n')
           thread = Thread(target = JobScript, args = (batch, i,queueObject))
           thread.start()
           time.sleep(5)
           threads.append( thread )
           break
          else:
           time.sleep(10)
         if(threadError > int(THREAD_ERRORS)):
            THREAD_FAIL_ACTION = "TRUE"
            break
      except Exception as exceptionError:
           print("-2")
           print(str(exceptionError))

     # wait for the threads to be done
     for t in threads:
       t.join()
    except Exception as exceptionError:
        exc = queueObject.get(block=False)
        exc_type, exc_obj, exc_trace = exc
        print(exc_obj)
        errStream.write(str(exceptionError))
    if(THREAD_FAIL_ACTION == "TRUE"):
         print("-2")
         print("Maximum thread failed : "+str(threadErrors))

   {%- br %}
   {%- endif %}
    {%- if PilotTable != "" %}
    batchUpdateSql ="""UPDATE """+os.environ.get('RANGE_SCHEMA','')+"."+os.environ.get('PILOT_TABLE','')+"""
      SET STATUS = 'N'
      WHERE STATUS = 'R'
"""{%- br %}
    bdt = WslPythonCommon.RunRedSQL(batchUpdateSql,str(os.environ.get('rangeTableDsn','')),str(os.environ.get('rangeTableUser','')), str(os.environ.get('rangeTablePwd','')),'' , '',os.environ.get('RANGE_SCHEMA','')+"."+os.environ.get('PILOT_TABLE','')){%- br %}
    {%- endif %}
    try:
       WslPythonCommon.WsWrkTask(0,0,0,bdt[2],0,0,0)
    except Exception as exceptionError:
        logStream.write("Call to WsWrkTask failed")
        logStream.write(repr(exceptionError.args))

    if bdt[1]==1:
        logStream.write("Load successful. Total of "+ str(totalRows) +" rows loaded")
        print(1)
        print("Load successful. Total of "+ str(totalRows) +" rows loaded")
    elif bdt[1]== -1:
       logStream.write("Load completed with warnings. Total of "+ str(totalRows) +" rows loaded")
       print(-1)
    else:
        logStream.write("Load failed. Total of "+str(totalRows)+" rows loaded")
        print(-2)
        print("Load failed. Total of "+str(totalRows)+" rows loaded")
    logStream.close()
    errStream.close(){%- br %}
    print(1){%- br %}
    PrintLog(fileAud,fileErr){%- br %}
    if str(os.environ.get('DEBUG','')) == "TRUE":{%- br %}
     j=1{%- br %}
     while j <= i:{%- br %}
        PrintLog(os.path.join(os.environ.get('WSL_WORKDIR',''), str(os.environ.get('WSL_LOAD_TABLE',''))+"_"+str(os.environ.get('WSL_SEQUENCE',''))+"_THREAD_"+str(j)+".aud"),os.path.join(os.environ.get('WSL_WORKDIR',''), str(os.environ.get('WSL_LOAD_TABLE',''))+"_"+str(os.environ.get('WSL_SEQUENCE',''))+"_THREAD_"+str(j)+".err")){%- br %}
        j=j+1{%- br %}
try:{%- br %}
	filePath = os.environ.get('WSL_WORKDIR',''){%- br %}
	auditLog=  str(os.environ.get('WSL_LOAD_TABLE',''))+"_"+str(os.environ.get('WSL_SEQUENCE',''))+".aud"{%- br %}
	fileAud = os.path.join(filePath,auditLog){%- br %}
	errorLog=  str(os.environ.get('WSL_LOAD_TABLE',''))+"_"+str(os.environ.get('WSL_SEQUENCE',''))+".err"{%- br %}
	fileErr = os.path.join(filePath,errorLog){%- br %}
	MAIN(fileAud,fileErr){%- br %}

except Exception as exceptionError:{%- br %}
        print("-2"){%- br %}
        print(exceptionError.args){%- br %}
        print("Load failed"){%- br %}
